[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d MediTabs - Your preferred Medicine Stock Taking Application"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S2-T12-3/main[image:https://travis-ci.org/CS2103-AY1819S2-T12-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/JonathanLeeWH/main/branch/master[image:https://ci.appveyor.com/api/projects/status/voaxxqyrc7lauskt/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S2-T12-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S2-T12-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Introduction to MediTabs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *MediTabs* is for those who prefer to use a desktop app for managing medicine stock taking."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* This is especially useful for clinics such as family clinics or private clinics to track the amount of medicine they have left available."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Some of the Key Features of MediTabs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* It can check the medicine inventory for medicine which are _low stock_ or _expiring_ and *display warnings* to notify that action is required. The warnings are organised in a warning panel for easier access and are automatically removed when the required actions have been taken. With *MediTabs*, you can be at ease knowing that all medicine stocks are accounted for and are not expired."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* Sorting the medicines is easy using *MediTabs* such as by _quantity_, _expiry date_ or by _name_. Sorting by _ascending_ or _descending_ orders are also possible."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Benefits of MediTabs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "1. It is _optimized_ for those who prefer to work with a Command Line Interface (CLI) while still being able to enjoy the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "2. If you can type fast, MediTabs can get your medicine stock taking done faster than traditional GUI apps."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Interested? What are you waiting for? Start using *MediTabs* to increase the productivity of your medicine stock taking workflow today by downloading the latest version of *MediTabs* from the https://github.com/cs2103-ay1819s2-t12-3/main/releases[releases] page. Enjoy!"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* Original source code: https://github.com/nus-cs2103-AY1819S2/addressbook-level4[AddressBook-Level4 project] by https://github.com/se-edu/[SE-EDU initiative]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], https://github.com/apache/pdfbox[Apache PDFBox], http://opencsv.sourceforge.net[Opencsv], https://commons.apache.org/[Apache Commons]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 20,
      "-": 25
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"githubId\": \"kevvvinn\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"displayName\": \"LAW...VIN\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"authorNames\": [\"kevvvinn\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"githubId\": \"JonathanLeeWH\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"displayName\": \"LEE...HAN\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"authorNames\": [\"JonathanLeeWH\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"githubId\": \"melpulomas\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"displayName\": \"MEL...ITO\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"authorNames\": [\"melpulomas\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"githubId\": \"flxffy\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"displayName\": \"ONG...HUI\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"authorNames\": [\"flxffy\", \"aihui\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"githubId\": \"jtankw3\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"displayName\": \"TAN...SON\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"authorNames\": [\"jtankw3\", \"Jason Tan\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    // https://mvnrepository.com/artifact/org.apache.pdfbox/pdfbox"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    implementation group: \u0027org.apache.pdfbox\u0027, name: \u0027pdfbox\u0027, version: \u00272.0.13\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    implementation \u0027com.opencsv:opencsv:4.5\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    implementation \u0027commons-io:commons-io:2.6\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    archiveName \u003d \u0027meditabs.jar\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u0027site-name\u0027: \u0027MediTabs\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/cs2103-ay1819s2-t12-3/main/\u0027,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 2,
      "melpulomas": 1,
      "JonathanLeeWH": 4,
      "-": 232
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Meditabs was developed by the https://github.com/CS2103-AY1819S2-T12-3/main[t12-3] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d Lee Wei Hao Jonathan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::jonathanleewh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "{empty} [https://github.com/JonathanLeeWH[github]] [\u003c\u003cjonathanleewh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d Tan Kian Wei, Jason"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::jtankw3.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "{empty}[https://github.com/jtankw3[github]] [\u003c\u003cjtankw3#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d Ong Ai Hui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "image::flxffy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "{empty}[https://github.com/flxffy[github]] [\u003c\u003cflxffy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d Melvin Vito"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::melpulomas.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "{empty}[https://github.com/melpulomas[github]] [\u003c\u003cmelpulomas#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 9,
      "JonathanLeeWH": 8,
      "-": 29,
      "flxffy": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S2-T12-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve MediTabs."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Email us* : You can also reach us at `e0191399 [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "JonathanLeeWH": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d MediTabs - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-T12-3/main/blob/master/"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "By: `Team T12-3`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::introduction[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Welcome to the _MediTabs Developer Guide_. This guide contains step by step instructions on how to set up the MediTabs project on your computer and modify the project to suit your needs. You can also find out more about the technical aspects of MediTabs such as its design rationales and implementation details. Interested? You can jump to \u003c\u003cSetting up\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d What is MediTabs"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "MediTabs is a desktop application, developed using Java, for managing medicine stock taking. It was created to provide pharmacist with a straightforward and efficient way to keep track of and maintain their medicine inventory. With MediTabs, pharmacist can easily organize medicine details and take note of important information such as which medicines are low in stock, expiring soon or have expired. MediTabs also contains functionality to help pharmacists with tasks which require medicine data such as medicine labelling and inventory analysis."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "MediTabs supports Windows, Linux and macOS operating systems."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d Who is this guide for?"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Are you a developer who wants to learn how MediTabs is designed and implemented, contribute to the development of MediTabs or modify MediTabs for your needs? If so, this guide provides information that will not only help you better understand the inner workings of MediTabs but also the various classes provided which you can use when modifying MediTabs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::introduction[]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::settingup[]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Follow the step by step instructions below to set up MediTabs project with IntelliJ Integrated Development Environment (IDE)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "You are free to use any IDE which you are comfortable with but we *highly recommend* using IntelliJ. As we use IntelliJ in the development of MediTabs, the instructions to set up MediTabs will be catered for users of IntelliJ. You can download IntelliJ link:https://www.jetbrains.com/idea/download/[here]. If you are planning to use IntelliJ, both the community (free) and ultimate (paid) editions of IntelliJ can be used to set up MediTabs project."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::settingup[]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::prerequisites[]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ". *JDK `9` (highly recommended) or `10`*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "JDK `11` and later are not recommended due to some features being removed which were once available in JDK `9`. You can read more about the issue highlighted from the developers of the base source code which MediTabs is based on and improved upon link:https://github.com/se-edu/addressbook-level4/issues/951[here]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::prerequisites[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d Setting up the project on your computer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ". Fork this repository, and clone the fork to your computer"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "This will generate all the resources required by the application and tests."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Open link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow.java`] and check for any code errors"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".. Due to an ongoing https://youtrack.jetbrains.com/issue/IDEA-189060[issue] with some of the newer versions of IntelliJ, code errors may be detected even if the project can be built and run successfully"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".. To resolve this, place your cursor over any of the code section highlighted in red. Press kbd:[ALT + ENTER], and select `Add \u0027--add-modules\u003d...\u0027 to module compiler options` for each error"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat this for the test folder as well (e.g. check link:{repoURL}/src/test/java/seedu/address/ui/HelpWindowTest.java[`HelpWindowTest.java`] for code errors, and if so, resolve it the same way)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "After forking the repo, the documentation will still have the CS2103-AY1819S2-T12-3 branding and refer to the `CS2103-AY1819S2-T12-3/main` repo."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `CS2103-AY1819S2-T12-3/main`), you should do the following:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "image::SDforDeleteMedicine.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// tag::uicomponent[]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// end::uicomponent[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `MedicineListPanel`, `StatusBarFooter`, `InformationPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The `UI` component uses JavaFX UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".  `Logic` uses the `InventoryParser` class to parse the user command."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a Medicine)."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* stores the Inventory data."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cMedicine\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::modelcomponentobjectdiagram[]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Given below is an object diagram to better illustrate how details of a medicine is stored in the `Model` component."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".An example of how the medicine \"Paracetamol\" could be represented by the `Medicine` class."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "image::ModelMedicineObjectDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// end::modelcomponentobjectdiagram[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Inventory`, which `Medicine` can reference. This would allow `Inventory` to only require one `Tag` object per unique `Tag`, instead of each `Medicine` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::storagecomponent[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::storagecomponent[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* can save the medicine inventory data in json format and read it back."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "This section provides you with some description of how certain key features of our product are being implemented."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::informationpanel[]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Information Panel"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "The information panel is mainly driven by `InformationPanel` which extends `UiPart` with an added mechanism to interact with the currently selected medicine and information panel settings."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "It implements the following main operations:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `InformationPanel#showSelectedInformation(Medicine medicine)` -- Creates and displays a `BatchTable` that contains information of the selected medicine and its batches. Values in the `BatchTable` are sorted according to `SortProperty` and `SortDirection` specified in `InformationPanelSettings` stored in `InformationPanel`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `InformationPanel#emptyInformationPanel()` -- Deletes the `BatchTable` being displayed to show an empty pane."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "These operations are hidden and are only triggered when the value of the selected medicine or information panel settings changes. The `InformationPanel` is initialized with the selected medicine and information panel settings passed in as `ObservableValue\u003cMedicine\u003e` and `ObservableValue\u003cInformationPanelSettings` objects and `ChangeListener` objects are added to them. `ChangeListener#changed(ObservableValue\u003c? extends T\u003e observable, T oldValue, T newValue)` is called whenever the values in either of the `ObservableValue` objects changes."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Given below is a diagram showing the execution of `InformationPanel` when a change to the selected medicine occurs. `informationPanel` variable seen in the diagram is a `StackPane` object used to display the created `BatchTable` by adding it as a child node."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".Sequence Diagram for InformationPanel when a change in selected medicine occurs"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "image::InformationPanelSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Given below is an example usage scenario and how the information panel behaves at each step when the selected medicine changes."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 1. The user launches the application. The selected medicine is always null when the application is launched. An empty `InformationPanel` is displayed."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 2. The user executes `select 1` command to select the 1st medicine in the inventory. Since the new value is not null, `InformationPanel#showSelectedInformation(Medicine medicine)` is called. A new `BatchTable` with information of the selected medicine is created and displayed."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "An `update` command will also cause `ChangeListener#changed(ObservableValue\u003c? extends T\u003e observable, T oldValue, T newValue)` to be called as although the same medicine is still selected, the medicine is replaced in the `Inventory` with updated fields."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 3. The user executes `find n/Paracetamol`. The `find` command deselects the selected medicine and the new value is null. Only `InformationPanel#emptyInformationPanel()` is executed."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Changes to the information panel settings results in a similar sequence of events, except the new value of `InformationPanelSettings` is saved in `InformationPanel` before `InformationPanel#display()` is called."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Given below is another example usage scenario of how the information panel interacts with `InformationPanelSettings` and the `sort` command."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 1. The user launches the application. `InformationPanelSettings` stored in `Model` is passed as an `ObservableValue\u003cInformationPanelSettings\u003e` to initialize the `InformationPanel`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 2. The user executes `sort p/quantity d/ascending` command to sort all batch tables by quantity in ascending order. The `sort` command calls `Model#setInformationPanelSettings(InformationPanelSettings informationPanelSettings))` which changes the value of the `InformationPanelSettings` in `Model`. The new `InformationPanelSettings` is saved in `InformationPanel`. If the selected medicine is not null, `InformationPanel#showSelectedInformation(Medicine medicine)` is called. Given below is an activity diagram to show how the saved `InformationPanelSettings` is used to sort the `BatchTable` during its initialization. A `TableView` object populated with the details of the selected medicine is created before the sorting takes place."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".Activity Diagram demonstrating how BatchTable is sorted during initialization"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "image::InformationPanelActivityDiagram.png[width\u003d\"900\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "For more information on the `TableView` class, you may refer to its API https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/TableView.html[here]."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How the information panel executes"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* **Alternative 1 (current choice):** Creates a new `BatchTable` to be displayed every time a new medicine is selected."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Pros: Information can be taken from `Model` component during initialization so no extra memory is needed to store table information."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Cons: May have performance issues in terms of time needed to retrieve the information and build the table, especially if number of batches becomes huge."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* **Alternative 2:** Save created `BatchTables` as a field in `Medicine`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Pros: Save time needed for creating the `BatchTable` for faster response time."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Cons: More memory needed to store `BatchTable`. `BatchTable` may still have to be recreated if the details of the `Medicine` are changed after the `BatchTable` has been created."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// end::informationpanel[]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::exportcommand[]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d Exporting as CSV file format"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "This section provides you with an overview of how exporting as Comma-separated values (CSV) file format is implemented in MediTabs and the design considerations made by our team with regards to its implementation."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The exporting as CSV file format mechanism is facilitated by `CsvWrapper`."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "It is built on top of the `Opencsv` Java CSV parser library, licensed under the `Apache 2 OSS License`, so that it integrates with our product. This is done by providing additional operations to support exporting the current medicine inventory data shown in the GUI to CSV file format."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "There are many additional operations added in `CsvWrapper` but we will only list the key operations which are the main drivers of the overall implementation of the feature for easier reference and understanding."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The key operations are as follows:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* `CsvWrapper#export()` -- Export the current medicine inventory data shown in the GUI to CSV file format."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* `CsvWrapper#createCsvFile(String csvFileName)` -- Creates a CSV file with the file name based on the `csvFileName` input. The file is created in the default `exported` directory which is located in the same directory as our product application."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "If the default `exported` directory is not found, it will be automatically created."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* `CsvWrapper#writeDataToCsv(List currentGuiList)` -- Writes the current medicine inventory data shown in the GUI to the CSV file created by the `CsvWrapper#createCsvFile(String csvFileName)` operation."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Out of the three key operations stated above, *only* `CsvWrapper#export()` is a _public_ operation available for use by other components. It acts as the main interface which other components use to interact with `CsvWrapper` in order to integrate exporting to CSV file format feature into their own implementation."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Given below is a sequence diagram overview of how these 3 key operations behave when the user executes the `export` command in order to export the current medicine inventory data shown in the GUI to CSV file format:"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".Export Command Sequence Diagram Overview"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "image::ExportCommandSequenceDiagramOverview.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Given below is a brief description of how the exporting as CSV file format mechanism behaves as shown in the sequence diagram above:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Step 1: When the user executes the `export` command, assuming parsing of the command line arguments have already been completed, the `ExportCommand#execute()` operation is called."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Step 2: The `ExportCommand#execute()` operation initialises the `CsvWrapper` with the _file name of the CSV file to be stored_ and _the current model instance_ as its input parameters."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Step 3: The `ExportCommand#execute()` operation then calls `CsvWrapper#export()` operation which is the first key operation implementing the export to CSV file format feature."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Step 4: The `CsvWrapper#export()` operation retrieves the current medicine inventory data shown in the GUI by calling the `Model#getFilteredMedicineList()` operation."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Step 5: After retrieving the data, the `CsvWrapper#createCsvFile(String csvFileName)` operation, which is the second key operation, is called. It creates an empty CSV file with the input file name in the default `exported` directory."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "If a CSV file with the input file name already exists in the `exported` directory, a `\"Could not export data to csv file: {Input File Name} already exists in \"exported\" directory\"` exception will be shown in the `ResultDisplay` panel of the GUI as a `CommandException` is thrown and the exporting process will stop executing. In other words, the current medicine inventory data shown in the GUI would not be exported."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Step 6: After the empty CSV file is created, the `CsvWrapper#writeDataToCsv(List currentGuiList)`, which is the third key operation, is called to process the current medicine inventory data retrieved earlier in Step 4 and writes to the CSV file in an organised format for easier reference by the users of the exported CSV file."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Step 7: The current medicine inventory data shown in the GUI is exported successfully to CSV file format."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Step 8: The `ExportCommand#execute()` operation returns a `CommandResult` which shows the current list is exported to a CSV file with the input file name."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The following activity diagram summarizes what happens when a user executes the `export` command:"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".Export Command Activity Diagram"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "image::ExportCommandActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How exporting as CSV file format executes"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* **Alternative 1 (current choice):** Exports the current medicine inventory data shown in the GUI to CSV file format using the `export` command."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Pros: Easy to implement and users can preview the data before exporting."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* **Alternative 2:** Individual commands can add an additional `export` parameter to support exporting as CSV file format."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Pros: Users can export directly through individual commands which support the additional `export` parameter (e.g. The `find` command with its additional `export` parameter set to true, exports the filtered medicine inventory data immediately without having to retrieve from `Model#getFilteredMedicineList()` operation)."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Cons: We must ensure that the implementation and integration of the exporting to CSV file of each individual commands are correct. Furthermore, users are not able to preview the data before exporting."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure/Algorithm/Implementation to support the `export` command"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* **Alternative 1 (current choice):** Iterate through each of the medicine in the list retrieved from `Model#getFilterMedicineList()` operation to build the structure in which the data is organised when exported to CSV file format."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Pros: Easy for developers to understand, especially for those who want to modify the way in which the data is organised when exported to CSV file format but have no prior knowledge on `Opencsv` Java CSV parser library."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Cons: The time complexity of the algorithm is O(n) and might not be as efficient especially when a large amount of data is involved. Furthermore, it does not take full advantage of the more advanced features provided by the `Opencsv` Java CSV parser library."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* **Alternative 2:** Use `Opencsv` Java CSV parser library\u0027s `StatefulBeanToCsvBuilder` operation for building the structure in which the data is organised from the list retrieved using the `Model#getFilterMedicineList()` operation when exporting to CSV file format."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Pros: Does not require iterating through the list and convert it to a String Array as we can use the library\u0027s `StatefulBeanToCsvBuilder` operation to build the structure from the list by passing the list as a parameter to the operation. Furthermore, the formatting process can be automated using the operation. It is also more efficient in terms of performance according to the library\u0027s documentation if the ordering of the data exported is not a concern to the developer."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Cons: Requires prior knowledge on the way in which the library\u0027s `StatefulBeanToCsvBuilder` operation works. If a developer wants to modify the data exported to be ordered in a specific format, it requires knowledge on the library\u0027s `MappingStrategy` related operations which may be complicated for developers new to the library."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "More information on `Opencsv` library\u0027s `StatefulBeanToCsvBuilder` operation can be found in the library\u0027s link:http://opencsv.sourceforge.net/[documentation]."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::exportcommand[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d Undo/Redo"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedInventory`."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "It extends `Inventory` with an undo/redo history, stored internally as an `inventoryStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `VersionedInventory#commit()` -- Saves the current inventory state in its history."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `VersionedInventory#undo()` -- Restores the previous inventory state from its history."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `VersionedInventory#redo()` -- Restores a previously undone inventory state from its history."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitInventory()`, `Model#undoInventory()` and `Model#redoInventory()` respectively."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedInventory` will be initialized with the initial inventory state, and the `currentStatePointer` pointing to that single inventory state."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th medicine in the inventory. The `delete` command calls `Model#commitInventory()`, causing the modified state of the inventory after the `delete 5` command executes to be saved in the `inventoryStateList`, and the `currentStatePointer` is shifted to the newly inserted inventory state."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 3. The user executes `add n/Paracetamol ...` to add a new medicine. The `add` command also calls `Model#commitInventory()`, causing another modified inventory state to be saved into the `inventoryStateList`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "If a command fails its execution, it will not call `Model#commitInventory()`, so the inventory state will not be saved into the `inventoryStateList`."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 4. The user now decides that adding the medicine was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoInventory()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous inventory state, and restores the inventory to that state."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial inventory state, then there are no previous inventory states to restore. The `undo` command uses `Model#canUndoInventory()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoInventory()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the inventory to that state."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "If the `currentStatePointer` is at index `inventoryStateList.size() - 1`, pointing to the latest inventory state, then there are no undone inventory states to restore. The `redo` command uses `Model#canRedoInventory()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the inventory, such as `list`, will usually not call `Model#commitInventory()`, `Model#undoInventory()` or `Model#redoInventory()`. Thus, the `inventoryStateList` remains unchanged."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitInventory()`. Since the `currentStatePointer` is not pointing at the end of the `inventoryStateList`, all inventory states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/Paracetamol ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire inventory."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the medicine being deleted)."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of inventory states."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedInventory`."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// tag::labelcommand[]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d Medicine Label using Label Command"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Users can use the command to output medicines information to the PDF folder. Information will be in Portable Document Format (PDF)."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Current implementation:"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "The label command uses Apache PDFBox, a 3rd party library capable of creating and editing PDF files. To import the library:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Locate the build.gradle file under the main folder. Insert the new dependency implementation group: `org.apache.pdfbox`, name: `pdfbox`, version: `2.0.13`."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "This imports the library over to the project for use. You can look at \u003c\u003cManaging Dependencies\u003e\u003e for more information on 3rd party libraries."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "There are many classes available in the Apache PDFBox, the key operations that we are using are:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* `PDDocument` - For creating a new blank PDF file for the medicine details to be exported to."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* `PDPage` - Creates a new PDPage instance for embedding."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* `PDPageContentStream` - Provides the ability to write a page content stream."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "The following sequence diagram shows how the label operation works:"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::LabelUML.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Fig 4.4 UML sequence diagram"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d Usage scenario example"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Label command without filename behaviour:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".  The user launches the application for the first time. An empty InformationPanel is displayed. (Fig 4.4.1.1)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".  The user executes the `label 2` to output the label of the 2nd medicine indexed in the inventory. Since no file name is included in the argument, the default filename \u0027to_print\u0027 is used instead."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- Based on the UML diagram above, \"label 2\" will be passed onto the `InventoryParser`. LabelCommand will be created and returned to the logic manager."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- Logic manager will `execute()` the `LabelCommand`. The PDF file will be created using the `PDFWrapper` class."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".  The user can find the file `to_print` under the main folder. (Fig 4.5.3)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::label2_taken.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Fig 4.4.1.1"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::folderPDF.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Fig 4.4.1.2 (PDF folder highlighted)"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Label command with filename behaviour:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".  The user executes `label 1 f/file_to_print` to output the label of the 1st medicine indexed in the inventory. The `InventoryParser` class will be able to tokenize and read the desired file name. LabelCommand will be created and return to the logic manager."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- Logic manager will `execute()` the `LabelCommand`. The PDF file will be created using the `PDFWrapper` class."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".   The user can find a new file `file_to_print` under the same main folder."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "The following activity diagram shows the behaviours in summary (Fig 4.4.1.3):"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::LabelActivityDiagram.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "(Fig 4.4.1.3)"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "If the user would execute another `label 1`, the original `to_print` file will be replaced. Users are warned in the User Guide to be caution about overwriting files."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How label executes"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* **Alternative 1 (current choice):** Creates a new `PDFDocument` every time a medicine it to be labeled."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Cons: Uses more of the user computer memory space as it creates the temporary file."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* **Alternative 2:** Find the existing PDF file and edit."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Pros: Will use less memory."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Cons: We have to read the existing file which requires more time to execute. PDF files are also meant to not be edited once created."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// end::labelcommand[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Data encryption is likely to be implemented in future versions of the MediTabs if a reasonable implementation is found."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How data encryption is executed"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* **Alternative 1:** Encrypt the entire inventory."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Pros: Easy to implement. Use existing encryption libraries to encrypt the entire inventory."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Cons: May have performance issues when encrypting/decrypting large amounts of data."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* **Alternative 2:** Only encrypt parts of the inventory user selects."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Pros: More efficient in terms of performance (cuts down on encryption/decryption time)."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Cons: Add `encrypt` and `decrypt` command to allow user to choose what needs to be encrypted and decrypted respectively. Need to encrypt/decrypt different chunks of data correctly."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support data encryption"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* **Alternative 1:** Save the entire inventory as encrypted data in the database."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Pros: Data is secure and not viewable without encryption key."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Cons: Implement log in page for decryption of inventory. Require alternative if encryption key is forgotten."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* **Alternative 2:** Save encrypted parts of inventory and plaintext in database."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Pros: Able to salvage some information if encryption key is lost."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Cons: Need to implement packing/unpacking of encrypted data and plaintext during startup/shutdown."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// tag::warningpanel[]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d Warning Panel"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "flxffy"
        },
        "content": "The `WarningPanel` is created as part of the `MainWindow`, to be displayed in the GUI. Within the panel are two lists, expiring/expired and low in stock, represented by `WarningListView` objects. The purpose of this feature is to allow the user to view expiring/expired medicine batches and low quantity medicines easily."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "flxffy"
        },
        "content": "The following are some of the operations implemented:"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* `Logic#getWarningPanelPredicateAccessor()` -- Returns a `WarningPanelPredicateAccessor`. This gives the caller access to all predicates used to filter lists for the warning panel in the current session."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* `WarningPanel#setUpVBox(ObservableList\u003cMedicine\u003e, ObservableList\u003cMedicine\u003e)` -- Sets up the `VBox` (vertical box) representing the warning panel by creating `WarningListView` objects from the `ObservableList` objects. Each `WarningListView` is a list to be displayed in the GUI."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Initialising the warning panel"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Given below is how the warning panel GUI is initialised on start up."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 1. User launches MediTabs, invoking `MainWindow#fillInnerPart`. The `MainWindow` class calls `Logic#getExpiringMedicinesList`, `Logic#getLowStockMedicinesList` and `Logic#getWarningPanelPredicateAccessor` to obtain the two `ObservableList\u003cMedicine\u003e` to be displayed in the warning panel and the predicate accessor used in this session."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 2. The `WarningPanel` is initialised with the objects obtained in Step 1, and constructs a `VBox`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 3. The `WarningPanel` self-invokes `setUpVBox` to populate the `VBox` with `WarningListView` objects for display. There will be two `WarningListView` objects, each initialised with its corresponding `ObservableList\u003cMedicine\u003e`, a list descriptor and the predicate accessor."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 4. The `WarningListView` configures a `ListView\u003cMedicine\u003e` object to display elements in the `ObservableList\u003cMedicine\u003e`. Every `ListView\u003cMedicine\u003e` cell is populated by a `WarningListViewCell` object."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 5. The `WarningListViewCell` listens to updates to the `ObservableList\u003cMedicine\u003e` that would update the medicines/batches to be displayed in the respective list in the warning panel."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "flxffy"
        },
        "content": "The sequence diagram below summarises the above mentioned mechanism."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[[fig-WarningPanelSequenceDiagram]]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".Sequence diagram illustrating initialisation of the warning panel on start up"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "flxffy"
        },
        "content": "image::WarningPanelSequenceDiagram.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Input handling"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "flxffy"
        },
        "content": "The basic flow of the `warning` command in two scenarios are as such:"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d To change a threshold used by the warning panel"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 1. The user enters the command `warning e/10` to change the threshold for expiring medicine batches."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 2. The command is parsed and a `WarningCommand` object is created with the type and value of the new threshold to be set."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 3. The `WarningCommand#execute` method is invoked."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 4. Threshold for expiring medicine batches is changed."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 5. The expiring/expired batch list in the warning panel is updated accordingly."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 6. The new set of thresholds is shown in the result display box."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d To display thresholds currently in use"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 1. The user enters the command `warning show`."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 2. The command is parsed and a `WarningCommand` object is created to show current threshold levels."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 3. The `WarningCommand#execute` method is invoked."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Step 4. The current thresholds used are shown in the result display box."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "flxffy"
        },
        "content": "The activity diagram below summarises what happens when the `warning` command is executed:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[[fig-WarningPanelActivityDiagram]]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".Activity diagram illustrating what happens when a user executes the `warning` command"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "flxffy"
        },
        "content": "image::WarningCommandActivityDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Construction of the lists displayed by the warning panel"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Two `ObservableLists\u003cMedicine\u003e` objects are required, one to display medicine batches expiring soon and the other to display medicines low in stock."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* **Alternative 1 (current choice):** Create the `ObservableList\u003cMedicine\u003e` objects in the `ModelManager` by filtering the main medicine list, and have `MainWindow` obtain them via `Logic`."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Pros: Easy to change predicates for filtration, making it possible to set user defined thresholds, thereby improving user experience."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Cons: Requires passing the two lists around, from `ModelManager` to `Logic` then `MainWindow`."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* **Alternative 2:** Create the `ObservableList\u003cMedicine\u003e` objects in `Ui`."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Pros: Simple to implement. Filter the main medicine list with the default predicates (i.e. thresholds for expiration and low stock) within `WarningPanel`."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Cons: No separation of concerns. Not possible to set user defined thresholds for either list."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of predicates used for the warning panel"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* **Alternative 1 (current choice):** Singleton warning panel predicate accessor."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Pros: Easy to access and update all warning panel-related predicates."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Cons: Must pass the instance of the predicate accessor around to ensure there is only one instance of it at any time."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* **Alternative 2:** Save all predicates in the `ModelManager`."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Cons: Predicate manipulation from `Logic` when new thresholds are set violates Dependency Inversion Principle."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// end::warningpanel[]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::validationoffilename[]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d Validation of File Name"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "We are using the `seedu.address.commons.FileName` class which is created by our team for the validation of file name specified by the user. This is important for commands in MediTabs which supports the file name field."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "File name *does not* include file extension such as `.csv` and `.pdf`."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "A list of reasons why we choose to create a `FileName` class for the validation of file name:"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* There are currently no third party libraries available for validating file name to ensure that the file name is platform independent. In other words, there are no public methods to validate the file name specified by the user to ensure that it is supported on Windows, Linux and macOS operating systems."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "There are certain naming conventions which have to be followed on Windows operating system which are not necessary on Linux and macOS operating systems. You can read more about the naming conventions for Windows link:https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#naming-conventions[here]. You can also refer to link:https://en.wikipedia.org/wiki/Filename#Comparison_of_filename_limitations[this] Wikipedia article for a detailed comparison between different naming conventions for different operating systems."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* Ensure consistency by creating a file naming convention."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* Ensure that files created with file names specified by the user can be used on Windows, Linux and macOS operating systems. This is to avoid potential bugs involving file names as MediTabs supports Windows, Linux and macOS operating systems hence, the user might switch between these operating systems when using MediTabs."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The validation of file name mechanism is facilitated mainly by the `FileName#isValidFileName(String fileNameToCheck)` operation. The operation checks if the `fileNameToCheck` input is a valid file name based on the file naming convention we have created for MediTabs."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The file naming convention used in MediTabs is as follows: +"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Format: `Start with an alphabet or number followed by alphabets, numbers, underscore or hyphen`"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "In order to ensure that the validation of file name is platform independent, the validation is implemented such that it ensures that the specified file name not only follows the file naming convention used in MediTabs but also does not violate file naming conventions in any platform especially Windows which has a very strict file name conventions."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Based on manual testing by our team on Windows, it is discovered that `COM0` and `LPT0` are also part of the reserved names which are not allowed as file names in Windows. However, they are not reflected in the Windows documentation under the link:https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#naming-conventions[naming conventions] section. In order to ensure that `FileName` class validation implementation is platform independent, we have included `COM0` and `LPT0` as reserved names when validating the specified file name."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "A full list of reserved names implemented in `FileName` class which are not allowed as file names is as follows:"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* `CON, PRN, AUX, NUL, COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT0, LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The reserved names listed above are *case insensitive*, in other words, names such as `prn` or `CoM0` are also reserved names."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The argument passed to the `fileNameToCheck` parameter of the `FileName#isValidFileName(String fileNameToCheck)` operation *must not* be an empty string or a null argument. If the argument passed is an empty string, the specified file name will be declared as invalid. If a null argument is passed, a `NullPointerException` will be thrown."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d\u003d How to integrate it into new commands in MediTabs?"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "If you are a developer looking to add new features to MediTabs which involves the creation of files, we recommend integrating the existing `FileName` class. This can easily be done by making use of `FileName#isValidFileName(String fileNameToCheck)` operation."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "You may wish to refer to the code snippet shown below, which is a modified version of the `ParserUtil#parseFileName(String fileName, boolean isEmptyFileNameAllowed)` operation used in MediTabs. The code snippet demonstrates how `FileName#isValidFileName(String fileNameToCheck)` operation can be used for easier reference."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "----"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public static FileName parseFileName(String fileName) throws ParseException {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    if (!FileName.isValidFileName(fileName)) { # \u003c1\u003e"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        throw new ParseException(FileName.MESSAGE_CONSTRAINTS); # \u003c2\u003e"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    return new FileName(fileName); # \u003c3\u003e"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "----"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003c1\u003e Validate the specified file name using the `FileName#isValidFileName(String fileNameToCheck)` operation."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003c2\u003e If the specified file name is invalid, a `ParseException` is thrown."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003c3\u003e If the specified file name is valid, a `FileName` object constructed from the specified file name is returned."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "In the code snippet above, we have modified the method signature from `ParserUtil#parseFileName(String fileName, boolean isEmptyFileNameAllowed)` to `ParserUtil#parseFileName(String fileName)` and also its implementation for easier reference and understanding."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "We *highly recommend* complementing the `FileName` class with Java build in classes such as link:https://docs.oracle.com/javase/9/docs/api/java/io/File.html[`java.io.File`] or link:https://docs.oracle.com/javase/9/docs/api/java/nio/file/Files.html[`java.nio.file.Files`] and handling the exceptions thrown by the methods used in those classes when creating files with the validated file names. This is to allow potential exceptions involving but not limited to permissions, security and file name being too long which are outside the scope of `FileName` class to be handled."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Examples of commands in MediTabs which uses the `FileName` class to validate the specified file name:"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* `export [FILE_NAME]`"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* `label INDEX [f/FILE_NAME]`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::validationoffilename[]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "A project often depends on third-party libraries. For example, MediTabs depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// tag::userstories[]"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"10%,\u003c20%,\u003c30%,\u003c40%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* * *` |pharmacist |view the inventory easily |check stock levels"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* * *` |pharmacist |view the expiry dates of medicine easily |remove expired medicine"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* * *` |pharmacist |view batch details easily |get batch information quickly"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "|`* * *` |pharmacist |add new medicine to the inventory |keep my inventory updated"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "|`* * *` |pharmacist |delete medicine |remove medicine that have become obsolete"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* * *` |pharmacist |edit inventory level |keep my inventory updated"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* * *` |pharmacist |receive notifications when my inventory is low or there is expiring stock |will not forget to update the inventory"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* * *` |pharmacist |find a medicine by name |locate details of the medicine without having to go through the entire list"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* * *` |pharmacist |export inventory data |send the data to relevant personnel"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* * *` |pharmacist |print labels for the medicine |label the medicine for the patients\u0027 reference"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* *` |pharmacist |have an auto-completing search bar |do not have to type out the medicine\u0027s full name"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`* *` |pharmacist |view purchase and sales history |forecast sales and performance"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "|`*` |pharmacist |view manufacturers\u0027 contact details |find out who to contact for more stock quickly"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "|`*` |pharmacist |be redirected to a mailer to email manufacturers |restock quickly"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "|`*` |pharmacist |be recommended dosage |recommend dosage based on patient\u0027s profile"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "|`*` |pharmacist |have a task list |set reminders for myself"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|`*` |pharmacist |save information on medicine\u0027s usage |remind myself of its usage"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "flxffy"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// end::userstories[]"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::usecase[]"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "(For all use cases below, the *System* is the `MediTabs` and the *Actor* is the `pharmacist`, unless specified otherwise)"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d Use Case 1: View Complete Inventory"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "flxffy"
        },
        "content": "1.  Upon start up, System displays the complete inventory of medicine."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "flxffy"
        },
        "content": "2.  Pharmacist navigates the list with arrow keys."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* 1a. Pharmacist used `find` function, filtered inventory is shown."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1a1. Pharmacist requests for complete inventory to be listed using `list` command."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** 1a2. System displays complete inventory."
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Use Case 2: Update Batch Details of a Medicine in Inventory"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "flxffy"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "1.  Pharmacist notes the index of the medicine to be updated in the list."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "2.  Pharmacist request to update details of a batch of medicine using the index and the `update` command."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "3.  System displays updated details."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "flxffy"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* 1a. Medicine is new and has not been added to the inventory."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1a1. Pharmacist uses the `add` function to add a new entry to list."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1a2. Pharmacist notes the index of the new medicine listing from the search result."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* 1b. Pharmacist cannot remember batch number of batch to be updated."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1b1. Pharmacist uses `select` command to select the medicine to be updated."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1b2. System displays the batch table with information of all batches of the selected medicine."
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1b3. Pharmacist refers to the batch table while inputting batch details."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* 2a. Pharmacist did not enter expiry date and batch does not already exist."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "+"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 2a1. An error message is shown."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 2a2. System requests both quantity and expiry date be entered for new batches."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 2a3. Pharmacist repeats request with the required input."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "+"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Use case resume at step 3."
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d Use Case 3: Delete Medicine from Inventory"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "1.  Pharmacist notes the index of the medicine to be deleted in the list."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "2.  Pharmacist request to delete a medicine listing using the index and the `delete` command."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "3.  System displays updated list."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* 1a. Pharmacist cannot find the medicine listing manually from the list."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1a1. Pharmacist uses the `find` function to look for medicine listing."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1a2. System lists the search results."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** 1a3. Pharmacist notes the index of the medicine listing from the search result."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// end::usecase[]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// tag::nonfunctionalreq[]"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "flxffy"
        },
        "content": ". User Constraints"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. The product caters users with a preference for typing commands over the command line. Only limited GUI interactions are available as the focus is on the command line interface."
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. The product is meant only for single user usage. i.e, any features (e.g. profile switching) should only be limited to a single user. Using such features to support multiple users is not recommended."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "flxffy"
        },
        "content": ". Data"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. User should have read and write permissions for data stored on the local machine. i.e, expert users can edit the data file without the application."
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Third party database management systems (e.g. MySQL, Postgres) are not permitted."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "flxffy"
        },
        "content": ". Working Environment"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. The product should work on all mainstream OS."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Connection to external APIs is not recommended, although the usage of reliable external APIs is permissible. In such cases, a fallback should be implemented should the connection fail."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "flxffy"
        },
        "content": ". Portability"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. The product should work without the need for additional software. `.jar` package will be used for the product release."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "flxffy"
        },
        "content": ". Testability"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Avoid implementing features that are difficult to test manually and automatically. i.e, avoid dependence on remote APIs as their behaviours are beyond our control."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Due to the project\u0027s constraints, audio related features were not taken into consideration. Avoid any features using audio indicators."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// end::nonfunctionalreq[]"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Windows, Linux, Unix, macOS"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[[inventory]] Inventory::"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "flxffy"
        },
        "content": "A complete list of goods in stock"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[[batch]] Batch::"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "flxffy"
        },
        "content": "A quantity or consignment of goods produced at one time"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Deleting a medicine"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ". Deleting a medicine while all medicines are listed"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command. Multiple medicines in the list."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: First entry is deleted from the list. Details of the deleted entry shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: No medicine is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "//tag::updatetesting[]"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Updating batch details of a medicine"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ". Updating a medicine with a new batch while all medicines are listed"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command. Multiple medicines in the list. All batch numbers used for testing should not exist in the batch records of the selected medicine. Use `select 1` to load the information page."
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/A q/1 e/1/1/2020` (valid input) +"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: New batch is added to the batch table shown in the information panel. Details of the added batch shown in the status message. Total quantity should increase by `1`. Next expiry of medicine should change if `01/01/2020` is earlier."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 q/1 e/1/1/2020` (missing batch number) +"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B e/1/1/2020` (missing quantity) +"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/1`  (missing expiry) +"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "//end::updatetesting[]"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/- q/A e/1/1/2020` (invalid batch number) +"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/10000000000000 e/1/1/2020` (invalid quantity - max quantity exceeded) +"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/1 e/1/1/10000` (invalid expiry) +"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/0 e/1/1/2020` (zero quantity) +"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/1 e/1/1/1995` (passed date for expiry) +"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/1 e/29/2/2019` (invalid leap year) +"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: Error details shown in the status message. No changes to medicine. Status bar remains the same."
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/1 e/29/2/2020` (valid leap year)   +"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: New batch is added to the batch table shown in the information panel. Details of the added batch shown in the status message. Total quantity should increase by `1`. Next expiry of medicine should change if `29/02/2020` is earlier."
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 e/29/2/2020 q/1 b/C` (different order of arguments)   +"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: New batch is added to the batch table shown in the information panel. Details of the added batch shown in the status message. Total quantity should increase by `1`. Next expiry of medicine should change if `29/02/2020` is earlier."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ". Updating a medicine with a existing batch while all medicines are listed"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command. Multiple medicines in the list. Batch number used for testing should already exist in the batch records of the selected medicine (B is added in the tests above). Use `select 1` to load the information page."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/10` (missing expiry allowed) +"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: batch is updated in batch table shown in the information panel with quantity changed to `10`. Details of the updated batch shown in the status message. Total quantity should increase by `9`. Next expiry should not change."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B e/1/1/2020` (missing quantity allowed) +"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: batch is updated in batch table shown in the information panel with expiry changed to `01/01/2020`. Details of the updated batch shown in the status message. Total quantity should not change. Next expiry of medicine should change if `01/01/2020` is earlier."
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ". Updating a medicine by removing an existing batch while all medicines are listed"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command. Multiple medicines in the list. Batch number used for testing should already exist in the batch records of the selected medicine (B is added in the tests above). Use `select 1` to load the information page."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/B q/0` (valid input) +"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: batch is removed from batch table shown in the information panel. Details of the removed batch shown in the status message. Total quantity should be reduced by `10`. Next expiry should be updated if batch removed had the closest expiry date."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ". Updating a medicine by adding a new batch while medicine list is filtered"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Prerequisites: use `find` command to filter the list. Recommended `find t/ fever`. Batch number used for testing should not exist in the batch records of the selected medicine. Use `select 1` to load the information page."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/D q/1 e/1/1/2020` (valid input) +"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: batch is added to batch table shown in the information panel. Details of the added batch shown in the status message. Total quantity should increase by `1`. Next expiry should be updated if batch removed had the closest expiry date. Filtered list should remain filtered."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".. Test case: `update 1 b/E q/1 e/1/1/2020 b/F b/G q/2 e/2/1/2020`  (more than one valid input) +"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Expected: batch `G` is added to batch table shown in the information panel as last valid input is taken. Details of the added batch shown in the status message. Total quantity should increase by `2`. Next expiry of medicine should change if `02/01/2020` is earlier. Filtered list should remain filtered."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::exportcommandtest[]"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d Exporting as CSV file format"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ". Exporting the current medicine inventory data shown in the GUI to CSV file format while all medicines are listed."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command."
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. Test case: `export \\` +"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Expected: An \"Invalid command format! File Name (without including file extension) must start with an alphabet or number followed by alphabets, numbers, underscore or hyphen. It must not be a reserved word. You can type the help command to view the User Guide for more details. +"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "export: exports the current list to a .csv file. Parameters: [FILE_NAME] +"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Example: export example\" exception will be shown in the `ResultDisplay` panel of the GUI. *No* exported CSV file is created in the `exported` directory."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ". Exporting the current medicine inventory data shown in the GUI to CSV file format while all medicines are listed. There are *no cases* where there are no medicines or all medicines do not have batches in the current medicine inventory data shown in the GUI."
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command. Multiple medicines *with batches* are in the list."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. Test case: `export` +"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Expected: The current medicine inventory data shown in the GUI is successfully exported to CSV file format. The exported CSV file has the default file name based on the date and time of export. The specific date and time format used if no file name is specified is `dd_MMM_yyyy_HH_mm_ss` e.g. `18_Mar_2019_10_28_00`. The exported CSV file\u0027s medicine inventory data will contain the header information with *only* the data of medicines with batches."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. Test case: `export example` +"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Expected: The current medicine inventory data shown in the GUI is successfully exported to CSV file format. The exported CSV file has the file name `example`. The exported CSV file\u0027s medicine inventory data will contain the header information with *only* the data of medicines with batches."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ". Exporting the current medicine inventory data shown in the GUI to CSV file format while all medicines are listed. There are either no medicines or all medicines do not have batches in the current medicine inventory data shown in the GUI."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command. No medicines or all medicines do not have batches in the current medicine inventory data."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. Test case: `export` +"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Expected: The current medicine inventory data shown in the GUI is successfully exported to CSV file format. The exported CSV file has the default file name based on the date and time of export. The specific date and time format used if no file name is specified is `dd_MMM_yyyy_HH_mm_ss` e.g. `18_Mar_2019_10_28_00`. The exported CSV file\u0027s medicine inventory data will contain *only* the header information with no medicine data."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".. Test case: `export example` +"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Expected: The current medicine inventory data shown in the GUI is successfully exported to CSV file format. The exported CSV file has the file name `example`. The exported CSV file\u0027s medicine inventory data will contain *only* the header information with no medicine data."
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::exportcommandtest[]"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// tag::warningtest[]"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d Changing warning panel thresholds"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "flxffy"
        },
        "content": ". Changing the threshold for expiring medicine batches"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Prerequisites: Current expiry threshold is 10 days (default). Multiple medicines with batches in the list."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Test case: `warning e/0` +"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Expected: All medicines batches that have expired or are expiring today are shown in the warning panel\u0027s \"Expiring Soon/Expired\" list. New thresholds are shown in status message."
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Test case: `warning e/-1` +"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Expected: No changes to warning panel. Error details shown in the status message."
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Other incorrect warning commands to try: `warning`, `warning e/x` (where x is not a positive integer), `warning {non-whitespace preamble} e/y` (where y is a positive integer) +"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "flxffy"
        },
        "content": ". Changing the threshold for medicines with low stock"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Prerequisites: Current low stock threshold is 20 (default). Multiple medicines with non-zero total quantities in the list."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Test case: `warning q/0` +"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Expected: Warning panel\u0027s \"Low in Stock\" list empties and placeholder \"Nothing to show\" is displayed. New thresholds are shown in status message."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Test case: `warning q/-1` +"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Expected: No changes to warning panel. Error details shown in the status message."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".. Other incorrect warning commands to try: `warning`, `warning q/x` (where x is not a positive integer), `warning {non-whitespace preamble} q/y` (where y is a positive integer) +"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// end::warningtest[]"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// tag::labeltest[]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d Labeling medicine information onto a PDF file"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ". Output a medicine information onto a PDF file using default name."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command. There is at least a medicine in the first index"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".. Test case: `label 1` +"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Expected: Success message shown in the UI. Current medicine on index one is successfully output to a PDF file under the PDF folder. Filename is `to_print`."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".. Test case: `label` +"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Expected: Unsuccessful message shown in the UI. No file will be output in the PDF folder."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ". Output a medicine information onto a PDF file with its name given by the user. Filename must follow Appendix A. Else, error message is shown."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".. Prerequisites: List all medicines using the `list` command. There is at least a medicine in the first index"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".. Test case: `label 1 f/newfile` +"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Expected: Success message shown in the UI. Current medicine on index one is successfully output to a PDF file under the PDF folder. Filename is `newfile`."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".. Test case: `label 1 f/^@#\u0026` +"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Expected: Expected: Unsuccessful message shown in the UI. No file will be output in the PDF folder."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// end::labeltest[]"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 191,
      "melpulomas": 104,
      "JonathanLeeWH": 217,
      "-": 586,
      "flxffy": 184
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d MediTabs - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S2-T12-3/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "By: `Team T12-3`      Since: `Feb 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::introduction[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Welcome to the _MediTabs User Guide_! Over here, you can find step by step instructions on setting up MediTabs and learn ways to take advantage of the features provided to optimise your clinic\u0027s inventory management. Interested? You can jump to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d What is MediTabs?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "MediTabs is a desktop application for managing medicine stock taking. Managing medicine can be time consuming and frustrating due to the overwhelming number of medicines in the market. Thus, MediTabs was created to provide pharmacist with a straightforward and efficient way to keep track of and maintain their inventory."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "With MediTabs, medicine data is organized in a format that helps you quickly locate the information you need. MediTabs also sieves out and provides you with critical information such as which medicines are low in stock, expiring soon or have expired so that you can ensure your inventory is well maintained. Functionality to help you with tasks which require medicine data such as medicine labelling and inventory analysis is also provided, making MediTabs the only application you need for all things inventory related."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "MediTabs supports Windows, Linux and macOS operating systems."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d Who is it for?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "If you are looking for a medicine stock taking application for clinics, MediTabs is the product for you. Whether you are an owner of a clinic or a pharmacist in charge of your clinic\u0027s medicine inventory, you can use MediTabs to help improve your workflow. It is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, MediTabs can get your medicine stock taking done faster than traditional GUI apps."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::introduction[]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".  Ensure you have Java version `9` installed on your computer."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".  Download the latest version of `meditabs.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".  Copy the `meditabs.jar` file to the folder you want to use as the home folder for your MediTabs application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".MediTabs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "This program requires a minimum resolution of 1200*810. Best viewed in full screen."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".  Type a command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *`list`* : lists all medicines in the inventory"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *`add`* `n/Paracetamol c/3M Pharmaceuticals` : adds a new medicine named `Paracetamol` to the inventory with the manufacturing company `3M Pharmaceuticals`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *`delete`* `3` : deletes the 3rd entry shown in the current list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *`exit`* : exits the application"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".  You can refer to \u003c\u003cCommands\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".  Having trouble setting up MediTabs? You can refer to the \u003c\u003cFrequently Asked Questions (FAQ)\u003e\u003e for solutions to common problems you might encounter. Do you require further assistance? If so, you can also post your queries link:{repoURL}/issues[here] and our team will do our best to assist you."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::applicationinterface[]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d Application Interface"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "image::UserGuide_ApplicationInterface.png[width\u003d\"1000\"]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*Command Box*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* Type commands into the command box and press kbd:[Enter] to execute them."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* You may refer to \u003c\u003cCommands Summary\u003e\u003e for a list of all possible commands."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*Result Display*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* The result from executing the command will be displayed in the Result Display."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* If commands are entered incorrectly, error messages will be shown here."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*Medicine List*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* Medicine list provides a list view of the inventory."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* The list may contain all medicine in the inventory, or a filtered view if the `find` command was executed."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* The list is sorted lexicographically by medicine name, insensitive to casing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*Information Panel*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* You can select a medicine from the medicine list by using the `select` command. e.g. `select 1` selects the first medicine in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* After selecting a medicine, information about the medicine will be displayed in the information panel."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// tag::uiwarningpanel[]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "*Warning Panel*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* The warning panel displays a list of medicines running low on stock and a list of expiring/expired medicine batches."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* Warnings will be logged in the warnings panel until changes are made to medicines and/or batches displayed, or to the thresholds controlling what is displayed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* Image below shows the labelled components of the warning panel:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".Labelled warning panel"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "image::WarningPanelLabeled.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// end::uiwarningpanel[]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": "As an inventory management application, MediTabs supports basic functionalities (add, edit, delete, list). On top of these basic functions, MediTabs also boasts several features tailored to your needs. These features aim to streamline your inventory management process, thereby enhancing your user experience."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::informationpanelfeature[]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Information Panel"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".Information panel"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "image::UserGuide_InformationPanel.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Having a way to keep track of individual batches of medicine makes medicine management more efficient as problematic batches can easily be located and removed. However, with so many different batches of the same medicine, you need an effective way to organize them or it could get confusing."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "The information panel provides all the details and information you need about each batch of medicine in a neat and organized manner."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "You can easily refer to the batch table provided in the information panel while updating and managing your inventory. Simply select a medicine using the `select` command to view all its relevant details. You may refer to \u003c\u003cSelectCommand\u003e\u003e for more details."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "You can also sort the table by any of its columns with the `sort` command to suit your needs and preference. You may refer to \u003c\u003cSortCommand\u003e\u003e for more details."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// end::informationpanelfeature[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// tag::warningpanelfeature[]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d Warning Panel"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".Warning panel"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "flxffy"
        },
        "content": "image::UserGuide_WarningPanel.png[width\u003d\"180\"]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "flxffy"
        },
        "content": "The warning panel provides an overview of pressing issues that have to be taken care of. With a quick glance, you will be able to identify expiring or expired batches of medicine, and medicines running low in stock."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "flxffy"
        },
        "content": "On top of that, the warning panel features flexible thresholds that can be changed according your needs and preferences with a simple command, adding to your user experience."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// end::warningpanelfeature[]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "flxffy"
        },
        "content": "You can learn about related commands related in \u003c\u003cWarningPanel\u003e\u003e."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::exportingascsvfileformat[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d\u003d Exporting as CSV file format"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "You can export the current medicine inventory data shown in the GUI as Comma-separated values (CSV) file format which is supported by many commonly used spreadsheet applications such as Microsoft Excel (Windows), LibreOffice (Linux) or Numbers (macOS)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*Motivation* +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "This feature is especially useful if you want to save the current medicine inventory data shown in the GUI in a file so that it can be printed later or if you want to organise the medicine inventory data using a spreadsheet application for you, your superior or your supplier\u0027s reference."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "In addition, you can even use the spreadsheet application to convert the CSV file to Microsoft Excel format and use all the functionalities provided by Microsoft Excel such as drawing graphs or chart to display the overview of your clinic\u0027s medicine inventory."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "You can use the `export` command to take advantage of this feature. You can learn more about how to use the `export` command \u003c\u003cExportCommand, here\u003e\u003e."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::exportingascsvfileformat[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d Coming in v2.0"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Our team is constantly working to improve your user experience. Here are some features to look forward to in our next release."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d Suggested medicine names"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "flxffy"
        },
        "content": "When typing fields that include medicine name, a list of suggested medicine names will appear after you input the first letter. +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Press the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows to select from the generated list of suggestions."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::inventoryforecasting[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d\u003d Inventory Forecasting"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "MediTabs will store information about your monthly stock level and predict the optimal amount of stock needed for the future. It will be possible to forecast inventory needs up to 3 months in advance with no extra effort from you as all analysis and calculations will take place with data already provided by routine use of MediTabs."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "It will also be possible to import past inventory data to increase accuracy of forecasting immediately without having to wait for the application to collect data."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Importing or allowing MediTabs to collect data for 6 months or more will produce a more accurate forecast."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// end::inventoryforecasting[]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::integrationaddon[]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d Integration Addon Support"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "flxffy"
        },
        "content": "You can download and install integration addons created for MediTabs such as addons which allows MediTabs to integrate with different third party services which your clinic might currently be using. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Format: `install an/NAME_OF_ADDON`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Only integration addons that have been verified by our team can be downloaded and installed in MediTabs. This is to ensure that the addons are secure and have no malicious code due to the increasing cybersecurity threat."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Benefits of integration addon support are as follows:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* Provides greater flexibility as as you might choose to integrate with different third-party services which are currently used by your clinic, to allow for easier transition between services."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* Allows you to customise MediTabs with features that your clinic requires without any unnecessary features which might not be relevant to your clinic\u0027s workflow."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "flxffy"
        },
        "content": "An example of an integration addon which would be supported by MediTabs:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* Singapore\u0027s Health Sciences Authority (HSA) - To integrate the Singapore HSA\u0027s medical database with MediTabs which allows easy retrieval of important information such as when medicine is requested to be recalled by the HSA."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "This feature can be improved to support medical databases of different countries."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::integrationaddon[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d Encrypting data files"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Due to the nature of medical inventories, the integrity of data stored is of utmost importance. The next release will feature data encryption to keep your inventory safe and keep unauthorised users away. With this feature, you will be required to log in with a password to view and edit your inventory. This feature can be disabled if it is not required for your needs."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// tag::previewresults[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d Preview of results"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Preview of results for Export and Label Commands to be available in the UI."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Current implementation: You may have to manually search for the external files created in their respective folders. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* In v2.0, a snapshot of the resulting files will be previewed under the UI for easier reference. This further streamline the inventory management and improve your usability."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Below is a mock up on how the UI may look like with the features integrated."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::MockUp.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// end::previewresults[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// tag::importpictures[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d\u003d\u003d Importing pictures"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Import of pictures to aid in the medicine identification."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Pictures and snapshot of the medicine may be added to MediTabs such that it is easier for you to identify what the physical medicine looks like."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// end::importpictures[]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[[Commands]]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Paracetamol`."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/Paracetamol t/fever` or as `n/Paracetamol`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]…` can be used as `{nbsp}` (i.e. 0 times), `t/fever, t/painkiller t/inflammation` etc.."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME c/COMPANY_NAME`, `c/COMPANY_NAME n/NAME` is also acceptable."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `INDEX` refers to the index number shown in the displayed medicine list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* If only one input is required but more than one valid input is entered, only the last input will be registered e.g. `n/Paracetamol n/Ibuprofen`, only `Ibuprofen` is registered."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Adding a new medicine : `add`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Adds a new medicine to the inventory. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Format: `add n/NAME c/COMPANY_NAME [t/TAG]…​`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Medicines already in the inventory cannot be added again. A duplicate medicine is one with the same name and same manufacturing company."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `add n/Paracetamol c/3M Pharmaceuticals`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `add n/Ibuprofen c/Takeda Pharmaceutical Co. t/fever`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Listing all medicines : `list`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Shows a list of all medicine in the inventory. +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* The details of the medicine shown in the list include: name, company, total quantity, next expiry date and tags."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Locating medicines : `find`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Finds medicine whose details contain any of the given keywords and displays them in the list. +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Format: `find PREFIX KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".Possible prefixes:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `n/` : name of medicine is searched."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `c/`: company name of medicine is searched."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `t/` : tags of medicine are searched."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `b/` : batch number of batches of medicine are searched."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "{nbsp}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Only the category indicated by the entered prefix will be searched. You can only enter one prefix at a time. Prefix must be entered before keywords."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* The search is case insensitive. e.g `sodium` will match `Sodium`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* The order of the keywords does not matter. e.g. `Sodium Levothyroxine` will match `Levothyroxine Sodium`."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Only full words will be matched e.g. `Sod` will not match `Sodium`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Medicines matching at least one keyword will be returned (i.e. `OR` search). e.g. `Sodium Ibuprofen` will return `Levothyroxine Sodium` and `Ibuprofen`."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find n/ Sodium` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "`Levothyroxine Sodium` and `Naproxen Sodium` are displayed in the list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find c/ 3M Johnson Pharmaceutical` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "All medicines from companies with names containing `3M`, `Johnson` or `Pharmaceutical` such as `3M Pharmaceuticals` are displayed in the list."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find t/ fever` +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "All medicines with tag `fever` are displayed in the list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find b/ NDC` +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "All medicines with batches with batch number containing `NDC` such as `NDC 0777-3105-02` are displayed in the list."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Editing a medicine : `edit`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Edits an existing medicine in the inventory. +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Format: `edit INDEX [n/NAME] [c/COMPANY_NAME] [t/TAG]...`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Edits the medicine at the specified INDEX."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "`edit 2 n/Prednisone c/Johnson \u0026 Johnson` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Edits the name of the 2nd medicine in the list to be `Prednisone` and company to be `Johnson \u0026 Johnson`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find n/ Prednisone` +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "`edit 1 t/` +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Remove tags from the 1st medicine in the results of the `find` command."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Deleting a medicine : `delete`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Deletes the specified medicine from the inventory. +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Deletes the 2nd medicine in the list."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find n/ Gabapentin` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Deletes the 1st medicine in the results of the `find` command."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::select[]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "[[SelectCommand]]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Viewing medicine information page : `select`"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Selects a medicine and loads the information page of the medicine. +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Loads the information page of the medicine at the specified `INDEX` in the information panel."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* The information page consists of a table with details of all batches of the selected medicine."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* These details include: batch number, quantity and expiry date."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* The total quantity and next expiry date of the medicine is also displayed at the bottom of the table."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".An example of the information page loaded when Aspirin is selected"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "image::UserGuide_SelectCommand.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Selects the 2nd medicine in the inventory and loads its information page."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find n/ Gabapentin` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Selects the 1st medicine in the results of the `find` command and loads its information page."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// end::select[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::sort[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "[[SortCommand]]"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Sorting the batch table : `sort`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Sorts the batch table in the medicine information page based on the entered property and direction +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Format: `sort p/PROPERTY d/DIRECTION`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".Possible properties:"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `batchnumber` : sorts the table by batch number (lexicographically)."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `expiry`: sorts the table by expiry date."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `quantity` : sorts the table by quantity."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".Possible directions:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `ascending`: sorts the table in ascending order."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `descending` : sorts the table in descending order."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `sort p/expiry d/descending` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "The table is sorted starting from the batch with the furthest expiry date."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `sort p/quantity d/ascending` +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "The table is sorted starting from the batch with the lowest quantity."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// end::sort[]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "// tag::update[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Updating batch records : `update`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Updates batch details of a medicine. +"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Format: `update INDEX b/BATCH_NUMBER [q/QUANTITY] [e/EXPIRY_DATE]`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Updates details of a batch in the batch records of the medicine at specified `INDEX`."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* If the entered batch number does not already exist in the record, a new batch record is created. Both quantity and expiry date must be entered for new batches."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* If the batch number already exists, the quantity or expiry date of the batch is replaced with the new information entered."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* If quantity of a batch is updated to `0`, it will be removed."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* The total quantity and next expiry date of the medicine will also be updated."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Note that in order to prevent confusion, you cannot set expiry date to a passed date. You also cannot add a new batch with 0 quantity."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "`update 2 b/NDC 0777-3105-02 q/30 e/11/2/2020` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Updates quantity and expiry date of batch `NDC 0777-3105-02` in the batch records of the 2nd medicine in the list to `30` and `11/2/2020`. A new record is created if batch `NDC 0777-3105-02` did not already exist."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find n/ Gabapentin` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "`update 1 b/GKP1684 q/50` +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Updates quantity of batch `GKP1684` in the batch records of the 1st medicine in the results of the `find` command to `50`. An error message is shown if batch `GKP1684` did not already exist."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "`update 1 b/HK85412 q/0` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Removes batch `HK85412` from the batch records of the 1st medicine in the list. An error message is shown if batch `HK85412` did not already exist."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "//end::update[]"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// tag::warningpanelcommand[]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[[WarningPanel]]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d Managing the warning panel : `warning`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Manage the threshold for expiry date and low stock warnings to alter the contents of the warning panel."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Format: `warning [e/EXPIRY_THRESHOLD] [q/LOW_STOCK_THRESHOLD] [SHOW]` +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Provide *only one* of the optional fields available. +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "flxffy"
        },
        "content": "If the thresholds are not set, the default threshold for expiry will be 10 days, and 20 for low stock. +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Thresholds set by the user are saved and will be used when the application is launched again."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "flxffy"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "All thresholds must be positive integers."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* `EXPIRY_THRESHOLD` should be number of days before expiry date."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* `LOW_STOCK_THRESHOLD` should be in number of stock remaining."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* `SHOW` is case insensitive."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* `warning e/30` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Medicine batches that have expired or with expiry dates within 30 days to expiry from today will be displayed in the warning panel."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* `warning q/10` +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "flxffy"
        },
        "content": "Medicines with a total quantity of less than or equal to 10 will be displayed in the warning panel."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* `warning show` +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Current thresholds used for the warning panel will be shown in the result display."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "flxffy"
        },
        "content": "// end::warningpanelcommand[]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::exportcommand[]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[[ExportCommand]]"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Exporting as CSV file format : `export`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Exports the current medicine inventory data shown in the GUI as CSV file format. +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Format: `export [FILE_NAME]`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* The `FILE_NAME` field is optional. You can refer to \u003c\u003cAppendix A: File Naming Convention\u003e\u003e for supported file name format if you want to specify a file name for the exported CSV file."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* If no file name is specified, the `export` command uses the default file name format according to the date and time of export."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* The specific date and time format used if no file name is specified is `dd_MMM_yyyy_HH_mm_ss` e.g. `18_Mar_2019_10_28_00`"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* The file extension for a CSV file is `.csv`"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* The exported file can be found in the default `exported` folder which can be found in the home folder used for your MediTabs application."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* If the default `exported` folder is not found in the home folder, MediTabs will automatically create the folder when the `export` command is executed."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Medicines without any batches are *not included* in the exported CSV file as they would not have any useful information such as the quantity and expiry dates which are important in the keeping track of your medicine inventory. This is by design, as our team believes that the exported CSV file should only provide *useful detailed information*."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `export` +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Exports the current medicine inventory data shown in the GUI to a CSV file which has a default file name format `{Date of export}_{Time of export}`. e.g. `18_Mar_2019_10_28_00`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* `export example` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Exports the current medicine inventory data shown in the GUI to a CSV file which has the filename `example`."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "If a file with the specified file name already exists in the default `exported` folder, the file would not be exported and an error message `\"Could not export data to csv file: {Specified File Name} already exists in \"exported\" directory\"`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "A sample image of how the medicine inventory data in the exported CSV file is organised:"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".Sample of the exported CSV file"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "image::SampleCSVFileImage.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "From the image above, you can observe that the exported CSV file only contains essential information such as the medicine batches, quantity and expiry date for each batch of medicine and which medicines are low in stock, expiring soon or have expired for easier reference."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::exportcommand[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// tag::labelcommand[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Printing labels : `label`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- You can label any specific medicine information in the inventory through the Portable Document Format (PDF). +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Open the PDF file under the PDF folder to view and print your selected medicine. +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- Label will include name of medicine and standard label template. +"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "This includes the company that manufactured it, expiry date and the tags that was set with it. +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- Your format for using the command should follow: `label INDEX [f/FILE_NAME]`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- File name is optional."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* Outputs the label for the medicine at the specified INDEX."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* If no file name is specified, the default file name is `to_print`."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* The index refers to the index number shown in the displayed medicine list."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "****"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "All PDF files can be found under the PDF folder"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::folderPDF.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Fig 5.12.1 PDF folder highlighted"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".  Open up the software interface. (Fig 5.12.2)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Fig 5.12.2 Software interface"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ". Key in  `list` followed by +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "`label 1`. +"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "This selects the 1st medicine in the inventory and output the information to a default PDF file named `to_print`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- A confirmation message will be shown to indicate to you that it have been successfully labeled."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::ConfirmationMessage.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".  You can open the file in the PDF folder (Fig 5.12.1) with your preferred PDF reader to print the medicine information."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "A example below of how the label information will look like (Fig 5.12.2)"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::label1.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Fig 5.12.2 Medicine information"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ".  If you want to name the output file, follow the steps below:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* `find n/ Simvastatin` +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "`label 1 f/Simvastatin` +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Similar to the example above, the 1st medicine information will be output to a file name `Simvastatin`. (Fig 5.12.3)"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "image::label2.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Fig 5.12.3 Simvastatin medicine information"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "+"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "The `label` command will overwrite the `to_print` file when filename is not specified. Do print the required file first before using the `label` command again."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "- Please follow Appendix A for naming conventions."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "// end::labelcommand[]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Restores the inventory to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Undoable commands: those commands that modify the inventry\u0027s content (`add`, `delete`, `edit`, `update` and `clear`)."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Clears all entries from the inventory. +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Inventory data is saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::FAQ[]"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Frequently Asked Questions (FAQ)"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*Q*: Where can I find Java version `9`? +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*A*: You can download Java version `9` link:https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase9-3934878.html[here]. We recommend installing Java SE Development Kit `9.0.4` on your computer."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*Q*: (Windows Only) I followed the instructions in \u003c\u003cQuick Start\u003e\u003e but the GUI did not appear? +"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*A*: This is a commonly known issue with JDK on Windows. You can learn more about the issue here: link:https://bugs.java.com/bugdatabase/view_bug.do?bug_id\u003d4912211[Link]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "We recommend following the steps below to solve this issue:"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".   Ensure that you *only* have Java version `9` installed on your computer. Uninstall any other versions of Java which might be present on your computer."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".   Download the latest version of `jarfix.exe` link:https://johann.loefflmann.net/en/software/jarfix/[here]."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ".   Double-click the file to allow the program to fix this issue."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "If you encounter any problems running `jarfix.exe`, you can read the documentation available on the link:https://johann.loefflmann.net/en/software/jarfix/[website] for more detailed instructions on how to run the program on your computer."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::FAQ[]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous MediTabs folder."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d Commands Summary"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Add* `add n/NAME c/COMPANY_NAME [t/TAG]...` +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "e.g. `add n/Paracetamol c/3M Pharmaceuticals t/fever`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [c/COMPANY_NAME] [t/TAG]...` +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "e.g. `edit 2 n/Amoxicillin c/GlaxoSmithKline t/antibiotic`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Export* : `export [FILE_NAME]` +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "e.g. export Records"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Find* : `find PREFIX KEYWORD [MORE_KEYWORDS]...` +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "e.g. `find n/ paracetamol`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* *Label* : `label INDEX` +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "e.g. `label 1`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Sort* : `sort p/PROPERTY d/DIRECTION` +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "e.g.`sort p/quantity d/ascending`"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Update* : `update INDEX b/BATCH_NUMBER [q/QUANTITY] [e/EXPIRY_DATE]` +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "e.g.`update 2 b/A030F21 q/1000 e/25/1/2020`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* *Warning* : `warning [e/EXPIRY_THRESHOLD] [s/LOW_STOCK_THRESHOLD] [SHOW]` +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "flxffy"
        },
        "content": "e.g. `warning e/20`, `warning s/10`, `warning show`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d Terminology"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* *List:* This refers to the currently displayed list (possibly filtered)."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* *Inventory:* This refers to the storage containing all medicines that have been added. Display all medicines in the inventory by using the `list` command."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Batch:* This refers to a group of medicine with the same name, medical properties and manufacturing date. There may be more than one batch of medicine with the same name, but they will have different batch numbers and manufacturing dates. View all batches of a medicine by using the `select` command."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// tag::filenamingconvention[]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Appendix A: File Naming Convention"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "MediTabs uses the following file naming convention when file name field is used e.g. The `export` command\u0027s optional `[FILE_NAME]` field. The file naming convention is to ensure consistency and to avoid potential bugs involving file names with different operating systems such as Windows, Linux and macOS +"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Format: `Start with an alphabet or number followed by alphabets, numbers, underscore or hyphen`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "File name *does not* include file extension such as `.csv` and `.pdf`. You do not have to include file extension when specifying the file name field such as in `export [FILE_NAME]`. MediTabs will handle the file name extension for you."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Examples of correct and incorrect file names:"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|Correct |Incorrect"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|`myMedicalData`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|`_myMedicalData`"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|`my_Medical_Data`"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|`my Medical Data`"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|`myMedicalData1`"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|`myMedicalData.txt`"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|`1myMedicalData`"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|`-MyMedicalData`"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "You must follow the file naming convention format when specifying the file name field for any commands that support file name as a field."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "[CAUTION]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The characters of the file name cannot contain any spacing or symbols, including but not limited to, `\\/:*?\"\u003c\u003e|.+[]{};!@#$%^\u0026~`` Reserved names, indicated in Windows documentation, are also *not allowed* to be used as file names such as `COM1` and `LPT8`. The reserved names are *case insensitive* for example, `com1` or `CoM1` are also reserved names. You can read more about file naming conventions in Windows link:https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#naming-conventions[here]."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "// end::filenamingconvention[]"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 252,
      "melpulomas": 64,
      "JonathanLeeWH": 117,
      "-": 174,
      "flxffy": 99
    }
  },
  {
    "path": "docs/stylesheets/gh-pages.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "@import url(https://fonts.googleapis.com/css?family\u003dLato|Open+Sans);"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "@import \"asciidoctor.css\"; /* Default asciidoc style framework - important */"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/* Custom block: details */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    border-left: .25rem solid rgba(0, 0, 0, 0.1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details \u003e .content {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: .5rem"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock.details {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: transparent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    border: none;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-bottom: 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-top: 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/* Overrides for asciidoctor.css */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "a {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    color: #313131;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "a:hover {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    color: crimson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "h1,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "#content h1 \u003e a.link,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "h2,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "h2 \u003e a.link,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "h3,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "h3 \u003e a.link,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "#toctitle \u003e a.link,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".sidebarblock \u003e .content \u003e .title \u003e a.link,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "h4,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "h4 \u003e a.link,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "h5,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "h5 \u003e a.link,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "h6,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "h6 \u003e a.link {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    color: #E76D76;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".subheader,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".admonitionblock td.content \u003e .title,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".audioblock \u003e .title,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".exampleblock \u003e .title,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".imageblock \u003e .title,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".listingblock \u003e .title,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".literalblock \u003e .title,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ".stemblock \u003e .title,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".openblock \u003e .title,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".paragraph \u003e.title,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".quoteblock \u003e .title,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "table.tableblock \u003e .title,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".verseblock \u003e .title,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".videoblock \u003e .title,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".dlist \u003e .title,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".olist \u003e .title,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ".ulist \u003e .title,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".qlist \u003e .title,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".hdlist \u003e .title {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    color: #cf5961;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "@media screen {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        background-color: #f6f6f6;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        border-top: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    #footer-text {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        color: #595959;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        line-height: 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "  a[href]:after {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    content: none !important;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "  }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "/* Utilities */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".container {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    width: 100%;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    max-width: 62.5rem;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-left: auto;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: auto;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "/* Colors */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-light {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #f8f9fa;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".bg-lighter {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #fbfbfb;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "/* Navbar */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: nowrap;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    font-family: \"Open Sans\", \"DejaVu Sans\", sans-serif;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1rem;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px 1rem;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.3rem;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 1px #d2d2d2 solid;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    text-decoration: none;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #595959;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:hover,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a:focus {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:hover,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar a.active:focus {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    font-weight: bold;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:hover,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light a.active:focus {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    color: #000000;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 2px transparent solid;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-light .nav-link.active {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    border-bottom: 2px #cf5961 solid;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .nav-link.active {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    border-bottom: 0;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar \u003e .container {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    justify-content: center;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    display: inline-block;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    margin-right: 1rem;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0.8125rem 0rem;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    padding-left: 0.9375rem;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.25rem;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-brand img {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 1.4rem;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0rem 0.4rem;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    vertical-align: middle;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    font-size: 1.7rem;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-lg .navbar-brand img {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    height: 2.3rem;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".navbar-nav {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    display: flex;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-wrap: wrap;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    flex-grow: 1;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    align-items: center;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 0px;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    list-style: none;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    line-height: inherit;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".nav-link {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    display: block;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    margin: 0px;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    border: 0px;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    padding: 1rem 1rem;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "/* Do not display site header on print mediums */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "@media print {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    #seedu-header {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    #site-header {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        display: none;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 6,
      "-": 209,
      "flxffy": 9
    }
  },
  {
    "path": "docs/team/flxffy.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d Ong Ai Hui - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d PROJECT: MediTabs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "This project portfolio will give you an overview of the documentation, code and ideas I contributed to my team\u0027s project, MediTabs, as the team\u0027s front-end designer. This project was completed as part of an introductory software engineering module in the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d Project Overview"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "MediTabs is a desktop application built with the goal to streamline inventory management in a clinic for pharmacists. As part of the project\u0027s requirements, MediTabs targets users with a preference for command line interactions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "To achieve this goal, we implemented several key features: a warning panel to view urgent issues, an information panel to display medicine information, and data exportation for data analysis."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "For this project, I was in-charge of implementing the warning panel and its related commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "This section highlights noteworthy contributions I made to the project\u0027s documentation and source code."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* *Major enhancement*: Added a warning panel and related `warning` commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".MediTabs main interface with the warning panel boxed in red"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "image::PPP_Ui_WarningPanel.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** What it does: The warning panel gives users an overview of what medicine batches are expiring/expired and what medicines are low in stock. Thresholds used to determine what is expiring and what is low in stock can be set by the user with simple commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Justification: Simplifies the process of sieving through an inventory to find expiring/expired medicine batches that need to be disposed of, and medicines that require replenishing. User-defined thresholds add to the user experience."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Highlights: This enhancement required an understanding of all major components to render and populate a column in the application\u0027s main interface with the correct lists of items, and to implement complementing commands to change its contents."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *Minor enhancement*: Changed the implementation of Expiry class so that it uses an updated library, (https://docs.oracle.com/javase/9/docs/api/java/util/Date.html[`java.time.LocalDate`]), instead of the deprecated (https://docs.oracle.com/javase/9/docs/api/java/util/Date.html[`java.util.Date`])."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#search\u003dflxffy\u0026sort\u003ddisplayName\u0026since\u003d2019-02-10\u0026until\u003d2019-04-14\u0026timeframe\u003dday\u0026reverse\u003dfalse\u0026repoSort\u003dtrue[Project Code Dashboard]]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Source code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "*** Changed the application\u0027s colour scheme for a sleeker look: https://github.com/CS2103-AY1819S2-T12-3/main/pull/134[#134]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "*** Wrote additional tests for existing features to increase test coverage from 88% to 92%: https://github.com/CS2103-AY1819S2-T12-3/main/pull/139[#139], https://github.com/CS2103-AY1819S2-T12-3/main/pull/188[#188]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Documentation"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "*** Restructured existing contents of the User Guide: https://github.com/CS2103-AY1819S2-T12-3/main/pull/151[#151]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "** Community"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "*** Pull requests reviewed with suggestions to implementation style: https://github.com/CS2103-AY1819S2-T12-3/main/pull/77[#77], https://github.com/CS2103-AY1819S2-T12-3/main/pull/131[#131]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "The following sections are my contributions to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "include::../UserGuide.adoc[tag\u003duiwarningpanel]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "include::../UserGuide.adoc[tag\u003dwarningpanelcommand]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "The following sections are my contributions to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dwarningpanel]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dwarningtest]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 3,
      "flxffy": 64
    }
  },
  {
    "path": "docs/team/jonathanleewh.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d LEE WEI HAO JONATHAN - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "Welcome to my Project Portfolio which provides you with an overview of my technical skills in the writing of documentation, coding and other contributions to my team project, *MediTabs*, for a Software Engineering module in the National University of Singapore (NUS)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d About the project"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "The team project involved improving an existing link:https://github.com/nus-cs2103-AY1819S2/addressbook-level4/[Addressbook application] for users who prefer command line interfaces (CLI). My team and I chose to morph it into a medicine inventory management application called *MediTabs*. The goal is to streamline the medicine inventory management workflow in clinics by enabling pharmacists to keep track and manage medicine inventory easily; export the data for easier reference and data analysis; and print medicine labels containing essential medicine information."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "I am the team leader and in charge of designing and implementing the `export` feature."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "This document uses the following labels and formatting:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|Label/Formatting |Description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "a|`Text`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|Indicates command, format or code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "a|NOTE: {sp}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|Information to take note."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "a|IMPORTANT: {sp}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|Important information."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "a|WARNING: {sp}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|Indicates potential error message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "This section highlights my documentation, coding and other noteworthy contributions to my team project."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *Major enhancement: Added `export` command support*"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** What it does: Allows the user to export the current medicine inventory data shown in the Graphical User Interface (GUI) to a spreadsheet file which is supported by commonly used spreadsheet applications such as Microsoft Excel."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Justification: Allows the user to save the data so that it can be printed, organised or for advanced data analysis using a spreadsheet application such as Microsoft Excel. This is especially useful for the user, superior or supplier\u0027s reference."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Highlights: This enhancement requires an indepth understanding of how each major components work and the methods available as it involves retrieving of data from the GUI and parsing the retrieved data. Despite using the Opencsv library, the implementation was still challenging as it required using methods from different components, parsing and organising the data such that the exported file contains only the essential information for easier reference."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Credits: link:http://opencsv.sourceforge.net/team.html[Opencsv Team]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *Minor enhancement*: As there are currently no third party libraries available which validate file name such that it adheres to the file naming conventions of the major operating systems (OS), Windows, Linux and macOS, I have created a `FileName` class which implements this feature to complement the `export` feature and is also used by the `label` feature. It requires an indepth knowledge of the different file naming conventions used in the various OS and also numerous testing as I discovered that some file name conventions were not documented and not allowed to be used as file names."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003djonathanleewh[Project Code Dashboard]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Set up team project GitHub repository including setting up the issue tracker, permissions, project page, milestones and labels."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Managed releases `v1.1` - `v1.4` (9 releases) on GitHub"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Added Introduction sections to both User Guide and Developer Guide: https://github.com/CS2103-AY1819S2-T12-3/main/pull/115[#115], https://github.com/CS2103-AY1819S2-T12-3/main/pull/140[#140]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Added Frequently Asked Question (FAQ) and File Naming Convention sections to User Guide: https://github.com/CS2103-AY1819S2-T12-3/main/pull/123[#123], https://github.com/CS2103-AY1819S2-T12-3/main/pull/135[#135]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Added Validation of File Name section to Developer Guide which includes code snippet for reference on how to take advantage of the `FileName` class provided: https://github.com/CS2103-AY1819S2-T12-3/main/pull/140[#140]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Updated stylesheet to Portable Document Format (PDF) printer friendly format: https://github.com/CS2103-AY1819S2-T12-3/main/pull/150[#150]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Updated User Guide\u0027s Quick Start section and Developer Guide\u0027s Setting Up section to only allow Java version `9` and JDK `9` including references to the reason for the change: https://github.com/CS2103-AY1819S2-T12-3/main/pull/117[#117], https://github.com/CS2103-AY1819S2-T12-3/main/pull/123[#123]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Updated User Guide Quick Start section with an additional step on how users can seek assistance: https://github.com/CS2103-AY1819S2-T12-3/main/pull/115[#115]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Updated Storage component class diagram of Developer Guide to match our project: https://github.com/CS2103-AY1819S2-T12-3/main/pull/79[#79]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Updated Developer Guide\u0027s Instructions for Manual Testing section to include instructions for testing the `export` command: https://github.com/CS2103-AY1819S2-T12-3/main/pull/197[#197]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-T12-3/main/pull/24[#24], https://github.com/CS2103-AY1819S2-T12-3/main/pull/27[#27], https://github.com/CS2103-AY1819S2-T12-3/main/pull/40[#40], https://github.com/CS2103-AY1819S2-T12-3/main/pull/42[#42]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com/nus-cs2103-AY1819S2/forum/issues/6[1], https://github.com/nus-cs2103-AY1819S2/forum/issues/9[2], https://github.com/nus-cs2103-AY1819S2/forum/issues/11[3])"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (example: https://github.com/nus-cs2103-AY1819S2/addressbook-level4/pull/6#issuecomment-475968922[1], https://github.com/nus-cs2103-AY1819S2/forum/issues/73[2])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Integrated third party libraries (Opencsv and Apache Commons) to the project: https://github.com/CS2103-AY1819S2-T12-3/main/pull/57[#57], https://github.com/CS2103-AY1819S2-T12-3/main/pull/122[#122]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "*** Integrated GitHub plugins (Travis, Appveyor, Coveralls and Netlify) to the team repository: https://github.com/CS2103-AY1819S2-T12-3/main/pull/6[#6]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "To showcase my ability to write documentation which targets end users, my contributions to the User Guide are shown below."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "---"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "include::../UserGuide.adoc[tag\u003dexportcommand]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintegrationaddon]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "To showcase my ability to write technical documentation which targets developers and my technical knowledge on my project contributions, my contributions to the Developer Guide are shown below."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "---"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dexportcommand]"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 85
    }
  },
  {
    "path": "docs/team/jtankw3.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d Tan Kian Wei Jason - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Welcome to my Project Portfolio. Here you can find out more about my contributions in various projects to help you better evaluate my technical and communication skills."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d PROJECT: MediTabs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Introduction"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "MediTabs is a desktop application for managing medicine stock taking. It was created to provide pharmacist with a straightforward and efficient way to keep track of and maintain their medicine inventory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "MediTabs is a brownfield project that initially started as an address book application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "It was developed in a team of 4 as part of a software engineering module which spanned a total of about 13 weeks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "In this project, I was in charge of implementing the information panel feature."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Major enhancement*: added the information panel and the `sort` and `update` commands used to manipulate information on the panel."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** What it does: allows users to add, edit and remove information of different batches of medicine. This information is displayed in a table format for easy reference in the information panel. The panel also collates the information and provides a summary of important details such as total quantity and next expiry date. The table can also be sorted by batch number, quantity or expiry date."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Justification: Organizing medicine by batch allows for quicker identification of problematic batches. With each medicine having multiple batches, a way to organize the information neatly to avoid confusion for the user is needed. The information panel provides a visual interface that is simple and well structured for users to refer to when updating their inventory."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Highlights: A large amount of planning was done to decide what information would be useful to the user. Implementation was challenging as it not only involved changing existing commands (`add` and `edit`) but also adding functionality to every component of the architecture, namely Logic, Storage, Model and UI."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Minor enhancement*: Enhanced the existing `find` command to be able to search other fields. (Pull requests: https://github.com/CS2103-AY1819S2-T12-3/main/pull/180[#180])"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003djtankw3[code]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*** Helped to manage issue tracker for the first few weeks before individual project boards were set up: (Issues: https://github.com/CS2103-AY1819S2-T12-3/main/issues/9[#9] https://github.com/CS2103-AY1819S2-T12-3/main/issues/2[#2] Project board: https://github.com/CS2103-AY1819S2-T12-3/main/projects/3[#3])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*** Did initial refactoring from address book to MediTabs (Pull request https://github.com/CS2103-AY1819S2-T12-3/main/pull/34[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*** UI enhancement - Moved tags to bottom of `MedicineCard` shown in the list to improve readability (Pull request https://github.com/CS2103-AY1819S2-T12-3/main/pull/193[#193])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "** Team contributions:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*** Reviewed team\u0027s pull requests (Notable reviews: https://github.com/CS2103-AY1819S2-T12-3/main/pull/25[#25] https://github.com/CS2103-AY1819S2-T12-3/main/pull/115[#115] https://github.com/CS2103-AY1819S2-T12-3/main/pull/191[#191])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "*** Helped edit ContactUs.adoc to reflect our team\u0027s information (Pull request https://github.com/CS2103-AY1819S2-T12-3/main/pull/31[#31])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../UserGuide.adoc[tag\u003dinformationpanelfeature]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../UserGuide.adoc[tag\u003dinventoryforecasting]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../UserGuide.adoc[tag\u003dselect]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsort]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../UserGuide.adoc[tag\u003dupdate]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003d\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmodelcomponentobjectdiagram]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dinformationpanel]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dupdatetesting]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "Click https://cs2103-ay1819s2-t12-3.github.io/main/DeveloperGuide.html#updating-batch-details-of-a-medicine[here] to see the remainder of the test cases."
      }
    ],
    "authorContributionMap": {
      "jtankw3": 63
    }
  },
  {
    "path": "docs/team/melpulomas.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d Melvin Vito - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d PROJECT: MediTabs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "This  Project Portfolio shows my contributions to the group project, such as features and documentation. I was in charge of the of the logic component, which mainly focus on the command features of the project. This project is under a core module of software engineering in the my school."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "The group project, Meditabs, is a medicine inventory management for pharmacist to streamline the process of handling the stick taking process. The user mainly uses the Command-Line Interface (CLI) to interact."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "Upon looking  at user case, we implemented a label function to allow the pharmacist to print out the medicine information. This is for easier management for the physical medicine itself."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* *Major enhancement*: Added the `Label` command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** What it does: Allows the user to output the information of the medicine onto a Portable Document Format (PDF)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Justification: Pharmacist would like to have the printed information of certain medicine and label the physical counterpart. With the PDF, the pharmacist may use external printers and print out the information on the label as a sticker. PDF is widely used as a file extension."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Highlights: Added security layer to the naming of the file (Auto include .pdf extension) such that users may not over write other important files. Also set a limit on the the length of filename."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Credits: Apache PDFBox external library is imported to help manipulate and output the stream of information to the PDF file. More information can be found under: https://pdfbox.apache.org/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* *Minor enhancement*: -"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* *Code contributed*: https://nus-cs2103-ay1819s2.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dmelpulomas[Project Code Dashboard]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage (Pull requests https://github.com/CS2103-AY1819S2-T12-3/main/pull/131[#131], https://github.com/CS2103-AY1819S2-T12-3/main/pull/142[#142])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "*** Refactor test cases: (Pull requests https://github.com/CS2103-AY1819S2-T12-3/main/pull/78[#78])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S2-T12-3/main/pull/103[#103], https://github.com/CS2103-AY1819S2-T12-3/main/pull/124[#124]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "*** Added label command to the User Guide: (Pull requests https://github.com/CS2103-AY1819S2-T12-3/main/pull/106[#106], https://github.com/CS2103-AY1819S2-T12-3/main/pull/191[#191])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "*** Added label command to the Developer Guide: (Pull requests https://github.com/CS2103-AY1819S2-T12-3/main/pull/106[#106], https://github.com/CS2103-AY1819S2-T12-3/main/pull/191[#191])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "*** Changed About Us documentation to describe our group: https://github.com/CS2103-AY1819S2-T12-3/main/pull/24[#24], https://github.com/CS2103-AY1819S2-T12-3/main/pull/27[#27]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "*** Integrated third party libraries (Apache PDFBox) to the project: https://github.com/CS2103-AY1819S2-T12-3/main/pull/40[#40]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "|Below are my contributions to the user guide to showcase my technical skills on user end documentation."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlabelcommand]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpreviewresults]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimportpictures]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "|Below are my contributions to the developer guide to showcase my technical skills on developer end documentation."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlabelcommand]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlabeltest]"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.storage.InventoryStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MediTabs ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        InventoryStorage inventoryStorage \u003d new JsonInventoryStorage(userPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        storage \u003d new StorageManager(inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s inventory and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The data from the sample inventory will be used instead if {@code storage}\u0027s inventory is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * or an empty inventory will be used instead if errors occur when reading {@code storage}\u0027s inventory."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e inventoryOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ReadOnlyInventory initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            inventoryOptional \u003d storage.readInventory();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (!inventoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample inventory\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            initialData \u003d inventoryOptional.orElseGet(SampleDataUtil::getSampleInventory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty inventory\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            initialData \u003d new Inventory();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty inventory\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            initialData \u003d new Inventory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty inventory\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        logger.info(\"Starting MediTabs \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping MediTabs ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 21,
      "JonathanLeeWH": 3,
      "-": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 700;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1000;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 71,
      "flxffy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/InformationPanelSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Settings to control sorting of BatchTable in Information Panel."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InformationPanelSettings {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final SortProperty DEFAULT_SORT_PROPERTY \u003d SortProperty.BATCHNUMBER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final SortDirection DEFAULT_SORT_DIRECTION \u003d SortDirection.ASCENDING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final SortProperty sortProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final SortDirection sortDirection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InformationPanelSettings() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sortProperty \u003d DEFAULT_SORT_PROPERTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sortDirection \u003d DEFAULT_SORT_DIRECTION;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InformationPanelSettings(SortProperty sortProperty, SortDirection sortDirection) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireAllNonNull(sortProperty, sortDirection);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.sortProperty \u003d sortProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.sortDirection \u003d sortDirection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public SortProperty getSortProperty() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return sortProperty;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public SortDirection getSortDirection() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return sortDirection;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof InformationPanelSettings // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 sortProperty.equals(((InformationPanelSettings) other).sortProperty)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 sortDirection.equals(((InformationPanelSettings) other).sortDirection));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sb.append(\"Sort Property: \u0027\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(sortProperty)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(\"\u0027 Sort Direction: \u0027\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(sortDirection)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(\"\u0027\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Represents the possible properties that the batch table can be sorted by."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public enum SortProperty {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        BATCHNUMBER, QUANTITY, EXPIRY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public static final String MESSAGE_CONSTRAINTS \u003d \"Sort property can only be batchnumber, quantity or expiry.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * Returns true if a given string is a valid sort property."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public static boolean isValidSortProperty(String sortProperty) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return sortProperty.equalsIgnoreCase(BATCHNUMBER.toString())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    || sortProperty.equalsIgnoreCase(QUANTITY.toString())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    || sortProperty.equalsIgnoreCase(EXPIRY.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Represents the possible direction that the batch table can be sorted in."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public enum SortDirection {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ASCENDING, DESCENDING;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public static final String MESSAGE_CONSTRAINTS \u003d \"Sort direction can only be ascending or descending.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * Returns true if a given string is a valid sort direction."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public static boolean isValidSortDirection(String sortDirection) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return sortDirection.equalsIgnoreCase(ASCENDING.toString())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    || sortDirection.equalsIgnoreCase(DESCENDING.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return super.toString().toLowerCase();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String LOG_FILE \u003d \"MediTabs.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String MESSAGE_COMMAND_EXCEED_LIMIT \u003d \"Input have exceeded the limit allowed.\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX \u003d \"The medicine index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final String MESSAGE_MEDICINES_LISTED_OVERVIEW \u003d \"%1$d medicine(s) listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final String MESSAGE_SHOW_CURRENT_THRESHOLDS \u003d \"Expiry threshold: %1$d day%2$s\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                                                                 + \"Low stock threshold: %3$d\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT_DETAILED \u003d \"Invalid command format! %1$s\\n%2$s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "melpulomas": 1,
      "JonathanLeeWH": 1,
      "-": 11,
      "flxffy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/WarningPanelSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningPanelSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final int DEFAULT_EXPIRY_THRESHOLD_VALUE \u003d 10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final int DEFAULT_LOW_STOCK_THRESHOLD_VALUE \u003d 20;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final int expiryThresholdValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final int lowStockThresholdValue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanelSettings() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        expiryThresholdValue \u003d DEFAULT_EXPIRY_THRESHOLD_VALUE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        lowStockThresholdValue \u003d DEFAULT_LOW_STOCK_THRESHOLD_VALUE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanelSettings(int expiryThresholdValue, int lowStockThresholdValue) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.expiryThresholdValue \u003d expiryThresholdValue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.lowStockThresholdValue \u003d lowStockThresholdValue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public int getExpiryThresholdValue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return expiryThresholdValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public int getLowStockThresholdValue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return lowStockThresholdValue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (!(other instanceof WarningPanelSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelSettings o \u003d (WarningPanelSettings) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return expiryThresholdValue \u003d\u003d o.expiryThresholdValue"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 lowStockThresholdValue \u003d\u003d o.lowStockThresholdValue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return Objects.hash(expiryThresholdValue, lowStockThresholdValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        sb.append(\"Expiry Threshold Value : \" + expiryThresholdValue + \"\\n\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        sb.append(\"Low Stock Threshold Value : \" + lowStockThresholdValue);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * Represents a File name (without the file extension) in MediTabs."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * Standardise the File Naming Convention in MediTabs and also to ensure the file name"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * specified (without the file extension) is valid. It does not check whether"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * the file name is too long (Windows has an issue with long file names and it also involves file systems:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * \u003ca href\u003d\"https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#short-vs-long-names\" target\u003d\"_blank\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " *     Link\u003c/a\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * We suggest complementing this class with Java build in class such as"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * {@link java.io.File File} or {@link java.nio.file.Files Files} and handling"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * the exceptions thrown by the methods used in those classes when creating files with the file name validated to"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * resolve potential exceptions involving permissions, security, file name being too long, etc."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * Note: In an effort to make it platform independent, the validation is such that it ensures that the specified"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * file name does not violate file naming conventions in any platform especially Windows which has a very strict"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * file name conventions:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * \u003ca href\u003d\"https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#naming-conventions\" target\u003d\"_blank\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " *     Link\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFileName(String)}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public class FileName {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            \"File Name (without including file extension) must start with an alphabet or number followed by \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    + \"alphabets, numbers, underscore or hyphen. It must not be a reserved word. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    + \"You can type the help command to view the User Guide for more details.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * The characters of the file name must not contain any whitespace"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * and does not contain certain symbols like \\/:*?\"\u003c\u003e|."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}_-]*\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Additional REGEX to check for reserved names which are not allowed as file names due to Windows"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * reserving these names as stated in the Windows documentation."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * This is to ensure that the file name validated by isValidFileName() method is platform independent."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * The Windows reserved names are as follows:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * CON, PRN, AUX, NUL, COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT0, LPT1, LPT2, LPT3, LPT4,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * LPT5, LPT6, LPT7, LPT8, and LPT9"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Note: COM0 and LPT0 is added in the REGEX and list above though not stated as reserved names in"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Windows documentation, however, based on personal manual testing on Windows 10, both names are also reserved"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * names and hence are also included and not allowed as file names."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String RESERVED_NAMES_REGEX \u003d \"CON|PRN|AUX|NUL|COM[0-9]|LPT[0-9]\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public final String fullFileName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Constructs a {@code FileName}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param fileName A valid file name (without the file extension)."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public FileName(String fileName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        checkArgument(isValidFileName(fileName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        fullFileName \u003d fileName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Returns true if a given string is a valid file name."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param fileNameToCheck The input file name to check (without the file extension)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static boolean isValidFileName(String fileNameToCheck) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        requireNonNull(fileNameToCheck);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (fileNameToCheck.isEmpty() || fileNameToCheck.toUpperCase().matches(RESERVED_NAMES_REGEX)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return fileNameToCheck.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return fullFileName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                || (other instanceof FileName // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                \u0026\u0026 fullFileName.equals(((FileName) other).fullFileName)); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return fullFileName.hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/csv/CsvWrapper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "package seedu.address.commons.util.csv;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.nio.file.FileAlreadyExistsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.nio.file.FileSystemException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import com.opencsv.CSVWriter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * A CsvWrapper class to complement the export command for MediTabs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * It uses Opencsv library from http://opencsv.sourceforge.net/index.html"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public class CsvWrapper {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not export data to csv file: \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String DEFAULT_EXPIRING_SOON_NOTIFICATION \u003d \"[EXPIRING SOON]\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String DEFAULT_EXPIRED_NOTIFICATION \u003d \"[EXPIRED]\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String DEFAULT_LOW_STOCK_NOTIFICATION \u003d \"[LOW STOCK]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // The reason for the limitation of maximum 255 characters for file name is due to the limitations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // set by Windows (MAX_PATH limitation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // in Windows https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // and also different file systems support up to different number of characters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // There is no universal way of solving this problem to"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // allow portability between different operating systems such as Windows, Linux and macOS due to this limitation,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // hence based on the comparison charts and most common length limitation shown in the comparison chart in"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // https://en.wikipedia.org/wiki/Filename#Comparison_of_filename_limitations, the MAX_FILE_NAME_LENGTH is"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // set to 255 though it might not be a method to solve portability of file name length completely but it is"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    // a general agreed limit by programmers when programming to set the file name to 255 characters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final int MAX_FILE_NAME_LENGTH \u003d 255;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private static String[] defaultHeading \u003d {\"Name\", \"Batch Number\", \"Quantity\", \"Expiry Date\", \"Company\", \"Tags\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                                              \"Notifications\"};"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private static final String DEFAULT_EXPORT_FOLDER_NAME \u003d \"exported\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private static final Path DEFAULT_EXPORT_FOLDER_PATH \u003d Paths.get(DEFAULT_EXPORT_FOLDER_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private String csvFileName;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private Path csvFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public CsvWrapper(String csvFileName, Model model) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        requireNonNull(csvFileName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        this.csvFileName \u003d csvFileName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Exports the current list in the GUI to a csv file."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @throws CommandException If there is an error exporting the current list in the GUI to a csv file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void export() throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            List\u003cMedicine\u003e currentGuiList \u003d model.getFilteredMedicineList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            List\u003cMedicine\u003e lowStockMedicinesList \u003d model.getLowStockMedicinesList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            createCsvFile(csvFileName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            writeDataToCsv(currentGuiList, lowStockMedicinesList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            doCleanUp();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw ce;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Creates a .csv file based on the input csv file name."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param csvFileName The input csv file name."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @throws CommandException If there are errors creating the .csv file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private void createCsvFile(String csvFileName) throws CommandException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        createIfExportDirectoryMissing();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            if (csvFileName.length() \u003e MAX_FILE_NAME_LENGTH) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                throw new CommandException((FILE_OPS_ERROR_MESSAGE + \"The file name is too long, try to reduce\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        + \" the specified file name length to be within 255 characters.\\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        + \"Note: This is just a standardise file name length and a FileSystemException exception might\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        + \" still occur during file creation depending on your current\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        + \" operating system\u0027s file system.\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            csvFilePath \u003d Files.createFile(Paths.get(DEFAULT_EXPORT_FOLDER_NAME, csvFileName + \".csv\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } catch (FileAlreadyExistsException fae) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + csvFileName + \".csv\" + \" already exists in \\\"\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    + DEFAULT_EXPORT_FOLDER_NAME + \"\\\" directory.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } catch (FileSystemException fse) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw new CommandException((FILE_OPS_ERROR_MESSAGE + fse.getClass().getName() + \": \" + fse.getReason()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    + \"One possible reason is the specified file name \""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    + \"is too long for your current operating system\u0027s file system.\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Cleans up empty csv that is created in the exported directory if an error occurs."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * If csvFilePath is null, return as there is no file to clean up."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @throws CommandException If there is an error cleaning up the empty csv file created."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private void doCleanUp() throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (csvFilePath \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            Files.deleteIfExists(csvFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Writes data from current list displayed in GUI when export command is called to a csv file."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Note: For medicine containing more than one batch, the csv data will be compiled"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * such that each individual batches of each medicine has its own individual line in the csv file."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Medicines with no batches, in other words, just added or initialised without any batches linked to it,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * it will be ignored and not written in the csv file. This is due to the fact that there is no useful information"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * to be compiled to the csv file for those medicines without any batches."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param currentGuiList The current list displayed in the GUI when the export command is called."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param lowQuantityMedicineList The list of low quantity medicines (Medicines with low stock)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @throws CommandException If there is an error exporting the current list in the GUI to a csv file."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private void writeDataToCsv(List currentGuiList, List lowQuantityMedicineList) throws CommandException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        try (CSVWriter csvWriter \u003d new CSVWriter(new FileWriter(csvFilePath.toString()))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            csvWriter.writeNext(defaultHeading);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            Iterator iterator \u003d currentGuiList.listIterator();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                Medicine current \u003d (Medicine) iterator.next();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                if (isMedicineInitialised(current) \u003d\u003d false) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                List\u003cString[]\u003e medicineDataStringArray \u003d processMedicineData(current, isMedicineLowQuantity(current,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        lowQuantityMedicineList));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                csvWriter.writeAll(medicineDataStringArray);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Creates the export directory if export directory where exported data are stored."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @throws CommandException if there are errors creating the export directory."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private void createIfExportDirectoryMissing() throws CommandException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (Files.isDirectory(DEFAULT_EXPORT_FOLDER_PATH) \u003d\u003d false \u0026\u0026 Files.exists(DEFAULT_EXPORT_FOLDER_PATH)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + \"an \\\"\" + DEFAULT_EXPORT_FOLDER_NAME + \"\\\" file without\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    + \" any file extension already exists and it is not a directory. \""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    + \"Please remove it in order for the \\\"exported\\\" directory to be created.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (Files.isDirectory(DEFAULT_EXPORT_FOLDER_PATH) \u003d\u003d false) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                Files.createDirectory(DEFAULT_EXPORT_FOLDER_PATH);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Returns whether the input medicine has been initialised."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Initalised, in this case, is defined as whether it has any batches or it was just added with currently"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * no batches linked to it."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param medicine The input medicine."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @return Whether the input medicine has been initialised."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private boolean isMedicineInitialised(Medicine medicine) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (medicine.getBatches().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Returns a list batch of the input medicine that are expiring soon."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Note: It returns an empty list of the input medicine does not have any batches that is expiring soon."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param medicine The input medicine ."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @return Returns a list batch of the input medicine that are expiring soon."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * It returns an empty list of the input medicine does not have any batches that is expiring soon."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private List\u003cBatch\u003e getListOfBatchExpiringSoon(Medicine medicine) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return medicine.getFilteredBatch(model.getWarningPanelPredicateAccessor().getBatchExpiryPredicate());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Returns true if the input medicine is in the input list of lowQuantityMedicineList else returns false."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param medicine The input medicine."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param lowQuantityMedicineList The list of medicines which are low in quantity/low in stock."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @return Returns true if the input medicine is in the input list of lowQuantityMedicineList else returns false."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private boolean isMedicineLowQuantity(Medicine medicine, List lowQuantityMedicineList) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return lowQuantityMedicineList.contains(medicine);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Returns true if the input medicine batch is expired else returns false."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Note: A medicine batch is considered expired if the current date is greater than or equal to the medicine"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * batch expiry date."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param batch The input medicine batch."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @return Returns true if the input medicine batch is expired else returns false."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private boolean isMedicineBatchExpired(Batch batch) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Expiry currentMedicineBatchExpiry \u003d batch.getExpiry();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Expiry currentDate;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        SimpleDateFormat currentDataAndTimeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String currentDateString \u003d currentDataAndTimeFormat.format(new Date());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        currentDate \u003d new Expiry(currentDateString);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (currentDate.compareTo(currentMedicineBatchExpiry) \u003e\u003d 1) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Processes the input medicine data and returns a List of String Array"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * representation of the input medicine data for writing to csv file."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param medicine The input medicine."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param isMedicineLowQuantity The input medicine low quantity status: It is true, if it is low stock else"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     *                              it is false."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @return Returns a list of String Array containing the input medicine data for writing to csv file."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private List\u003cString[]\u003e processMedicineData(Medicine medicine, boolean isMedicineLowQuantity) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        List\u003cString[]\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Collection\u003cBatch\u003e batches \u003d medicine.getBatches().values();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Iterator iterator \u003d batches.iterator();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            Batch currentBatch \u003d (Batch) iterator.next();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            String[] currentData \u003d buildStringArray(medicine, currentBatch, isMedicineLowQuantity);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            result.add(currentData);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Builds a String Array containing detailed information of the medicine"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * which will be written to the csv file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param medicine The input medicine."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param batch The input batch of the input medicine."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param isMedicineLowQuantity The input medicine low quantity status: It is true, if it is low stock else"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     *                              it is false."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @return A String Array containing detailed information of the medicine."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private String[] buildStringArray(Medicine medicine, Batch batch, boolean isMedicineLowQuantity) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String delimiter \u003d \"|\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        List\u003cBatch\u003e listOfBatchesExpiringSoon \u003d getListOfBatchExpiringSoon(medicine);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String[] result;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        builder.append(medicine.getName())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(delimiter)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(batch.getBatchNumber())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(delimiter)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(batch.getQuantity())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(delimiter)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(batch.getExpiry())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(delimiter)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(medicine.getCompany())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                .append(delimiter);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Iterator iterator \u003d medicine.getTags().iterator();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            Tag current \u003d (Tag) iterator.next();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            String formattedCurrentTagString \u003d current.toStringUpperCase();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            builder.append(formattedCurrentTagString);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            if (iterator.hasNext()) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                builder.append(\u0027 \u0027);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        builder.append(delimiter);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (isMedicineLowQuantity) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            builder.append(DEFAULT_LOW_STOCK_NOTIFICATION);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            if (listOfBatchesExpiringSoon.contains(batch)) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                builder.append(\u0027 \u0027);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                if (isMedicineBatchExpired(batch)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    builder.append(DEFAULT_EXPIRED_NOTIFICATION);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    builder.append(DEFAULT_EXPIRING_SOON_NOTIFICATION);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            if (listOfBatchesExpiringSoon.contains(batch)) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                if (isMedicineBatchExpired(batch)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    builder.append(DEFAULT_EXPIRED_NOTIFICATION);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    builder.append(DEFAULT_EXPIRING_SOON_NOTIFICATION);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        result \u003d builder.toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static String[] getDefaultHeading() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return defaultHeading;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static String getDefaultExpiringSoonNotification() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return DEFAULT_EXPIRING_SOON_NOTIFICATION;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static String getDefaultLowStockNotification() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return DEFAULT_LOW_STOCK_NOTIFICATION;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static String getDefaultExpiredNotification() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return DEFAULT_EXPIRED_NOTIFICATION;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 318,
      "flxffy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/pdf/PdfWrapper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "package seedu.address.commons.util.pdf;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.awt.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDPageContentStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.pdmodel.common.PDRectangle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDFont;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.pdmodel.font.PDType1Font;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melpulomas"
        },
        "content": " * A PdfWrapper class to complement the label command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melpulomas"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "public class PdfWrapper {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not export data to pdf file: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private static final String DEFAULT_LABEL_FOLDER_NAME \u003d \"PDF\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private static final Path DEFAULT_LABEL_FOLDER_PATH \u003d Paths.get(DEFAULT_LABEL_FOLDER_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private PDPage page \u003d new PDPage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public PdfWrapper(Index targetIndex, FileName fileName, Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        this.index \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        this.fileName \u003d fileName.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * Label the selected medicine information onto a pdf file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * @throws CommandException If there is an error printing the information of the medicine onto a pdf file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public void label() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        createIfLabelDirectoryMissing();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        parseFileName();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Medicine medicineToPrint \u003d getSpecificMedicine(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        model.setSelectedMedicine(medicineToPrint);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String textNextLine \u003d getMedicineInformationToString(medicineToPrint);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        writeToPdf(page, textNextLine);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * Creates the export directory if export directory where exported data are stored."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * @throws CommandException if there are errors creating the export directory."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private void createIfLabelDirectoryMissing() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        if (Files.isDirectory(DEFAULT_LABEL_FOLDER_PATH) \u003d\u003d false) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                Files.createDirectory(DEFAULT_LABEL_FOLDER_PATH);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private void parseFileName() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        this.fileName \u003d Paths.get(DEFAULT_LABEL_FOLDER_NAME, fileName + \".pdf\").toString().replaceAll(\"\\\\s+\", \"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * @param page The current page that the content will be written on."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private void writeToPdf(PDPage page, String textNextLine) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        try (PDDocument doc \u003d new PDDocument()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            doc.addPage(page);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            PDFont font \u003d PDType1Font.HELVETICA_BOLD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            float fontSize \u003d 25;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            float leading \u003d 1.5f * fontSize;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            PDRectangle mediaBox \u003d page.getMediaBox();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            float margin \u003d 72;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            float width \u003d mediaBox.getWidth() - 2 * margin;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            float startX \u003d mediaBox.getLowerLeftX() + margin;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            float startY \u003d mediaBox.getUpperRightY() - margin;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            List\u003cString\u003e lines \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            for (String text : textNextLine.split(\"\\n\")) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                int lastSpace \u003d -1;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                while (text.length() \u003e 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    int spaceIndex \u003d text.indexOf(\u0027 \u0027, lastSpace + 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    if (spaceIndex \u003c 0) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                        spaceIndex \u003d text.length();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    String subString \u003d text.substring(0, spaceIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    float size \u003d fontSize * font.getStringWidth(subString) / 1000;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    if (size \u003e width) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                        if (lastSpace \u003c 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                            lastSpace \u003d spaceIndex;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                            subString \u003d text.substring(0, lastSpace);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                            lines.add(subString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                            text \u003d text.substring(lastSpace).trim();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                            lastSpace \u003d -1;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    } else if (spaceIndex \u003d\u003d text.length()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                        lines.add(text);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                        text \u003d \"\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                        lastSpace \u003d spaceIndex;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            try (PDPageContentStream contents \u003d new PDPageContentStream(doc, page)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                contents.beginText();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                contents.setFont(font, 12);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                contents.newLineAtOffset(startX, startY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                for (String line : lines) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    contents.showText(line);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    contents.newLineAtOffset(0, -leading);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                contents.endText();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                contents.setNonStrokingColor(Color.DARK_GRAY);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                contents.addRect(50, 550, 350, 200);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                contents.addRect(40, 540, 370, 220);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                contents.stroke();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            doc.save(fileName);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        } catch (IOException ie) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            ie.printStackTrace();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * @param model The current model that the medicine information will be retrieved from."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * @throws CommandException If there is an error cleaning up the empty csv file created."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private Medicine getSpecificMedicine(Model model) throws CommandException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        List\u003cMedicine\u003e filteredMedicineList \u003d model.getFilteredMedicineList();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d filteredMedicineList.size()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        return filteredMedicineList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * Creates and returns a {@code String} with the details of {@code medicineToPrint}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private String getMedicineInformationToString(Medicine medicineToPrint) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineName \u003d medicineToPrint.getName().toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineExpiry \u003d medicineToPrint.getNextExpiry().toString();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineQuantity \u003d medicineToPrint.getTotalQuantity().toString();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineCompany \u003d medicineToPrint.getCompany().toString();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineTags \u003d medicineToPrint.getTags().toString();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        return (\"Name:\" + medicineName + \"\\n\" + \"Company:\" + medicineCompany + \"\\n\" + \"Quantity:\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + medicineQuantity + \"\\n\" + \"Expiry:\" + medicineExpiry + \"\\n\" + \"Tags:\" + medicineTags);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/warning/WarningPanelPredicateAccessor.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.commons.util.warning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.BatchExpiryThresholdPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineExpiryThresholdPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineLowStockThresholdPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Accessor to all predicates used in the warning panel for filtration."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningPanelPredicateAccessor {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private BatchExpiryThresholdPredicate batchExpiryPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private MedicineExpiryThresholdPredicate medicineExpiryPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private MedicineLowStockThresholdPredicate medicineLowStockPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanelPredicateAccessor() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        setDefaultPredicates();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Predicate\u003cBatch\u003e getBatchExpiryPredicate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return this.batchExpiryPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Predicate\u003cMedicine\u003e getMedicineExpiryPredicate() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return this.medicineExpiryPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Predicate\u003cMedicine\u003e getMedicineLowStockPredicate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return this.medicineLowStockPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Threshold getExpiryThreshold() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return medicineExpiryPredicate.getThreshold();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Threshold getLowStockThreshold() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return medicineLowStockPredicate.getThreshold();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Updates {@code Batch}\u0027s expiration threshold."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param threshold"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void updateBatchExpiringThreshold(int threshold) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.batchExpiryPredicate \u003d new BatchExpiryThresholdPredicate("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            new Threshold(Integer.toString(threshold), WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Updates {@code Medicine}\u0027s expiration threshold."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param threshold"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void updateMedicineExpiringThreshold(int threshold) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.medicineExpiryPredicate \u003d new MedicineExpiryThresholdPredicate("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            new Threshold(Integer.toString(threshold), WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Updates {@code Medicine}\u0027s low stock threshold."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param threshold"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void updateMedicineLowStockThreshold(int threshold) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.medicineLowStockPredicate \u003d new MedicineLowStockThresholdPredicate("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            new Threshold(Integer.toString(threshold), WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Set max threshold such that all predicates always return true."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setMaxThresholds() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        updateBatchExpiringThreshold(Threshold.MAX_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        updateMedicineExpiringThreshold(Threshold.MAX_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        updateMedicineLowStockThreshold(Threshold.MAX_QUANTITY_THRESHOLD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private void setDefaultPredicates() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.batchExpiryPredicate \u003d new BatchExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.medicineExpiryPredicate \u003d new MedicineExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.medicineLowStockPredicate \u003d new MedicineLowStockThresholdPredicate(Model.DEFAULT_LOW_STOCK_THRESHOLD);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (!(obj instanceof WarningPanelPredicateAccessor)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor other \u003d (WarningPanelPredicateAccessor) obj;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return medicineExpiryPredicate.equals(other.medicineExpiryPredicate)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 batchExpiryPredicate.equals(other.batchExpiryPredicate)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 medicineLowStockPredicate.equals(other.medicineLowStockPredicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "flxffy": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/warning/WarningPanelPredicateType.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.commons.util.warning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Type of lists warning panel holds."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public enum WarningPanelPredicateType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    EXPIRY, LOW_STOCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the Inventory."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see seedu.address.model.Model#getInventory()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Return the accessor to predicates used in the warning pane*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    WarningPanelPredicateAccessor getWarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of medicines for medicine pane*/"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ObservableList\u003cMedicine\u003e getFilteredMedicineList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of medicines that are expiring for warning pane*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    ObservableList\u003cMedicine\u003e getExpiringMedicinesList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of medicines with low quantity for warning pane*/"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    ObservableList\u003cMedicine\u003e getLowStockMedicinesList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of commands entered by the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * The list is ordered from the least recent command to the most recent command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cString\u003e getHistory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Get the user prefs\u0027 InformationPanel settings as a ReadOnlyProperty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ReadOnlyProperty\u003cInformationPanelSettings\u003e getInformationPanelSetting();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Selected medicine in the filtered medicine list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * null if no medicine is selected."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see seedu.address.model.Model#selectedMedicineProperty()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ReadOnlyProperty\u003cMedicine\u003e selectedMedicineProperty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the selected medicine in the filtered medicine list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see seedu.address.model.Model#setSelectedMedicine(Medicine)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void setSelectedMedicine(Medicine medicine);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 21,
      "-": 57,
      "flxffy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.parser.InventoryParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final InventoryParser inventoryParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private boolean inventoryModified;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventoryParser \u003d new InventoryParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Set inventoryModified to true whenever the models\u0027 inventory is modified."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.getInventory().addListener(observable -\u003e inventoryModified \u003d true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventoryModified \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Command command \u003d inventoryParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            commandResult \u003d command.execute(model, history);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (inventoryModified) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            logger.info(\"Inventory modified, saving to file.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                storage.saveInventory(model.getInventory());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return model.getInventory();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanelPredicateAccessor getWarningPanelPredicateAccessor() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return model.getWarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ObservableList\u003cMedicine\u003e getFilteredMedicineList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return model.getFilteredMedicineList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public ObservableList\u003cMedicine\u003e getExpiringMedicinesList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return model.getExpiringMedicinesList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public ObservableList\u003cMedicine\u003e getLowStockMedicinesList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return model.getLowStockMedicinesList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getHistory() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return history.getHistory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return model.getInventoryFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ReadOnlyProperty\u003cInformationPanelSettings\u003e getInformationPanelSetting() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return model.getInformationPanelSettings();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ReadOnlyProperty\u003cMedicine\u003e selectedMedicineProperty() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return model.selectedMedicineProperty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setSelectedMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setSelectedMedicine(medicine);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 29,
      "-": 88,
      "flxffy": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Adds a medicine to the inventory."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a medicine to the inventory. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_COMPANY + \"COMPANY \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_NAME + \"Paracetamol \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_COMPANY + \"Novartis \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_TAG + \"inflammation \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_TAG + \"fever\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New medicine added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEDICINE \u003d \"This medicine already exists in the inventory\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Medicine toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Medicine}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public AddCommand(Medicine medicine) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(medicine);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        toAdd \u003d medicine;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (model.hasMedicine(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.addMedicine(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.commitInventory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 20,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Clears the inventory."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Inventory has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setInventory(new Inventory());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.commitInventory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 5,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Deletes a medicine identified using it\u0027s displayed index from the inventory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \": Deletes the medicine identified by the index number used in the displayed medicine list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_DELETE_MEDICINE_SUCCESS \u003d \"Deleted Medicine: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e lastShownList \u003d model.getFilteredMedicineList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.deleteMedicine(medicineToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.commitInventory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_MEDICINE_SUCCESS, medicineToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 10,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEDICINES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Edits the details of an existing medicine in the inventory."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the medicine identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"by the index number used in the displayed medicine list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"[\" + PREFIX_COMPANY + \"COMPANY] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_COMPANY + \"3M Pharmaceuticals \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_TAG + \"fever\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_EDIT_MEDICINE_SUCCESS \u003d \"Edited Medicine: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEDICINE \u003d \"This medicine already exists in the inventory.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final EditMedicineDescriptor editMedicineDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param index of the medicine in the filtered medicine list to edit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param editMedicineDescriptor details to edit the medicine with"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public EditCommand(Index index, EditMedicineDescriptor editMedicineDescriptor) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(editMedicineDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.editMedicineDescriptor \u003d new EditMedicineDescriptor(editMedicineDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e lastShownList \u003d model.getFilteredMedicineList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedMedicine \u003d createEditedMedicine(medicineToEdit, editMedicineDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!medicineToEdit.isSameMedicine(editedMedicine) \u0026\u0026 model.hasMedicine(editedMedicine)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setMedicine(medicineToEdit, editedMedicine);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.commitInventory();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MEDICINE_SUCCESS, editedMedicine));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Creates and returns a {@code Medicine} with the details of {@code medicineToEdit}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * edited with {@code editMedicineDescriptor}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static Medicine createEditedMedicine(Medicine medicineToEdit,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            EditMedicineDescriptor editMedicineDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assert medicineToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Name updatedName \u003d editMedicineDescriptor.getName().orElse(medicineToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Company updatedCompany \u003d editMedicineDescriptor.getCompany().orElse(medicineToEdit.getCompany());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editMedicineDescriptor.getTags().orElse(medicineToEdit.getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Medicine(updatedName, updatedCompany, medicineToEdit.getTotalQuantity(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                medicineToEdit.getNextExpiry(), updatedTags, medicineToEdit.getBatches());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 editMedicineDescriptor.equals(e.editMedicineDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Stores the details to edit the medicine with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * corresponding field value of the medicine."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static class EditMedicineDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private Company company;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public EditMedicineDescriptor() {}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public EditMedicineDescriptor(EditMedicineDescriptor toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            setCompany(toCopy.company);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, company, tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setCompany(Company company) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            this.company \u003d company;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public Optional\u003cCompany\u003e getCompany() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return Optional.ofNullable(company);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (!(other instanceof EditMedicineDescriptor)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            EditMedicineDescriptor e \u003d (EditMedicineDescriptor) other;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u0026\u0026 getCompany().equals(e.getCompany())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 55,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MediTabs as requested ...\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.csv.CsvWrapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * Exports the current list to a csv file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"export\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": exports the current list to a .csv file. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            + \"[FILE_NAME]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            + \"example\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The current list has been exported to: %1$s.csv\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private final String fileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Creates an ExportCommand to export the current list to a .csv file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public ExportCommand(FileName fileName) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        this.fileName \u003d fileName.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        CsvWrapper csvWrapper \u003d new CsvWrapper(fileName, model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        csvWrapper.export();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, fileName));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                || (other instanceof ExportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                \u0026\u0026 fileName.equals(((ExportCommand) other).fileName));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Finds and lists all medicines in inventory whose data contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * The field to search depends on the prefix entered. Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all medicines whose data contain any of the \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"specified keywords (case-insensitive). Select a field to search by entering the appropriate prefix.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Parameters: PREFIX KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \" Paracetamol Amoxicillin Ibuprofen\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Possible prefixes: \u0027n/\u0027: Name, \u0027c/\u0027: Company, \u0027t/\u0027: Tags, \u0027b/\u0027: Batch\\n\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Predicate\u003cMedicine\u003e predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Creates a FindCommand to filter the medicine list with {@code predicate}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public FindCommand(Predicate\u003cMedicine\u003e predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                String.format(Messages.MESSAGE_MEDICINES_LISTED_OVERVIEW, model.getFilteredMedicineList().size()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 18,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LabelCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.util.pdf.PdfWrapper;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melpulomas"
        },
        "content": " * Prints a selected medicine identified using it\u0027s displayed index from the inventory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "public class LabelCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"label\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String DEFAULT_FILENAME \u003d \"to_print\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final int MAX_LENGTH_FILENAME \u003d 60;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            + \": Prints the Medicine name and description in PDF format using its index.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            + \"Parameters: INDEX [f/(filename)]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\" + \" f/printThisFile.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String MESSAGE_LABEL_MEDICINE_SUCCESS \u003d \"Successfully printed the medicine at index: %1$s\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            + \" in PDF format\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private final FileName fileName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * Creates an LabelCommand to label a specific medicine information using {@code Index}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * onto a PDF file with the name {@code FileName}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public LabelCommand(Index targetIndex, FileName fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        PdfWrapper pdfCreation \u003d new PdfWrapper(this.targetIndex, this.fileName, model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        pdfCreation.label();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_LABEL_MEDICINE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                || (other instanceof LabelCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((LabelCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEDICINES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Lists all medicines in the inventory to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all medicines\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 4,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEDICINES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Reverts the {@code model}\u0027s inventory to its previously undone state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!model.canRedoInventory()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.redoInventory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Selects a medicine identified using it\u0027s displayed index from the inventory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \": Selects the medicine identified by the index number used in the displayed medicine list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_SELECT_MEDICINE_SUCCESS \u003d \"Selected Medicine: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e filteredMedicineList \u003d model.getFilteredMedicineList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredMedicineList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setSelectedMedicine(filteredMedicineList.get(targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_MEDICINE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 9,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIRECTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Changes the property and direction that the batch table in information panel is sorted by."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts the batch table according to the entered \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"property and direction. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_PROPERTY + \"PROPERTY \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_DIRECTION + \"DIRECTION\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_PROPERTY + \"batchnumber \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_DIRECTION + \"descending\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Possible properties: batchnumber, quantity, expiry\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Possible directions: ascending, descending\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Batch table sorted with %s.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final InformationPanelSettings informationPanelSettings;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Creates a SortCommand to change the {@code informationPanelSettings}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public SortCommand(InformationPanelSettings informationPanelSettings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(informationPanelSettings);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.informationPanelSettings \u003d informationPanelSettings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setInformationPanelSettings(informationPanelSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, informationPanelSettings));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 informationPanelSettings.equals(((SortCommand) other).informationPanelSettings));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEDICINES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Reverts the {@code model}\u0027s inventory to its previous state."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!model.canUndoInventory()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.undoInventory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 5,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BATCHNUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Updates a medicine with new batch details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the batch details of the medicine identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"by the index number used in the displayed medicine list. Existing values will be overwritten by the \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Parameters: INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_BATCHNUMBER + \"BATCH_NUMBER \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"[\" + PREFIX_EXPIRY + \"EXPIRY_DATE]\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_BATCHNUMBER + \"HH-156224 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_QUANTITY + \"40 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + PREFIX_EXPIRY + \"13/11/2019 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Batch updated: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_MISSING_PARAMETER \u003d \"Must include batch number and quantity or expiry of the \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"batch used for updating.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_MAX_QUANTITY_EXCEEDED \u003d \"Max quantity exceeded. Max quantity: \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + Quantity.MAX_QUANTITY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_EXPIRED_BATCH \u003d \"Expiry date has passed. Cannot set expiry to passed date\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_NEW_BATCH_MISSING_PARAMETER \u003d \"Attempting to add a new batch. Must include \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"both expiry date and quantity for new batches.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_NEW_BATCH_ZERO_QUANTITY \u003d \"Attempting to add a new batch. Cannot add a new \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"batch with zero quantity.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final UpdateBatchDescriptor newBatchDetails;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Creates an UpdateCommand to update the {@code Medicine} at the specified {@index} with new batch details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateCommand(Index targetIndex, UpdateBatchDescriptor newBatchDetails) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(newBatchDetails);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.newBatchDetails \u003d newBatchDetails;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e lastShownList \u003d model.getFilteredMedicineList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch batchToUpdate \u003d medicineToUpdate.getBatches().get(newBatchDetails.getBatchNumber());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (batchToUpdate \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertCanAddNewBatchToMedicine(medicineToUpdate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch updatedBatch \u003d createUpdatedBatch(batchToUpdate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d createUpdatedMedicine(medicineToUpdate, batchToUpdate, updatedBatch);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setMedicine(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.commitInventory();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setSelectedMedicine(updatedMedicine);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, updatedBatch));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws CommandException if requirements needed to add a new batch is not met."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCanAddNewBatchToMedicine(Medicine medicine) throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (medicine.getBatches().size() \u003d\u003d Medicine.MAX_SIZE_BATCH) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(Medicine.MESSAGE_CONSTRAINTS_BATCHES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!newBatchDetails.getQuantity().isPresent() || !newBatchDetails.getExpiry().isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(MESSAGE_NEW_BATCH_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (newBatchDetails.getQuantity().get().getNumericValue() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(MESSAGE_NEW_BATCH_ZERO_QUANTITY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a {@code Batch} with the details of {@code batchToUpdate} updated with {@code newBatchDetails}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Batch createUpdatedBatch(Batch batchToUpdate) throws CommandException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Quantity quantity;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Expiry expiry;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (newBatchDetails.getQuantity().isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            quantity \u003d newBatchDetails.getQuantity().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            quantity \u003d batchToUpdate.getQuantity();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (newBatchDetails.getExpiry().isPresent()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            expiry \u003d newBatchDetails.getExpiry().get();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (expiry.isExpired()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                throw new CommandException(MESSAGE_EXPIRED_BATCH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            expiry \u003d batchToUpdate.getExpiry();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Batch(newBatchDetails.getBatchNumber(), quantity, expiry);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a {@code Medicine} with the details of {@code medicineToUpdate} updated with {@code updatedBatch}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Medicine createUpdatedMedicine(Medicine medicineToUpdate, Batch batchToUpdate, Batch updatedBatch) throws"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            CommandException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Map\u003cBatchNumber, Batch\u003e updatedBatches \u003d getUpdatedBatches(medicineToUpdate, updatedBatch);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Quantity updatedQuantity \u003d getUpdatedQuantity(medicineToUpdate, batchToUpdate, updatedBatch);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Expiry updatedExpiry \u003d getUpdatedExpiry(updatedBatches);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Medicine(medicineToUpdate.getName(), medicineToUpdate.getCompany(), updatedQuantity, updatedExpiry,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                medicineToUpdate.getTags(), updatedBatches);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Map\u003cBatchNumber, Batch\u003e getUpdatedBatches(Medicine medicineToUpdate, Batch updatedBatch) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        HashMap\u003cBatchNumber, Batch\u003e updatedBatches \u003d new HashMap\u003c\u003e(medicineToUpdate.getBatches());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (updatedBatch.getQuantity().getNumericValue() !\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            updatedBatches.put(updatedBatch.getBatchNumber(), updatedBatch);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            updatedBatches.remove(updatedBatch.getBatchNumber());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return updatedBatches;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Quantity getUpdatedQuantity(Medicine medicineToUpdate, Batch batchToUpdate, Batch updatedBatch) throws"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            CommandException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int quantity \u003d medicineToUpdate.getTotalQuantity().getNumericValue();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (batchToUpdate !\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            quantity -\u003d batchToUpdate.getQuantity().getNumericValue();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantity +\u003d updatedBatch.getQuantity().getNumericValue();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new Quantity(Integer.toString(quantity));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new CommandException(MESSAGE_MAX_QUANTITY_EXCEEDED);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Expiry getUpdatedExpiry(Map\u003cBatchNumber, Batch\u003e updatedBatches) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (updatedBatches.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new Expiry(\"-\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return updatedBatches.values().stream().min(Comparator.comparing(Batch::getExpiry)).get().getExpiry();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof seedu.address.logic.commands.UpdateCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((seedu.address.logic.commands.UpdateCommand) other).targetIndex)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 newBatchDetails.equals(((seedu.address.logic.commands.UpdateCommand) other).newBatchDetails));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Stores the details to update the batch with."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Each non-empty field value will replace the corresponding field value of the batch."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static class UpdateBatchDescriptor {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private BatchNumber batchNumber;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private Expiry expiry;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public UpdateBatchDescriptor() {}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public UpdateBatchDescriptor(UpdateBatchDescriptor toCopy) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            setBatchNumber(toCopy.batchNumber);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            setExpiry(toCopy.expiry);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * Return true if the required parameters for UpdateBatchDescriptor are missing."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public boolean hasMissingParameters() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return batchNumber \u003d\u003d null || (expiry \u003d\u003d null \u0026\u0026 quantity \u003d\u003d null);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setBatchNumber(BatchNumber batchNumber) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            this.batchNumber \u003d batchNumber;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public BatchNumber getBatchNumber() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return batchNumber;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setExpiry(Expiry expiry) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            this.expiry \u003d expiry;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public Optional\u003cExpiry\u003e getExpiry() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return Optional.ofNullable(expiry);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return (other \u003d\u003d this)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    || (other instanceof UpdateBatchDescriptor"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u0026\u0026 getBatchNumber().equals(((UpdateBatchDescriptor) other).getBatchNumber())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(((UpdateBatchDescriptor) other).getQuantity())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u0026\u0026 getExpiry().equals(((UpdateBatchDescriptor) other).getExpiry()));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 252
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/WarningCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Change or show thresholds used in warning panel."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"warning\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Change or check thresholds used in the warning panel.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"\\nParameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"[\" + PREFIX_EXPIRY + \"EXPIRY_THRESHOLD\" + \"] \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"LOW_STOCK_THRESHOLD] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"[\" + \"SHOW\" + \"]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + PREFIX_QUANTITY + \"20\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"NOTE: only one parameter allowed.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final Threshold threshold;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final WarningPanelPredicateType type;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final boolean showThreshold;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Creates a WarningCommand to change the current threshold level."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningCommand(WarningPanelPredicateType type, Threshold threshold) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(threshold);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.showThreshold \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Creates a WarningCommand to show the current threshold levels."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningCommand(Boolean isShow) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(isShow);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.showThreshold \u003d isShow;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.threshold \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.type \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (showThreshold) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return showCurrentThresholds(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return changeThreshold(type, threshold, model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Show current thresholds used in warning panel."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @return Message with current thresholds used in warning panel"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private CommandResult showCurrentThresholds(Model model) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        int expiryThresholdVal \u003d model.getWarningPanelThreshold(WarningPanelPredicateType.EXPIRY).getNumericValue();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        int lowStockThresholdVal \u003d model.getWarningPanelThreshold(WarningPanelPredicateType.LOW_STOCK)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .getNumericValue();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                String.format(Messages.MESSAGE_SHOW_CURRENT_THRESHOLDS,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        expiryThresholdVal, expiryThresholdVal \u003d\u003d 1 ? \"\" : \"s\", lowStockThresholdVal));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Change threshold used in warning panel."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param threshold"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @return Message with current thresholds used in warning panel"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private CommandResult changeThreshold(WarningPanelPredicateType type, Threshold threshold, Model model) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        model.changeWarningPanelListThreshold(type, threshold);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return showCurrentThresholds(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                || (other instanceof WarningCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 (threshold \u003d\u003d null \u0026\u0026 ((WarningCommand) other).threshold \u003d\u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    || (threshold !\u003d null \u0026\u0026 ((WarningCommand) other).threshold !\u003d null"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        \u0026\u0026 threshold.equals(((WarningCommand) other).threshold)))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 (type \u003d\u003d null \u0026\u0026 ((WarningCommand) other).type \u003d\u003d null"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    || (type !\u003d null \u0026\u0026 ((WarningCommand) other).type !\u003d null"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        \u0026\u0026 type.equals(((WarningCommand) other).type)))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 showThreshold \u003d\u003d ((WarningCommand) other).showThreshold);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Expiry INITIAL_EXPIRY \u003d new Expiry(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Quantity INITIAL_QUANTITY \u003d new Quantity(\"0\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Map\u003cBatchNumber, Batch\u003e INITIAL_BATCHES \u003d Collections.emptyMap();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COMPANY, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COMPANY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Company company \u003d ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Medicine medicine \u003d new Medicine(name, company, INITIAL_QUANTITY, INITIAL_EXPIRY, tagList, INITIAL_BATCHES);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new AddCommand(medicine);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Medicine.MESSAGE_CONSTRAINTS_TAGS));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 22,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Prefix PREFIX_EXPIRY \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Prefix PREFIX_COMPANY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Prefix PREFIX_BATCHNUMBER \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Prefix PREFIX_PROPERTY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Prefix PREFIX_DIRECTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 6,
      "melpulomas": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditMedicineDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COMPANY, PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor editMedicineDescriptor \u003d new EditMedicineDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            editMedicineDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COMPANY).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            editMedicineDescriptor.setCompany(ParserUtil.parseCompany(argMultimap.getValue(PREFIX_COMPANY).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editMedicineDescriptor::setTags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!editMedicineDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new EditCommand(index, editMedicineDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (tagSet.size() \u003e Medicine.MAX_SIZE_TAG) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Medicine.MESSAGE_CONSTRAINTS_TAGS));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 15,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ExportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT_DETAILED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * Parses input arguments and creates a new ExportCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public class ExportCommandParser implements Parser\u003cExportCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ExportCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * and returns an ExportCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public ExportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            FileName fileName \u003d ParserUtil.parseFileName(args, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return new ExportCommand(fileName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT_DETAILED, pe.getMessage(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            ExportCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BATCHNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.BatchContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_COMPANY, PREFIX_TAG,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                PREFIX_BATCHNUMBER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // First argument must be a prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Predicate\u003cMedicine\u003e predicate \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String[] keywords;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Prefix[] prefixes \u003d {PREFIX_NAME, PREFIX_COMPANY, PREFIX_TAG, PREFIX_BATCHNUMBER};"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (Prefix prefix: prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (argMultimap.getValue(prefix).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                if (predicate !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                keywords \u003d getKeywords(argMultimap, prefix);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                predicate \u003d getPredicate(prefix, keywords);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (predicate \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the appropriate predicate depending on which prefix is present in the argument."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if unknown prefix is entered."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Predicate\u003cMedicine\u003e getPredicate(Prefix prefix, String[] keywords) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (prefix \u003d\u003d PREFIX_NAME) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new NameContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (prefix \u003d\u003d PREFIX_COMPANY) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new CompanyContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (prefix \u003d\u003d PREFIX_TAG) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new TagContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (prefix \u003d\u003d PREFIX_BATCHNUMBER) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new BatchContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        throw new ParseException(\"Unknown prefix\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Get keywords from argMultimap depending on which prefix is present in the argument."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if no keywords were entered."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private String[] getKeywords(ArgumentMultimap argMultimap, Prefix prefix) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String trimmedKeywords \u003d argMultimap.getValue(prefix).get().trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (trimmedKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return trimmedKeywords.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 69,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/InventoryParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.commands.LabelCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.commands.WarningCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InventoryParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        case LabelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            return new LabelCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        case ExportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return new ExportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        case WarningCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return new WarningCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 8,
      "melpulomas": 3,
      "JonathanLeeWH": 3,
      "-": 91,
      "flxffy": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LabelCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_COMMAND_EXCEED_LIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.LabelCommand.DEFAULT_FILENAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.LabelCommand.MAX_LENGTH_FILENAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.logic.commands.LabelCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melpulomas"
        },
        "content": " * Parses input arguments and creates a new LabelCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melpulomas"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "public class LabelCommandParser implements Parser\u003cLabelCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LabelCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * and returns an LabelCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public LabelCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_FILE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        FileName fileName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            if (argMultimap.getValue(PREFIX_FILE).isPresent()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                fileName \u003d ParserUtil.parseFileName(argMultimap.getValue(PREFIX_FILE).get(), true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                fileName \u003d new FileName(DEFAULT_FILENAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            if (fileName.toString().length() \u003e MAX_LENGTH_FILENAME) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_COMMAND_EXCEED_LIMIT, LabelCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LabelCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        return new LabelCommand(index, fileName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortDirection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Parses a {@code String fileName} into a {@code FileName}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param fileName The input file name."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param isEmptyFileNameAllowed If empty input filename is allowed. If it is set to true, then"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     *                               if input file name is empty it will be given the default file name in"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     *                               the format (current date)_(current time)."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @return Returns a FileName object based on the input file name if the input file name is valid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @throws ParseException if the given {@code fileName} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static FileName parseFileName(String fileName, boolean isEmptyFileNameAllowed) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        requireNonNull(fileName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String trimmedFileName \u003d fileName.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (isEmptyFileNameAllowed \u0026\u0026 fileName.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            SimpleDateFormat currentDateAndTimeFormat \u003d new SimpleDateFormat(\"dd_MMM_yyyy_HH_mm_ss\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            trimmedFileName \u003d currentDateAndTimeFormat.format(new Date());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (!FileName.isValidFileName(trimmedFileName)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw new ParseException(FileName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return new FileName(trimmedFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses a {@code String quantity} into a {@code Quantity}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if the given {@code quantity} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!Quantity.isValidQuantity(trimmedQuantity)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Quantity(trimmedQuantity);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses a {@code String company} into an {@code Company}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if the given {@code company} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static Company parseCompany(String company) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String trimmedCompany \u003d company.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!Company.isValidCompany(trimmedCompany)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Company(trimmedCompany);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses a {@code String expiry} into an {@code Expiry}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if the given {@code expiry} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static Expiry parseExpiry(String expiry) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(expiry);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String trimmedExpiry \u003d expiry.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (trimmedExpiry.equals(\"-\") || !Expiry.isValidDate(trimmedExpiry)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(Expiry.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Expiry(trimmedExpiry);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Parses a {@code String threshold} into a {@code Threshold}."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @throws ParseException if the given {@code threshold} is invalid."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static Threshold parseThreshold(String threshold, WarningPanelPredicateType type) throws ParseException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(threshold);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String trimmedThreshold \u003d threshold.trim();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (!Threshold.isValidThreshold(trimmedThreshold, type)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            throw new ParseException(Threshold.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return new Threshold(trimmedThreshold, type);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses a {@code String batchNumber} into a {@code BatchNumber}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if the given {@code batchNumber} is invalid."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static BatchNumber parseBatchNumber(String batchNumber) throws ParseException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(batchNumber);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String trimmedBatchNumber \u003d batchNumber.trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!BatchNumber.isValidBatchNumber(trimmedBatchNumber)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(BatchNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new BatchNumber(trimmedBatchNumber);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses a {@code String sortProperty} into a {@code SortProperty}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if the given {@code SortProperty} is invalid."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static SortProperty parseSortProperty(String sortProperty) throws ParseException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(sortProperty);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String trimmedProperty \u003d sortProperty.trim();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!SortProperty.isValidSortProperty(trimmedProperty)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(SortProperty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (trimmedProperty.equalsIgnoreCase(SortProperty.BATCHNUMBER.toString())) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return SortProperty.BATCHNUMBER;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (trimmedProperty.equalsIgnoreCase(SortProperty.QUANTITY.toString())) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return SortProperty.QUANTITY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (trimmedProperty.equalsIgnoreCase(SortProperty.EXPIRY.toString())) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return SortProperty.EXPIRY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        throw new ParseException(\"Unknown sort property\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses a {@code String sortDirection} into a {@code SortDirection}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if the given {@code SortDirection} is invalid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static SortDirection parseSortDirection(String sortDirection) throws ParseException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(sortDirection);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String trimmedDirection \u003d sortDirection.trim();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!SortDirection.isValidSortDirection(trimmedDirection)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(SortDirection.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (trimmedDirection.equalsIgnoreCase(SortDirection.ASCENDING.toString())) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return SortDirection.ASCENDING;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (trimmedDirection.equalsIgnoreCase(SortDirection.DESCENDING.toString())) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return SortDirection.DESCENDING;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        throw new ParseException(\"Unknown sort direction\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 93,
      "JonathanLeeWH": 20,
      "-": 103,
      "flxffy": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIRECTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortDirection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PROPERTY, PREFIX_DIRECTION);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!argMultimap.getPreamble().isEmpty() || !argMultimap.getValue(PREFIX_PROPERTY).isPresent()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || !argMultimap.getValue(PREFIX_DIRECTION).isPresent()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortProperty sortProperty \u003d ParserUtil.parseSortProperty(argMultimap.getValue(PREFIX_PROPERTY).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortDirection sortDirection \u003d ParserUtil.parseSortDirection(argMultimap.getValue(PREFIX_DIRECTION).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new SortCommand(new InformationPanelSettings(sortProperty, sortDirection));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BATCHNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateBatchDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_BATCHNUMBER, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                PREFIX_EXPIRY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor updateBatchDescriptor \u003d new UpdateBatchDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BATCHNUMBER).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            updateBatchDescriptor.setBatchNumber(ParserUtil.parseBatchNumber(argMultimap.getValue(PREFIX_BATCHNUMBER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            updateBatchDescriptor.setQuantity(ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EXPIRY).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            updateBatchDescriptor.setExpiry(ParserUtil.parseExpiry(argMultimap.getValue(PREFIX_EXPIRY).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (updateBatchDescriptor.hasMissingParameters()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new UpdateCommand(index, updateBatchDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WarningCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.commands.WarningCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Parses input arguments and creates a new WarningCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningCommandParser implements Parser\u003cWarningCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (isShow(args)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return new WarningCommand(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_EXPIRY, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (!hasOnePrefix(argMultimap) || args.trim().split(\"\\\\s+\").length \u003e 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, WarningCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Optional\u003cString\u003e optionalExpiryThreshold \u003d argMultimap.getValue(PREFIX_EXPIRY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Optional\u003cString\u003e optionalLowStockThreshold \u003d argMultimap.getValue(PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (optionalExpiryThreshold.isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Threshold threshold \u003d ParserUtil.parseThreshold(optionalExpiryThreshold.get(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return new WarningCommand(WarningPanelPredicateType.EXPIRY, threshold);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Threshold threshold \u003d ParserUtil.parseThreshold(optionalLowStockThreshold.get(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return new WarningCommand(WarningPanelPredicateType.LOW_STOCK, threshold);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Checks if \"show\" in args, ignoring trailing whitespaces and case."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @return True if the argument is \"show\", otherwise False."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private boolean isShow(String args) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return trimmedArgs.equalsIgnoreCase(\"show\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Check if there is only one prefix in args, using XOR."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param argMultimap"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @return True if there is only one prefix in args, False otherwise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private boolean hasOnePrefix(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return arePrefixesPresent(argMultimap, PREFIX_EXPIRY) ^ arePrefixesPresent(argMultimap, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Inventory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.InvalidationListenerManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.UniqueMedicineList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Wraps all data at the inventory level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Duplicates are not allowed (by .isSameMedicine comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class Inventory implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final UniqueMedicineList medicines;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final InvalidationListenerManager invalidationListenerManager \u003d new InvalidationListenerManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicines \u003d new UniqueMedicineList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Inventory() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Creates an Inventory using the Medicines in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Inventory(ReadOnlyInventory toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Replaces the contents of the medicine list with {@code medicines}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code medicines} must not contain duplicate medicines."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicines(List\u003cMedicine\u003e medicines) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.medicines.setMedicines(medicines);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Resets the existing data of this {@code Inventory} with {@code newData}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void resetData(ReadOnlyInventory newData) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        setMedicines(newData.getMedicineList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    //// medicine-level operations"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if a medicine with the same identity as {@code medicine} exists in the inventory."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean hasMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(medicine);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return medicines.contains(medicine);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Adds a medicine to the inventory."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The medicine must not already exist in the inventory."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void addMedicine(Medicine p) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicines.add(p);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Replaces the given medicine {@code target} in the list with {@code editedMedicine}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code target} must exist in the inventory."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The identity of {@code editedMedicine} must not be the same as another existing medicine in the inventory."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine(Medicine target, Medicine editedMedicine) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(editedMedicine);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicines.setMedicine(target, editedMedicine);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Removes {@code key} from this {@code Inventory}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code key} must exist in the inventory."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void removeMedicine(Medicine key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicines.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.addListener(listener);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.removeListener(listener);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Notifies listeners that the inventory has been modified."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void indicateModified() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidationListenerManager.callListeners(this);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return medicines.asUnmodifiableObservableList().size() + \" medicines\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ObservableList\u003cMedicine\u003e getMedicineList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return medicines.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Sorts medicine list according to given comparator."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param comparator"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @return unmodifiable sorted view of the medicine list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public ObservableList\u003cMedicine\u003e getSortedMedicineList(Comparator\u003cMedicine\u003e comparator) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return new SortedList\u003c\u003e(medicines.asUnmodifiableObservableList(), comparator);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof Inventory // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 medicines.equals(((Inventory) other).medicines));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return medicines.hashCode();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 43,
      "-": 101,
      "flxffy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.WarningPanelSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Default {@code Threshold} used for expiry */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    Threshold DEFAULT_EXPIRY_THRESHOLD \u003d new Threshold(Integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            .toString(WarningPanelSettings.DEFAULT_EXPIRY_THRESHOLD_VALUE), WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Default {@code Threshold} used for low stock */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    Threshold DEFAULT_LOW_STOCK_THRESHOLD \u003d new Threshold(Integer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            .toString(WarningPanelSettings.DEFAULT_LOW_STOCK_THRESHOLD_VALUE), WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Predicate\u003cMedicine\u003e PREDICATE_SHOW_ALL_MEDICINES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns the user prefs\u0027 WarningPanel settings."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    WarningPanelSettings getWarningPanelSettings();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Configures up warning panel thresholds with thresholds from userPrefs."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    void configureWarningPanelLists();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    void setWarningPanelSettings(WarningPanelSettings warningPanelSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the user prefs\u0027 InformationPanel settings as a ReadOnlyProperty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ReadOnlyProperty\u003cInformationPanelSettings\u003e getInformationPanelSettings();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the user prefs\u0027 InformationPanel settings."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void setInformationPanelSettings(InformationPanelSettings informationPanelSettings);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void setInventoryFilePath(Path inventoryFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Replaces inventory data with the data in {@code inventory}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void setInventory(ReadOnlyInventory inventory);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /** Returns the Inventory */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if a medicine with the same identity as {@code medicine} exists in the inventory."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    boolean hasMedicine(Medicine medicine);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Deletes the given medicine."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The medicine must exist in the inventory."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void deleteMedicine(Medicine target);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Adds the given medicine."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code medicine} must not already exist in the inventory."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void addMedicine(Medicine medicine);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Replaces the given medicine {@code target} with {@code editedMedicine}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code target} must exist in the inventory."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The identity of {@code editedMedicine} must not be the same as another existing medicine in the inventory."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void setMedicine(Medicine target, Medicine editedMedicine);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Returns predicates used by the warning panel */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    WarningPanelPredicateAccessor getWarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered medicine list to be used for the medicine panel */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ObservableList\u003cMedicine\u003e getFilteredMedicineList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered medicine list for expiry date warning */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    ObservableList\u003cMedicine\u003e getExpiringMedicinesList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered medicine list for low stock warning */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    ObservableList\u003cMedicine\u003e getLowStockMedicinesList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Updates the filter of the filtered medicine list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void updateFilteredMedicineList(Predicate\u003cMedicine\u003e predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Updates the filter of the medicine list filtered by expiry date by the give {@code predicate}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    void updateFilteredExpiringMedicineList(Predicate\u003cMedicine\u003e predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Updates the filter of the medicine list filtered by quantity by the give {@code predicate}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    void updateFilteredLowStockMedicineList(Predicate\u003cMedicine\u003e predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if the model has previous inventory states to restore."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    boolean canUndoInventory();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if the model has undone inventory states to restore."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    boolean canRedoInventory();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Restores the model\u0027s inventory to its previous state."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void undoInventory();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Restores the model\u0027s inventory to its previously undone state."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void redoInventory();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Saves the current inventory state for undo/redo."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void commitInventory();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Selected medicine in the filtered medicine list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * null if no medicine is selected."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ReadOnlyProperty\u003cMedicine\u003e selectedMedicineProperty();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the selected medicine in the filtered medicine list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * null if no medicine is selected."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Medicine getSelectedMedicine();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the selected medicine in the filtered medicine list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void setSelectedMedicine(Medicine medicine);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Changes threshold used in warning panel list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    void changeWarningPanelListThreshold(WarningPanelPredicateType type, Threshold threshold);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns current threshold used in warning panel, based on type requested."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    Threshold getWarningPanelThreshold(WarningPanelPredicateType type);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 47,
      "-": 101,
      "flxffy": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.WarningPanelSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.exceptions.MedicineNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineExpiryThresholdPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineLowStockThresholdPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents the in-memory model of the inventory data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Comparator\u003cMedicine\u003e comparator \u003d Comparator.naturalOrder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final VersionedInventory versionedInventory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final WarningPanelPredicateAccessor warningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final FilteredList\u003cMedicine\u003e filteredMedicines;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final FilteredList\u003cMedicine\u003e medicinesExpiring;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final FilteredList\u003cMedicine\u003e medicinesLowStock;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final SimpleObjectProperty\u003cMedicine\u003e selectedMedicine \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final SimpleObjectProperty\u003cInformationPanelSettings\u003e informationPanelSettings \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Initializes a ModelManager with the given inventory and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ModelManager(ReadOnlyInventory inventory, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireAllNonNull(inventory, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        logger.fine(\"Initializing with inventory: \" + inventory + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory \u003d new VersionedInventory(inventory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        filteredMedicines \u003d new FilteredList\u003c\u003e(versionedInventory.getSortedMedicineList(comparator));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        filteredMedicines.addListener(this::ensureSelectedMedicineIsValid);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningPanelPredicateAccessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicinesExpiring \u003d new FilteredList\u003c\u003e(versionedInventory.getSortedMedicineList(comparator));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicinesLowStock \u003d new FilteredList\u003c\u003e(versionedInventory.getSortedMedicineList(comparator));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        configureWarningPanelLists();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelSettings.setValue(userPrefs.getInformationPanelSettings());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this(new Inventory(), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanelSettings getWarningPanelSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return userPrefs.getWarningPanelSettings();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setWarningPanelSettings(WarningPanelSettings warningPanelSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(warningPanelSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        userPrefs.setWarningPanelSettings(warningPanelSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void configureWarningPanelLists() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningPanelPredicateAccessor"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    .updateMedicineExpiringThreshold(userPrefs.getWarningPanelSettings().getExpiryThresholdValue());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningPanelPredicateAccessor"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    .updateBatchExpiringThreshold(userPrefs.getWarningPanelSettings().getExpiryThresholdValue());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } catch (IllegalArgumentException ie) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            // last threshold set was maximum for medicines expiring on 31/12/9999, but from a different start date"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningPanelPredicateAccessor.updateMedicineExpiringThreshold(Threshold.MAX_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningPanelPredicateAccessor.updateBatchExpiringThreshold(Threshold.MAX_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            setWarningPanelSettings(new WarningPanelSettings("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    Threshold.MAX_EXPIRY_THRESHOLD, userPrefs.getWarningPanelSettings().getLowStockThresholdValue()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningPanelPredicateAccessor"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    .updateMedicineLowStockThreshold(userPrefs.getWarningPanelSettings().getLowStockThresholdValue());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            updateFilteredExpiringMedicineList(warningPanelPredicateAccessor.getMedicineExpiryPredicate());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            updateFilteredLowStockMedicineList(warningPanelPredicateAccessor.getMedicineLowStockPredicate());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setInformationPanelSettings(InformationPanelSettings informationPanelSettings) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(informationPanelSettings);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userPrefs.setInformationPanelSettings(informationPanelSettings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.informationPanelSettings.setValue(informationPanelSettings);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ReadOnlyProperty\u003cInformationPanelSettings\u003e getInformationPanelSettings() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return informationPanelSettings;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return userPrefs.getInventoryFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userPrefs.setInventoryFilePath(inventoryFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setInventory(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.resetData(inventory);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return versionedInventory;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean hasMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(medicine);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return versionedInventory.hasMedicine(medicine);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void deleteMedicine(Medicine target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.removeMedicine(target);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void addMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.addMedicine(medicine);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine(Medicine target, Medicine editedMedicine) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireAllNonNull(target, editedMedicine);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.setMedicine(target, editedMedicine);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Medicine List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Medicine} backed by the internal list of"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code versionedInventory}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ObservableList\u003cMedicine\u003e getFilteredMedicineList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return filteredMedicines;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public ObservableList\u003cMedicine\u003e getExpiringMedicinesList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return medicinesExpiring;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public ObservableList\u003cMedicine\u003e getLowStockMedicinesList() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return medicinesLowStock;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanelPredicateAccessor getWarningPanelPredicateAccessor() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return warningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void updateFilteredMedicineList(Predicate\u003cMedicine\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        filteredMedicines.setPredicate(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void updateFilteredExpiringMedicineList(Predicate\u003cMedicine\u003e predicate) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        medicinesExpiring.setPredicate(predicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void updateFilteredLowStockMedicineList(Predicate\u003cMedicine\u003e predicate) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        medicinesLowStock.setPredicate(predicate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean canUndoInventory() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return versionedInventory.canUndo();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean canRedoInventory() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return versionedInventory.canRedo();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void undoInventory() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void redoInventory() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.redo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void commitInventory() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Selected medicine \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ReadOnlyProperty\u003cMedicine\u003e selectedMedicineProperty() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return selectedMedicine;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Medicine getSelectedMedicine() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return selectedMedicine.getValue();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setSelectedMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (medicine !\u003d null \u0026\u0026 !filteredMedicines.contains(medicine)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new MedicineNotFoundException();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        selectedMedicine.setValue(medicine);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Ensures {@code selectedMedicine} is a valid medicine in {@code filteredMedicines}."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void ensureSelectedMedicineIsValid(ListChangeListener.Change\u003c? extends Medicine\u003e change) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        while (change.next()) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (selectedMedicine.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                // null is always a valid selected medicine, so we do not need to check that it is valid anymore."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            boolean wasSelectedMedicineReplaced \u003d change.wasReplaced() \u0026\u0026 change.getAddedSize()"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u003d\u003d change.getRemovedSize() \u0026\u0026 change.getRemoved().contains(selectedMedicine.getValue());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (wasSelectedMedicineReplaced) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                // Update selectedMedicine to its new value."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                int index \u003d change.getRemoved().indexOf(selectedMedicine.getValue());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                selectedMedicine.setValue(change.getAddedSubList().get(index));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            boolean wasSelectedMedicineRemoved \u003d change.getRemoved().stream()"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    .anyMatch(removedMedicine -\u003e selectedMedicine.getValue().isSameMedicine(removedMedicine));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (wasSelectedMedicineRemoved) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                // Select the medicine that came before it in the list,"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                // or clear the selection if there is no such medicine."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                selectedMedicine.setValue(change.getFrom() \u003e 0 ? change.getList().get(change.getFrom() - 1) : null);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Warning Panel \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void changeWarningPanelListThreshold(WarningPanelPredicateType type, Threshold threshold) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        int thresholdValue \u003d threshold.getNumericValue();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (type.equals(WarningPanelPredicateType.EXPIRY)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            updateFilteredExpiringMedicineList(new MedicineExpiryThresholdPredicate(threshold));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningPanelPredicateAccessor.updateMedicineExpiringThreshold(thresholdValue);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningPanelPredicateAccessor.updateBatchExpiringThreshold(thresholdValue);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            // update user prefs"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            setWarningPanelSettings(new WarningPanelSettings("
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    thresholdValue, warningPanelPredicateAccessor.getLowStockThreshold().getNumericValue()));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            // WarningPanelPredicateType.LOW_STOCK"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            updateFilteredLowStockMedicineList(new MedicineLowStockThresholdPredicate(threshold));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningPanelPredicateAccessor.updateMedicineLowStockThreshold(thresholdValue);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            // update user prefs"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            setWarningPanelSettings(new WarningPanelSettings("
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    warningPanelPredicateAccessor.getExpiryThreshold().getNumericValue(), thresholdValue));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Threshold getWarningPanelThreshold(WarningPanelPredicateType type) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (type.equals(WarningPanelPredicateType.EXPIRY)) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return warningPanelPredicateAccessor.getExpiryThreshold();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            // WarningPanelPredicateType.LOW_STOCK"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return warningPanelPredicateAccessor.getLowStockThreshold();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return versionedInventory.equals(other.versionedInventory)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 warningPanelPredicateAccessor.equals(other.warningPanelPredicateAccessor)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 filteredMedicines.equals(other.filteredMedicines)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 medicinesExpiring.equals(other.medicinesExpiring)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 medicinesLowStock.equals(other.medicinesLowStock)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 Objects.equals(selectedMedicine.get(), other.selectedMedicine.get());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 93,
      "-": 171,
      "flxffy": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInventory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.Observable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Unmodifiable view of an inventory"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public interface ReadOnlyInventory extends Observable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns an unmodifiable view of the medicines list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * This list will not contain any duplicate medicines."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    ObservableList\u003cMedicine\u003e getMedicineList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns a sorted, unmodifiable view of the medicines list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * This list will not contain any duplicate medicines."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    ObservableList\u003cMedicine\u003e getSortedMedicineList(Comparator\u003cMedicine\u003e comparator);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 6,
      "-": 12,
      "flxffy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.WarningPanelSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    WarningPanelSettings getWarningPanelSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    InformationPanelSettings getInformationPanelSettings();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 3,
      "-": 16,
      "flxffy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.WarningPanelSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private WarningPanelSettings warningPanelSettings \u003d new WarningPanelSettings();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private InformationPanelSettings informationPanelSettings \u003d new InformationPanelSettings();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Path inventoryFilePath \u003d Paths.get(\"data\" , \"MediTabs.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        setInventoryFilePath(newUserPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        setWarningPanelSettings(newUserPrefs.getWarningPanelSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        setInformationPanelSettings(newUserPrefs.getInformationPanelSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanelSettings getWarningPanelSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return warningPanelSettings;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setWarningPanelSettings(WarningPanelSettings warningPanelSettings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(warningPanelSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.warningPanelSettings \u003d warningPanelSettings;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InformationPanelSettings getInformationPanelSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return informationPanelSettings;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setInformationPanelSettings(InformationPanelSettings informationPanelSettings) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(informationPanelSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.informationPanelSettings \u003d informationPanelSettings;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return inventoryFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.inventoryFilePath \u003d inventoryFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 inventoryFilePath.equals(o.inventoryFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return Objects.hash(guiSettings, inventoryFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        sb.append(\"\\nWarning Panel Settings : \" + warningPanelSettings);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sb.append(\"\\nInformation Panel Settings : \" + informationPanelSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + inventoryFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 23,
      "-": 81,
      "flxffy": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedInventory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * {@code Inventory} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class VersionedInventory extends Inventory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final List\u003cReadOnlyInventory\u003e inventoryStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public VersionedInventory(ReadOnlyInventory initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventoryStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventoryStateList.add(new Inventory(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Saves a copy of the current {@code Inventory} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventoryStateList.add(new Inventory(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        indicateModified();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventoryStateList.subList(currentStatePointer + 1, inventoryStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Restores the inventory to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        resetData(inventoryStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Restores the inventory to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        resetData(inventoryStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if {@code undo()} has inventory states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if {@code redo()} has inventory states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return currentStatePointer \u003c inventoryStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!(other instanceof VersionedInventory)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory otherVersionedInventory \u003d (VersionedInventory) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return super.equals(otherVersionedInventory)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 inventoryStateList.equals(otherVersionedInventory.inventoryStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedInventory.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            super(\"Current state pointer at start of InventoryState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            super(\"Current state pointer at end of InventoryState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/Batch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents a batch of medicine."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class Batch {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final BatchNumber batchNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Expiry expiry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Constructs a {@code Batch}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Batch(BatchNumber batchNumber, Quantity quantity, Expiry expiry) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireAllNonNull(batchNumber, expiry, quantity);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batchNumber \u003d batchNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.expiry \u003d expiry;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchNumber getBatchNumber() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return batchNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Expiry getExpiry() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return expiry;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof Batch // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 batchNumber.equals(((Batch) other).batchNumber)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 quantity.equals(((Batch) other).quantity))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 expiry.equals(((Batch) other).expiry); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return Objects.hash(batchNumber, quantity, expiry);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        builder.append(\"Batch No.: \")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(getBatchNumber())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(getQuantity())"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(\" Expiry: \")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(getExpiry());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/BatchNumber.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents the identification number of a Batch."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBatchNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class BatchNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int MAX_LENGTH_BATCHNUMBER \u003d 30;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Batch number may contain alphanumeric characters, \u0027-\u0027, and\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \" spaces.\\nIt should start with an alphanumeric character and should not be blank\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Max length: \" + MAX_LENGTH_BATCHNUMBER + \" characters.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} -]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public final String batchNumber;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param batchNumber A valid batch number."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchNumber(String batchNumber) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(batchNumber);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        checkArgument(isValidBatchNumber(batchNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batchNumber \u003d batchNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if a given string is a valid batch number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static boolean isValidBatchNumber(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_LENGTH_BATCHNUMBER;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return batchNumber;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof BatchNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 batchNumber.equals(((BatchNumber) other).batchNumber)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return batchNumber.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/Company.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents the Company that the Medicine in the inventory was purchased from."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCompany(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class Company implements Comparable\u003cCompany\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int MAX_LENGTH_COMPANY \u003d 40;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Company names can take any values, and it should not be blank\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Max length: \" + MAX_LENGTH_COMPANY + \" characters.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The first character of the company name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public final String companyName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Constructs a {@code Company}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param company A valid company name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Company(String company) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(company);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        checkArgument(isValidCompany(company), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        companyName \u003d company;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if a given string is a valid company name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static boolean isValidCompany(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_LENGTH_COMPANY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int compareTo(Company other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this.companyName.compareToIgnoreCase(other.companyName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return companyName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof Company // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 companyName.equals(((Company) other).companyName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return companyName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 27,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/Expiry.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents the expiry date of a batch Medicine in the inventory."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class Expiry implements Comparable\u003cExpiry\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final LocalDate MAX_DATE \u003d parseRawDate(\"31/12/9999\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final int MAX_DAYS_TO_EXPIRY \u003d (int) ChronoUnit.DAYS.between(LocalDate.now(), MAX_DATE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            \"Expiry date should be of the format dd/mm/yyyy and should be a valid date before \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + MAX_DATE.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\")) + \".\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"All dates after will be considered invalid.\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final LocalDate expiryDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Constructs an {@code Expiry}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param expiry A valid expiry date."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Expiry(String expiry) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(expiry);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        checkArgument(isValidDate(expiry), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (expiry.equals(\"-\")) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            this.expiryDate \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            this.expiryDate \u003d parseRawDate(expiry);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns if a given string is a valid expiry."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (test.equals(\"-\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            LocalDate parsed \u003d parseRawDate(test);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            if (parsed.isAfter(MAX_DATE)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static LocalDate parseRawDate(String expiry) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return LocalDate.parse(expiry, DateTimeFormatter.ofPattern(\"d/M/uuuu\").withResolverStyle(ResolverStyle.STRICT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public LocalDate getExpiryDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return this.expiryDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean isExpired() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this.expiryDate.compareTo(LocalDate.now()) \u003c 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int compareTo(Expiry o) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        LocalDate date1 \u003d this.expiryDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        LocalDate date2 \u003d o.getExpiryDate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (date1 \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else if (date2 \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return date1.compareTo(date2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (this.expiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return \"-\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return expiryDate.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (other instanceof Expiry) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            if (expiryDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                return ((Expiry) other).getExpiryDate() \u003d\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                return expiryDate.equals(((Expiry) other).getExpiryDate());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return expiryDate.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 60,
      "flxffy": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/Medicine.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents a Medicine in the inventory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class Medicine implements Comparable\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    // Limits"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int MAX_SIZE_TAG \u003d 10;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int MAX_SIZE_BATCH \u003d 100000;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TAGS \u003d \"Too many tags. Max number of tags: \" + MAX_SIZE_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_BATCHES \u003d \"Too many batches. Max number of batches: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + MAX_SIZE_BATCH;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Company company;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Quantity totalQuantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Expiry nextExpiry;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Map\u003cBatchNumber, Batch\u003e batches \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Medicine(Name name, Company company, Quantity quantity, Expiry expiry, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Map\u003cBatchNumber, Batch\u003e batches) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireAllNonNull(name, company, quantity, expiry, tags, batches);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        checkArgument(isWithinLimits(tags, MAX_SIZE_TAG), MESSAGE_CONSTRAINTS_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        checkArgument(isWithinLimits(batches.keySet(), MAX_SIZE_BATCH), MESSAGE_CONSTRAINTS_BATCHES);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.totalQuantity \u003d quantity;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.nextExpiry \u003d expiry;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batches.putAll(batches);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private boolean isWithinLimits(Set\u003c?\u003e set, int limit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return set.size() \u003c\u003d limit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Company getCompany() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return company;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Quantity getTotalQuantity() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return totalQuantity;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Expiry getNextExpiry() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return nextExpiry;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns an immutable batch map, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Map\u003cBatchNumber, Batch\u003e getBatches() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return Collections.unmodifiableMap(batches);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public FilteredList\u003cBatch\u003e getFilteredBatch(Predicate\u003cBatch\u003e predicate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        ObservableList\u003cBatch\u003e batches \u003d FXCollections.observableArrayList(getBatches().values());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return batches.filtered(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int compareTo(Medicine other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (getName().compareTo(other.getName()) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return getCompany().compareTo(other.getCompany());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return getName().compareTo(other.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if both medicines of the same name were purchased from the same company."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * This defines a weaker notion of equality between two medicines."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean isSameMedicine(Medicine otherMedicine) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (otherMedicine \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return otherMedicine !\u003d null"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 otherMedicine.getName().equals(getName())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 (otherMedicine.getCompany().equals(getCompany()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if both medicines have the same identity and data fields."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * This defines a stronger notion of equality between two medicines."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!(other instanceof Medicine)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine otherMedicine \u003d (Medicine) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return otherMedicine.getName().equals(getName())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 otherMedicine.getCompany().equals(getCompany())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 otherMedicine.getTotalQuantity().equals(getTotalQuantity())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 otherMedicine.getNextExpiry().equals(getNextExpiry())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 otherMedicine.getTags().equals(getTags())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 otherMedicine.getBatches().equals(getBatches());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return Objects.hash(name, company, totalQuantity, nextExpiry, tags, batches);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(\" Company: \")"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(getCompany())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(\" Total quantity: \")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(getTotalQuantity())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(\" Next expiry: \")"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .append(getNextExpiry())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        builder.append(\" Batches: \").append(getBatches().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 76,
      "-": 73,
      "flxffy": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents a Medicine\u0027s name in the inventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class Name implements Comparable\u003cName\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int MAX_LENGTH_NAME \u003d 40;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Names may contain alphanumeric characters, \u0027-\u0027, \u0027%\u0027, \u0027(\u0027, \u0027)\u0027,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"  and spaces. It should start with an alphanumeric character and should not be blank.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Max length: \" + MAX_LENGTH_NAME + \" characters.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}()% -]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_LENGTH_NAME;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public int compareTo(Name other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return this.fullName.compareToIgnoreCase(other.fullName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 9,
      "-": 50,
      "flxffy": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/Quantity.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents the quantity of a Medicine in the inventory."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class Quantity implements Comparable\u003cQuantity\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int MAX_QUANTITY \u003d 1000000000;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final int MIN_QUANTITY \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Quantity should only contain positive whole numbers. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Max Quantity is \" + MAX_QUANTITY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final int value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param quantity A valid quantity."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Quantity(String quantity) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        value \u003d Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if a given string is a valid quantity."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static boolean isValidQuantity(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return Integer.parseInt(test) \u003c\u003d MAX_QUANTITY"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(test) \u003e\u003d MIN_QUANTITY"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    \u0026\u0026 test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns quantity as an int"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int getNumericValue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Quantity) other).value); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int compareTo(Quantity other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return Integer.compare(getNumericValue(), other.getNumericValue());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this.toString().hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 68,
      "flxffy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/UniqueMedicineList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.exceptions.DuplicateMedicineException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.exceptions.MedicineNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A list of medicines that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A medicine is considered unique by comparing using {@code Medicine#isSameMedicine(Medicine)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * As such, adding and updating of medicines uses Medicine#isSameMedicine(Medicine) for equality so as to ensure that"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * the medicine being added or updated is unique in terms of identity in the UniqueMedicineList. However, the removal"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * of a medicine uses Medicine#equals(Object) so as to ensure that the medicine with exactly the same fields will be"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * @see Medicine#isSameMedicine(Medicine)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UniqueMedicineList implements Iterable\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final ObservableList\u003cMedicine\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final ObservableList\u003cMedicine\u003e internalListSorted \u003d new SortedList\u003c\u003e(internalList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Comparator.naturalOrder());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final ObservableList\u003cMedicine\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if the list contains an equivalent medicine as the given argument."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean contains(Medicine toCheck) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameMedicine);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Adds a medicine to the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The medicine must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void add(Medicine toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new DuplicateMedicineException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Replaces the medicine {@code target} in the list with {@code editedMedicine}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The medicine identity of {@code editedMedicine} must not be the same as another existing medicine in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine(Medicine target, Medicine editedMedicine) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireAllNonNull(target, editedMedicine);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new MedicineNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!target.isSameMedicine(editedMedicine) \u0026\u0026 contains(editedMedicine)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new DuplicateMedicineException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        internalList.set(index, editedMedicine);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Removes the equivalent medicine from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * The medicine must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void remove(Medicine toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new MedicineNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicines(UniqueMedicineList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Replaces the contents of this list with {@code medicines}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code medicines} must not contain duplicate medicines."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicines(List\u003cMedicine\u003e medicines) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireAllNonNull(medicines);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!medicinesAreUnique(medicines)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new DuplicateMedicineException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        internalList.setAll(medicines);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ObservableList\u003cMedicine\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Iterator\u003cMedicine\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return internalListSorted.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof UniqueMedicineList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        \u0026\u0026 internalListSorted.equals(((UniqueMedicineList) other).internalListSorted));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return internalListSorted.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if {@code medicines} contains only unique medicines."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private boolean medicinesAreUnique(List\u003cMedicine\u003e medicines) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c medicines.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            for (int j \u003d i + 1; j \u003c medicines.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                if (medicines.get(i).isSameMedicine(medicines.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/exceptions/DuplicateMedicineException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Signals that the operation will result in duplicate Medicines (Medicines are considered duplicates if they have the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class DuplicateMedicineException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public DuplicateMedicineException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        super(\"Operation would result in duplicate medicines\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/exceptions/MedicineNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Signals that the operation is unable to find the specified medicine."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/predicates/BatchContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Tests that a {@code Medicine}\u0027s {@code Batch} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class BatchContainsKeywordsPredicate implements Predicate\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean test(Medicine medicine) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (Batch batch: medicine.getBatches().values()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (keywords.stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(batch.getBatchNumber()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                            .batchNumber, keyword))) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof BatchContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 keywords.equals(((BatchContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/predicates/BatchExpiryThresholdPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.model.medicine.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Tests if {@code Batch} has expired or is expiring soon based on its {@code Expiry} and given threshold."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class BatchExpiryThresholdPredicate implements Predicate\u003cBatch\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final Threshold threshold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public BatchExpiryThresholdPredicate(Threshold threshold) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean test(Batch batch) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return calculateDaysToExpiry(batch) \u003c\u003d threshold.getNumericValue();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                || (other instanceof BatchExpiryThresholdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 threshold.equals(((BatchExpiryThresholdPredicate) other).threshold)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Threshold getThreshold() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return threshold;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Calculates and returns number of days from batch\u0027s expiry date to today."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param batch"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private float calculateDaysToExpiry(Batch batch) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return ChronoUnit.DAYS.between(LocalDate.now(), batch.getExpiry().getExpiryDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/predicates/CompanyContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Tests that a {@code Medicine}\u0027s {@code Company} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class CompanyContainsKeywordsPredicate implements Predicate\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public CompanyContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean test(Medicine medicine) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(medicine.getCompany().companyName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof CompanyContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 keywords.equals(((CompanyContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/predicates/MedicineExpiryThresholdPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.model.medicine.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Tests if {@code Medicine} has expired or is expiring soon based on its {@code Expiry} and given threshold."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class MedicineExpiryThresholdPredicate implements Predicate\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final Threshold threshold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public MedicineExpiryThresholdPredicate(Threshold threshold) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean test(Medicine medicine) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return medicine.getNextExpiry().getExpiryDate() !\u003d null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 calculateDaysToExpiry(medicine) \u003c\u003d threshold.getNumericValue();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                || (other instanceof MedicineExpiryThresholdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 threshold.equals(((MedicineExpiryThresholdPredicate) other).threshold)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Threshold getThreshold() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return threshold;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Calculates and returns number of days from batch\u0027s expiry date to today."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param medicine"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private float calculateDaysToExpiry(Medicine medicine) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return ChronoUnit.DAYS.between(LocalDate.now(), medicine.getNextExpiry().getExpiryDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/predicates/MedicineLowStockThresholdPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.model.medicine.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Tests that a {@code Medicine}\u0027s {@code Quantity} is less than the threshold given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class MedicineLowStockThresholdPredicate implements Predicate\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final Threshold threshold;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public MedicineLowStockThresholdPredicate(Threshold threshold) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.threshold \u003d threshold;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean test(Medicine medicine) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return medicine.getTotalQuantity().getNumericValue() \u003c\u003d threshold.getNumericValue();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                || (other instanceof MedicineLowStockThresholdPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 threshold.equals(((MedicineLowStockThresholdPredicate) other).threshold)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Threshold getThreshold() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return threshold;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/predicates/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Tests that a {@code Medicine}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean test(Medicine medicine) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(medicine.getName().fullName, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/medicine/predicates/TagContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Tests that a {@code Medicine}\u0027s {@code Tag} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean test(Medicine medicine) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (Tag tag: medicine.getTags()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (keywords.stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword))) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents a Tag in the inventory list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int MAX_LENGTH_TAG \u003d 25; // To fit on screen"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            + \"Max length: \" + MAX_LENGTH_TAG + \" characters.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 test.length() \u003c\u003d MAX_LENGTH_TAG;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public String toStringUpperCase() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return \u0027[\u0027 + tagName.toUpperCase() + \u0027]\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 5,
      "JonathanLeeWH": 4,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/threshold/Threshold.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.model.threshold;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Represents the threshold of a Medicine or Batch predicate."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidThreshold(String, WarningPanelPredicateType)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class Threshold {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final int MIN_THRESHOLD \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final int MAX_QUANTITY_THRESHOLD \u003d Quantity.MAX_QUANTITY + 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final int MAX_EXPIRY_THRESHOLD \u003d Expiry.MAX_DAYS_TO_EXPIRY + 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            \"Threshold should only contain positive integers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"Maximum threshold for expiry: \" + MAX_EXPIRY_THRESHOLD + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            + \"Maximum threshold for quantity: \" + MAX_QUANTITY_THRESHOLD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Constructs a {@code Threshold}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param threshold A valid threshold."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public Threshold(String threshold, WarningPanelPredicateType type) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        requireNonNull(threshold);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        checkArgument(isValidThreshold(threshold, type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.value \u003d threshold;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns true if a given string is a valid quantity."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static boolean isValidThreshold(String test, WarningPanelPredicateType type) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return test.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(test) \u003e\u003d MIN_THRESHOLD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    \u0026\u0026 Integer.parseInt(test) \u003c\u003d (type.equals(WarningPanelPredicateType.EXPIRY)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        ? MAX_EXPIRY_THRESHOLD : MAX_QUANTITY_THRESHOLD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns threshold as an int"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public int getNumericValue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                || (other instanceof Threshold // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 value.equals(((Threshold) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Contains utility methods for populating {@code Inventory} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static Medicine[] getSampleMedicines() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Medicine[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new Medicine(new Name(\"Aspirin\"), new Company(\"Otsuka Pharmaceutical Co.\"), new Quantity(\"27\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    new Expiry(\"29/11/2019\"), getTagSet(\"fever\"), getBatchSet(\"CD485\", \"27\", \"29/11/2019\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new Medicine(new Name(\"Atorvastatin\"), new Company(\"Mitsubishi Tanabe Pharma\"), new Quantity(\"39\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    new Expiry(\"31/12/2019\"), getTagSet(\"cardiovascular\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    getBatchSet(\"BAL101025\", \"39\", \"31/12/2019\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new Medicine(new Name(\"Bendroflumethiazide\"), new Company(\"Piramal Healthcare\"), new Quantity(\"52\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    new Expiry(\"03/10/2019\"), getTagSet(\"hypertension\", \"tablet\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    getBatchSet(\"1001194\", \"52\", \"03/10/2019\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new Medicine(new Name(\"Co-codamol\"), new Company(\"Renovo PLC\"), new Quantity(\"28\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    new Expiry(\"28/02/2020\"), getTagSet(\"painkiller\"), getBatchSet(\"HK-85412\", \"28\", \"28/02/2020\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new Medicine(new Name(\"Omeprazole\"), new Company(\"Eli Lilly and Company\"), new Quantity(\"121\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    new Expiry(\"02/07/2019\"), getTagSet(\"gastroesophageal\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    getBatchSet(\"A4415115698\", \"21\", \"02/07/2019\", \"A4415118456\", \"100\", \"22/09/2019\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new Medicine(new Name(\"Simvastatin\"), new Company(\"Vion Pharmaceuticals, Inc.\"), new Quantity(\"41\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    new Expiry(\"16/09/2019\"), getTagSet(\"lipid\"), getBatchSet(\"B5003B504\", \"41\", \"16/09/2019\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static ReadOnlyInventory getSampleInventory() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory sampleInv \u003d new Inventory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (Medicine sampleMedicine : getSampleMedicines()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            sampleInv.addMedicine(sampleMedicine);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return sampleInv;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a batch map containing the list of strings given."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static Map\u003cBatchNumber, Batch\u003e getBatchSet(String... strings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Map\u003cBatchNumber, Batch\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c strings.length; i +\u003d 3) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            BatchNumber batchNumber \u003d new BatchNumber(strings[i]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            map.put(batchNumber, new Batch(batchNumber, new Quantity(strings[i + 1]), new Expiry(strings[i + 2])));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 44,
      "-": 27,
      "flxffy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Inventory}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public interface InventoryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns Inventory data as a {@link ReadOnlyInventory}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see #getInventoryFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Saves the given {@link ReadOnlyInventory} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param inventory cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see #saveInventory(ReadOnlyInventory)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedBatch.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Jackson-friendly version of {@link Batch}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "class JsonAdaptedBatch {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Batches\u0027 %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final String batchNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final String expiry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Constructs a {@code JsonAdaptedBatch} with the given batch details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public JsonAdaptedBatch(@JsonProperty(\"batchNumber\") String batchNumber, @JsonProperty(\"quantity\") String quantity,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            @JsonProperty(\"expiry\") String expiry) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batchNumber \u003d batchNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.expiry \u003d expiry;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Converts a given {@code Batch} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public JsonAdaptedBatch(Batch source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batchNumber \u003d source.getBatchNumber().batchNumber;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        expiry \u003d source.getExpiry().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Converts this Jackson-friendly adapted batch object into the model\u0027s {@code Medicine} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted medicine."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Batch toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (batchNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    BatchNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!BatchNumber.isValidBatchNumber(batchNumber)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(BatchNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final BatchNumber modelBatchNumber \u003d new BatchNumber(batchNumber);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (expiry \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Expiry.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!Expiry.isValidDate(expiry)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(Expiry.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final Expiry modelExpiry \u003d new Expiry(expiry);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Batch(modelBatchNumber, modelQuantity, modelExpiry);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 77,
      "flxffy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMedicine.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Jackson-friendly version of {@link Medicine}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "class JsonAdaptedMedicine {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Medicine\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final String company;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final String totalQuantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final String nextExpiry;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final List\u003cJsonAdaptedBatch\u003e batches \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Constructs a {@code JsonAdaptedMedicine} with the given medicine details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public JsonAdaptedMedicine(@JsonProperty(\"name\") String name, @JsonProperty(\"company\") String company,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            @JsonProperty(\"totalQuantity\") String quantity, @JsonProperty(\"nextExpiry\") String expiry,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            @JsonProperty(\"batches\") List\u003cJsonAdaptedBatch\u003e batches) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.company \u003d company;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.totalQuantity \u003d quantity;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.nextExpiry \u003d expiry;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (batches !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            this.batches.addAll(batches);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Converts a given {@code Medicine} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public JsonAdaptedMedicine(Medicine source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        company \u003d source.getCompany().companyName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        totalQuantity \u003d source.getTotalQuantity().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        nextExpiry \u003d source.getNextExpiry().toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batches.addAll(source.getBatches().values()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .map(JsonAdaptedBatch::new)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Converts this Jackson-friendly adapted medicine object into the model\u0027s {@code Medicine} object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted medicine."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Medicine toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (company \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!Company.isValidCompany(company)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final Company modelCompany \u003d new Company(company);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (totalQuantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!Quantity.isValidQuantity(totalQuantity)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(totalQuantity);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (nextExpiry \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Expiry.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!Expiry.isValidDate(nextExpiry)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalValueException(Expiry.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final Expiry modelExpiry \u003d new Expiry(nextExpiry);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final List\u003cTag\u003e medicineTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            medicineTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final Map\u003cBatchNumber, Batch\u003e medicineBatches \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (JsonAdaptedBatch batch : batches) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Batch modelTypeBatch \u003d batch.toModelType();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            medicineBatches.put(modelTypeBatch.getBatchNumber(), modelTypeBatch);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(medicineTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Medicine(modelName, modelCompany, modelQuantity, modelExpiry, modelTags, medicineBatches);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 69,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInventoryStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A class to access Inventory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class JsonInventoryStorage implements InventoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventoryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public JsonInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return readInventory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Similar to {@link #readInventory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Optional\u003cJsonSerializableInventory\u003e jsonInventory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                filePath, JsonSerializableInventory.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!jsonInventory.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return Optional.of(jsonInventory.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Similar to {@link #saveInventory(ReadOnlyInventory)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventory(inventory), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInventory.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * An Immutable Inventory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "@JsonRootName(value \u003d \"Inventory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "class JsonSerializableInventory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MEDICINE \u003d \"Medicines list contains duplicate medicine(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final List\u003cJsonAdaptedMedicine\u003e medicines \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Constructs a {@code JsonSerializableInventory} with the given medicines."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public JsonSerializableInventory(@JsonProperty(\"medicines\") List\u003cJsonAdaptedMedicine\u003e medicines) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.medicines.addAll(medicines);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Converts a given {@code ReadOnlyInventory} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public JsonSerializableInventory(ReadOnlyInventory source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicines.addAll(source.getMedicineList().stream().map(JsonAdaptedMedicine::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Converts this inventory into the model\u0027s {@code Inventory} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Inventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (JsonAdaptedMedicine jsonAdaptedMedicine : medicines) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Medicine medicine \u003d jsonAdaptedMedicine.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (inventory.hasMedicine(medicine)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            inventory.addMedicine(medicine);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 24,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public interface Storage extends InventoryStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Manages storage of Inventory data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public StorageManager(InventoryStorage inventoryStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return inventoryStorage.getInventoryFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return readInventory(inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return inventoryStorage.readInventory(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        saveInventory(inventory, inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventoryStorage.saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 16,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BatchTable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortDirection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A ui for the BatchTable that is displayed in the information panel when a medicine is selected."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class BatchTable extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String BATCHTABLE_FOOTER_QUANTITY \u003d \"Total Quantity: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String BATCHTABLE_FOOTER_EXPIRY \u003d \"Next Expiry Date: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String FONT_SIZE_VERY_SMALL \u003d \"-fx-font-size: 12pt\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String FONT_SIZE_SMALL \u003d \"-fx-font-size: 15pt\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String FONT_SIZE_MEDIUM \u003d \"-fx-font-size: 20pt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int NAME_LENGTH_VERY_LONG \u003d 30;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int NAME_LENGTH_LONG \u003d 25;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final int NAME_LENGTH_MEDIUM \u003d 20;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String FXML \u003d \"BatchTable.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Label company;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Label expiry;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private TableView\u003cBatch\u003e table;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private TableColumn\u003cBatch, BatchNumber\u003e numberColumn;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private TableColumn\u003cBatch, Quantity\u003e quantityColumn;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private TableColumn\u003cBatch, Expiry\u003e expiryColumn;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchTable(Medicine selectedMedicine, InformationPanelSettings informationPanelSettings) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        setDescriptionTexts(selectedMedicine);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        setColumnWidth();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        populateTable(selectedMedicine);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sortTable(informationPanelSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        disableSortingByClicks(); // To prevent sorting without change to InformationPanelSettings"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void setDescriptionTexts(Medicine selectedMedicine) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        setNameText(selectedMedicine.getName().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        company.setText(selectedMedicine.getCompany().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantity.setText(BATCHTABLE_FOOTER_QUANTITY + selectedMedicine.getTotalQuantity().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiry.setText(BATCHTABLE_FOOTER_EXPIRY + selectedMedicine.getNextExpiry().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void setNameText(String medicineName) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (medicineName.length() \u003e NAME_LENGTH_VERY_LONG) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            name.setStyle(FONT_SIZE_VERY_SMALL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } else if (medicineName.length() \u003e NAME_LENGTH_LONG) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            name.setStyle(FONT_SIZE_SMALL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } else if (medicineName.length() \u003e NAME_LENGTH_MEDIUM) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            name.setStyle(FONT_SIZE_MEDIUM);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        name.setText(medicineName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void setColumnWidth() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        numberColumn.prefWidthProperty().bind(table.widthProperty().multiply(0.5));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantityColumn.prefWidthProperty().bind(table.widthProperty().multiply(0.24));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiryColumn.prefWidthProperty().bind(table.widthProperty().multiply(0.24));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Gets batch details from {@code selectedMedicine} and add them to the table."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void populateTable(Medicine selectedMedicine) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ObservableList\u003cBatch\u003e batches \u003d FXCollections.observableArrayList(selectedMedicine.getBatches().values());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        table.setItems(batches);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sorts the table depending on the {@code informationPanelSettings}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void sortTable(InformationPanelSettings informationPanelSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortProperty sortProperty \u003d informationPanelSettings.getSortProperty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortDirection sortDirection \u003d informationPanelSettings.getSortDirection();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        TableColumn\u003cBatch, ?\u003e column;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        switch (sortProperty) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case BATCHNUMBER:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            column \u003d numberColumn;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case QUANTITY:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            column \u003d quantityColumn;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case EXPIRY:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            column \u003d expiryColumn;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalArgumentException(\"Unknown sort property.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        switch (sortDirection) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case ASCENDING:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            column.setSortType(TableColumn.SortType.ASCENDING);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case DESCENDING:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            column.setSortType(TableColumn.SortType.DESCENDING);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalArgumentException(\"Unknown sort direction.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        table.getSortOrder().add(column);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void disableSortingByClicks() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        numberColumn.setSortable(false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantityColumn.setSortable(false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiryColumn.setSortable(false);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InformationPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * The Information Panel of the App."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InformationPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String FXML \u003d \"InformationPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private InformationPanelSettings informationPanelSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private StackPane informationPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InformationPanel(ObservableValue\u003cMedicine\u003e selectedMedicine,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            ObservableValue\u003cInformationPanelSettings\u003e settings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelSettings \u003d settings.getValue();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Load medicine information page when selected medicine changes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        selectedMedicine.addListener((observable, oldSelectMedicine, newSelectedMedicine) -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            display(newSelectedMedicine));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        settings.addListener((observable, oldSettings, newSettings) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            logger.fine(\"Batch table sorted by \" + newSettings);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            informationPanelSettings \u003d newSettings;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            display(selectedMedicine.getValue());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void display(Medicine medicine) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        emptyInformationPanel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showSelectedInformation(medicine);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Empties the information panel by deleting its children."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void emptyInformationPanel() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (informationPanel.getChildren() \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        logger.fine(\"Information panel emptied\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanel.getChildren().clear();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Creates a {@code BatchTable} with details from {@code medicine} to be displayed on the information panel."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void showSelectedInformation(Medicine medicine) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (medicine \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        logger.fine(\"Information panel displaying details of \" + medicine);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanel.getChildren().add(new BatchTable(medicine, informationPanelSettings).getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private InformationPanel informationPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private MedicineListPanel medicineListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private WarningPanel warningPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private StackPane informationPanelPlaceHolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private StackPane medicineListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private VBox warningPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanel \u003d new InformationPanel(logic.selectedMedicineProperty(), logic.getInformationPanelSetting());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelPlaceHolder.getChildren().add(informationPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineListPanel \u003d new MedicineListPanel(logic.getFilteredMedicineList(), logic.selectedMedicineProperty(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                logic::setSelectedMedicine);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineListPanelPlaceholder.getChildren().add(medicineListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningPanel \u003d new WarningPanel(logic.getExpiringMedicinesList(), logic.getLowStockMedicinesList(),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                logic.getWarningPanelPredicateAccessor());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningPanelPlaceholder.getChildren().add(warningPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getInventoryFilePath(), logic.getInventory());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand, logic.getHistory());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineListPanel getMedicineListPanel() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return medicineListPanel;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 12,
      "-": 190,
      "flxffy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MedicineCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * An UI component that displays information of a {@code Medicine}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String FXML \u003d \"MedicineListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public final Medicine medicine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Label company;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Label expiry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineCard(Medicine medicine, int displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.medicine \u003d medicine;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        name.setText(medicine.getName().fullName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        company.setText(medicine.getCompany().companyName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantity.setText(medicine.getTotalQuantity().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiry.setText(medicine.getNextExpiry().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicine.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!(other instanceof MedicineCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineCard card \u003d (MedicineCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 medicine.equals(card.medicine);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 19,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MedicineListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Panel containing the list of medicines."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String FXML \u003d \"MedicineListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(MedicineListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private ListView\u003cMedicine\u003e medicineListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineListPanel(ObservableList\u003cMedicine\u003e medicineList, ObservableValue\u003cMedicine\u003e selectedMedicine,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Consumer\u003cMedicine\u003e onSelectedMedicineChange) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineListView.setItems(medicineList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineListView.setCellFactory(listView -\u003e new MedicineListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineListView.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            logger.fine(\"Selection in medicine list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            onSelectedMedicineChange.accept(newValue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        selectedMedicine.addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            logger.fine(\"Selected medicine changed to: \" + newValue);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            // Don\u0027t modify selection if we are already selecting the selected medicine,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            // otherwise we would have an infinite loop."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (Objects.equals(medicineListView.getSelectionModel().getSelectedItem(), newValue)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (newValue \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                medicineListView.getSelectionModel().clearSelection();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                int index \u003d medicineListView.getItems().indexOf(newValue);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                medicineListView.scrollTo(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                medicineListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Medicine} using a {@code MedicineCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    class MedicineListViewCell extends ListCell\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        protected void updateItem(Medicine medicine, boolean empty) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            super.updateItem(medicine, empty);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (empty || medicine \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                setGraphic(new MedicineCard(medicine, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        resultDisplay.setWrapText(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 1,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label syncStatus;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public StatusBarFooter(Path saveLocation, ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.addListener(observable -\u003e updateSyncStatus());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates \"last updated\" status to the current time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void updateSyncStatus() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        syncStatus.setText(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/medicine_bottle_32.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 2,
      "-": 85,
      "flxffy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WarningCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * An UI component that displays information of a {@code Medicine}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final String FXML \u003d \"WarningListCard.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public final Medicine medicine;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private Label field;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private WarningPanelPredicateType type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningCard(Medicine medicine, int displayedIndex,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                       WarningPanelPredicateType listType,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                       WarningPanelPredicateAccessor warningPanelPredicateAccessor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.medicine \u003d medicine;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.type \u003d listType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        name.setText(medicine.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        switch (listType) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        case EXPIRY:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            FilteredList\u003cBatch\u003e filteredBatch \u003d medicine"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    .getFilteredBatch(warningPanelPredicateAccessor.getBatchExpiryPredicate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            field.setText(getFormattedBatch(filteredBatch));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        case LOW_STOCK:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            field.setText(String.format(\"Qty: %s\\n\", medicine.getTotalQuantity().toString()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanelPredicateType getType() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private String getFormattedBatch(FilteredList\u003cBatch\u003e filteredBatch) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String formatted \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        for (Batch batch: filteredBatch) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            formatted +\u003d String.format(\"%s [Exp: %s]\\n\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    batch.getBatchNumber().toString(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    batch.getExpiry().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return formatted;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Set style id for Text object(s)."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @param textHolders"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private void setStyle(ArrayList\u003cText\u003e textHolders) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // temporary fix to increase visibility"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        for (Text text : textHolders) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            text.setId(\"warningPanel\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (!(other instanceof WarningCard)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCard card \u003d (WarningCard) other;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                \u0026\u0026 medicine.equals(card.medicine);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "flxffy": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WarningListView.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Cell containing content of warning."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningListView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final String FXML \u003d \"WarningListView.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(WarningListView.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private ListView\u003cMedicine\u003e warningListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final WarningPanelPredicateType listType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final WarningPanelPredicateAccessor warningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningListView(ObservableList\u003cMedicine\u003e medicineList,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                           WarningPanelPredicateType listType,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                           WarningPanelPredicateAccessor warningPanelPredicateAccessor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.listType \u003d listType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.warningPanelPredicateAccessor \u003d warningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // placeholder if the list is empty"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningListView.setPlaceholder(new Label(\"Nothing to show\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningListView.setItems(medicineList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningListView.setCellFactory(listView -\u003e new WarningListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Medicine} using a {@code WarningCard}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    class WarningListViewCell extends ListCell\u003cMedicine\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        protected void updateItem(Medicine medicine, boolean empty) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            super.updateItem(medicine, empty);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            if (empty || medicine \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                setGraphic(new WarningCard(medicine, getIndex() + 1,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        listType, warningPanelPredicateAccessor).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WarningPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * A ui for the warning panel that is displayed at the right of the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final String FXML \u003d \"WarningPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(WarningPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final WarningPanelPredicateAccessor warningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private VBox warningVBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningPanel(ObservableList\u003cMedicine\u003e expiringMedicineList,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        ObservableList\u003cMedicine\u003e lowQuantityMedicineList,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        WarningPanelPredicateAccessor warningPanelPredicateAccessor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        this.warningPanelPredicateAccessor \u003d warningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        setUpVBox(expiringMedicineList, lowQuantityMedicineList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Sets up the VBox which holds the lists."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private void setUpVBox(ObservableList\u003cMedicine\u003e expiringMedicineList,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                            ObservableList\u003cMedicine\u003e lowStockMedicineList) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Label expiringListTitle \u003d new Label(String.format(\"%-34s\", \"Expiring Soon / Expired\")); //right-pad title"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        expiringListTitle.getStyleClass().add(\"label-warning-panel\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningVBox.getChildren().addAll(expiringListTitle,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new WarningListView(expiringMedicineList,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.EXPIRY, warningPanelPredicateAccessor).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Label lowQuantityListTitle \u003d new Label(String.format(\"%-40s\", \"Low in Stock\")); //right-pad title"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        lowQuantityListTitle.getStyleClass().add(\"label-warning-panel\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningVBox.getChildren().addAll(lowQuantityListTitle,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new WarningListView(lowStockMedicineList,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.LOW_STOCK, warningPanelPredicateAccessor).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 55
    }
  },
  {
    "path": "src/main/resources/view/BatchTable.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.scene.control.cell.PropertyValueFactory?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003cBorderPane fx:id \u003d \"batchTable\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            styleClass\u003d\"table-view\" minWidth\u003d\"400\" prefWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \u003ctop\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u003cVBox minWidth\u003d\"400\" prefWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003cLabel fx:id\u003d\"name\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"information-panel-header\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003cLabel fx:id\u003d\"company\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"label-information-panel\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u003cInsets left\u003d\"15.0\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \u003c/top\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u003cTableView fx:id\u003d\"table\" minWidth\u003d\"400\" prefWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003ccolumns\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u003cTableColumn fx:id \u003d \"numberColumn\" text\u003d\"Batch No.\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        \u003cPropertyValueFactory property\u003d\"batchNumber\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u003cTableColumn fx:id \u003d \"quantityColumn\" text\u003d\"Quantity\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        \u003cPropertyValueFactory property\u003d\"quantity\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u003cTableColumn fx:id \u003d \"expiryColumn\" text\u003d\"Expiry\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u003ccellValueFactory\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        \u003cPropertyValueFactory property\u003d\"expiry\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    \u003c/cellValueFactory\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u003c/TableColumn\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003c/columns\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u003c/TableView\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \u003cbottom\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u003cHBox fx:id\u003d\"footer\" alignment\u003d\"BOTTOM_CENTER\" spacing\u003d\"15.0\" minWidth\u003d\"400\" prefWidth\u003d\"400\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" alignment\u003d\"CENTER\" styleClass\u003d\"label-information-panel\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003cLabel fx:id\u003d\"expiry\" alignment\u003d\"CENTER\" styleClass\u003d\"label-information-panel\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \u003c/bottom\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c/BorderPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 52
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    background-color: #1d1d1d; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".label-warning-panel {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-border-color: transparent transparent #5e5e5e transparent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".label-information-panel {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-text-fill: #707070;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ".information-panel-header {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-font-size: 26pt;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-padding: 10;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    -fx-size: 30;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-text-fill: #bfbfbf;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #2c2e2f;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: darkslategrey;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-border-color: slategrey;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "flxffy"
        },
        "content": ".list-cell:filled #warningCardPane {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-padding: 5 0 6 0;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     -fx-border-color: #1d1d1d;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-border-color: #1d1d1d;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: transparent #1d1d1d transparent #1d1d1d;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-border-color: #1d1d1d #1d1d1d #ffffff #1d1d1d;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "#filterField, #medicineListPanel, #medicineWebpage {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: transparent, #1d1d1d, transparent, #1d1d1d;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "flxffy"
        },
        "content": "#warningPanel {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 17,
      "-": 321,
      "flxffy": 48
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-text-fill: red !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    -fx-background: #1d1d1d;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "flxffy": 2
    }
  },
  {
    "path": "src/main/resources/view/InformationPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003cStackPane fx:id \u003d \"informationPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "           minWidth\u003d\"400\" prefWidth\u003d\"400\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "         title\u003d\"MediTabs\" minWidth\u003d\"1200\" minHeight\u003d\"810\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \u003cImage url\u003d\"@/images/medicine_bottle_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                   minHeight\u003d\"110\" prefHeight\u003d\"110\" maxHeight\u003d\"110\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            \u003cInsets top\u003d\"0\" right\u003d\"10\" bottom\u003d\"0\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "          \u003cVBox fx:id\u003d\"medicineList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            \u003cStackPane fx:id\u003d\"medicineListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "          \u003cStackPane fx:id\u003d\"informationPanelPlaceHolder\" minWidth\u003d\"400\" prefWidth\u003d\"400\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "          \u003cVBox fx:id\u003d\"warningPanelPlaceholder\" minWidth\u003d\"260\" prefWidth\u003d\"260\" maxWidth\u003d\"260\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 3,
      "-": 63,
      "flxffy": 8
    }
  },
  {
    "path": "src/main/resources/view/MedicineListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \u003cLabel fx:id\u003d\"company\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$company\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$quantity\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \u003cLabel fx:id\u003d\"expiry\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$expiry\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "          \u003cInsets top\u003d\"3\" bottom\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 8,
      "-": 32
    }
  },
  {
    "path": "src/main/resources/view/MedicineListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \u003cListView fx:id\u003d\"medicineListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/WarningListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003cVBox id\u003d\"warningCardPane\" fx:id\u003d\"warningCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \u003cHBox\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \u003cLabel fx:id\u003d\"field\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$field\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "flxffy": 13
    }
  },
  {
    "path": "src/main/resources/view/WarningListView.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003cVBox id\u003d\"warningVBox\" fx:id\u003d\"warningVBox\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \u003cListView fx:id\u003d\"warningListView\" VBox.vgrow\u003d\"ALWAYS\" maxHeight\u003d\"500\" prefHeight\u003d\"260\" minWidth\u003d\"200\" maxWidth\u003d\"250\" prefWidth\u003d\"250\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "flxffy": 8
    }
  },
  {
    "path": "src/main/resources/view/WarningPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003cPane id\u003d\"warningPanel\" \u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        \u003cVBox fx:id\u003d\"warningVBox\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "flxffy": 10
    }
  },
  {
    "path": "src/test/data/JsonInventoryStorageTest/invalidAndValidMedicineInventory.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \"medicines\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\": \"Valid Medicine\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\": \"948\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\": \"12/08/2019\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\": \"Johnson \u0026 Johnson\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"1854692A\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"12/08/2019\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"948\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\": \"Medicine With Invalid Quantity Field\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\": \"2asd492\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\": \"12/08/2019\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\": \"Johnson \u0026 Johnson\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"AC95214-02\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"12/08/2019\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"2492\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 19,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonInventoryStorageTest/invalidMedicineInventory.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \"medicines\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\": \"Medicine with invalid name field: !buPr@f$n\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\": \"948\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\": \"12/08/2019\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\": \"Johnson \u0026 Johnson\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"1854692A\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"12/08/2019\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"948\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 10,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableInventoryTest/duplicateMedicineInventory.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \"medicines\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\": \"Paracetamol\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\": \"312\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\": \"31/12/2019\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\": \"GlaxoSmithKline\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"tagged\": [ \"fever\" ],"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"852055K\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"31/12/2019\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"312\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\": \"Paracetamol\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\": \"452\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\": \"26/09/2019\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\": \"GlaxoSmithKline\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"30254584\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"26/09/2019\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"452\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 20,
      "-": 4
    }
  },
  {
    "path": "src/test/data/JsonSerializableInventoryTest/invalidMedicineInventory.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \"medicines\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\": \"Adalimumab\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\": \"948\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\": \"invalid/expiry!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\": \"Johnson \u0026 Johnson\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"361623\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"31/12/2019\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"948\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 10,
      "-": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableInventoryTest/typicalMedicinesInventory.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \"_comment\": \"Inventory save file which contains the same Medicine values as in TypicalMedicines#getTypicalInventory()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \"medicines\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"name\" : \"Acetaminophen\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"totalQuantity\" : \"0\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"nextExpiry\" : \"-\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"company\" : \"Pfizer\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"batches\" : [ ]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\" : \"Ibuprofen\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\" : \"432\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\" : \"21/09/2019\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\" : \"Novartis\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"tagged\" : [ \"inflammation\", \"fever\" ],"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"HH073101\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"21/09/2019\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"432\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\" : \"Levothyroxine Sodium\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\" : \"533\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\" : \"31/07/2019\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\" : \"3M Pharmaceuticals\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"tagged\" : [ \"thyroid\" ],"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"GKP1684\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"13/08/2019\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"233\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \"batchNumber\" : \"GKP1685\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \"expiry\" : \"15/08/2019\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \"quantity\" : \"300\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      },"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "       {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \"batchNumber\" : \"GKP1682\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \"expiry\" : \"31/07/2019\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        \"quantity\" : \"5\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"name\" : \"Lipitor\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"totalQuantity\" : \"82\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"nextExpiry\" : \"25/01/2020\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"company\" : \"Johnson \u0026 Johnson\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"batchNumber\" : \"NDC 0777-3105-02\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"expiry\" : \"25/01/2020\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"quantity\" : \"82\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\" : \"Lisinopril\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\" : \"94\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\" : \"06/07/2019\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\" : \"Takeda Pharmaceutical Co.\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"307002\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"06/07/2019\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"94\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"name\" : \"Paracetamol\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"totalQuantity\" : \"312\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"nextExpiry\" : \"31/12/2019\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"company\" : \"GlaxoSmithKline\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"tagged\" : [ \"fever\" ],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"batchNumber\" : \"0042121\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"expiry\" : \"31/12/2019\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "      \"quantity\" : \"312\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"name\" : \"Prednisone\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"totalQuantity\" : \"427\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"nextExpiry\" : \"19/11/2019\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"company\" : \"Gilead Sciences\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"tagged\" : [ ],"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    \"batches\" : [ {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"batchNumber\" : \"A030F21\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"expiry\" : \"19/11/2019\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "      \"quantity\" : \"427\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 52,
      "-": 7,
      "flxffy": 28
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \"inventoryFilePath\" : \"MediTabs.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "  \"inventoryFilePath\" : \"MediTabs.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HelpWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_WINDOW_TITLE \u003d \"Help\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String HELP_WINDOW_BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindowHandle(Stage helpWindowStage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(helpWindowStage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code URL} of the currently loaded page."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public URL getLoadedUrl() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            WebView webView \u003d getChildNode(HELP_WINDOW_BROWSER_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new URL(webView.getEngine().getLocation());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new AssertionError(\"Invalid URL.\", mue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 8,
      "-": 33
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/InformationPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortDirection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.ui.BatchTable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A handler for the {@code InformationPanel} of the UI."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InformationPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String INFORMATION_PANEL_ID \u003d \"#informationPanel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String BATCHTABLE_TABLE_VIEW_ID \u003d \"#table\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String MEDICINE_NAME_LABEL_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String MEDICINE_COMPANY_LABEL_ID \u003d \"#company\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String MEDICINE_QUANTITY_LABEL_ID \u003d \"#quantity\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String MEDICINE_EXPIRY_LABEL_ID \u003d \"#expiry\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private List\u003cString\u003e lastRememberedTableDetails;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InformationPanelHandle(Node informationPanelNode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        super(informationPanelNode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if the BatchTable has been loaded, else return false."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean isBatchTableLoaded() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            getChildNode(BATCHTABLE_TABLE_VIEW_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } catch (NodeNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * set lastRememberedTableDetails to current table\u0027s details."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void rememberLoadedTableDetails() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        lastRememberedTableDetails \u003d getTableDetails();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if the table details have changed, else return false."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean isLoadedTableDetailsChanged() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (lastRememberedTableDetails \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return getTableDetails() !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return !getTableDetails().equals(lastRememberedTableDetails);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a list of details from the loaded table, in the order of name, company, quantity, expiry."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public List\u003cString\u003e getTableDetails() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!isBatchTableLoaded()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cString\u003e details \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        details.add(getMedicineName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        details.add(getMedicineCompany());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        details.add(getMedicineQuantity());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        details.add(getMedicineExpiry());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return details;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a list of batches being displayed in the loaded table."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public List\u003cBatch\u003e getTableData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!isBatchTableLoaded()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Node batchTable \u003d getChildNode(BATCHTABLE_TABLE_VIEW_ID);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (batchTable instanceof TableView) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new ArrayList\u003c\u003e(((TableView\u003cBatch\u003e) batchTable).getItems());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        throw new IllegalArgumentException(\"Unknown node found\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String getMedicineName() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return getDetail(MEDICINE_NAME_LABEL_ID);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String getMedicineCompany() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return getDetail(MEDICINE_COMPANY_LABEL_ID);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String getMedicineQuantity() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return getDetail(MEDICINE_QUANTITY_LABEL_ID);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String getMedicineExpiry() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return getDetail(MEDICINE_EXPIRY_LABEL_ID);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private String getDetail(String labelName) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (isBatchTableLoaded()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Node detailLabel \u003d getChildNode(labelName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            if (detailLabel instanceof Label) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                return ((Label) detailLabel).getText();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Test that loaded batch table contains all the relevant information of {@code selectedMedicine}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void assertTableCorrect(Medicine selectedMedicine, InformationPanelSettings informationPanelSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cString\u003e expectedDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedDetails.add(selectedMedicine.getName().toString());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedDetails.add(selectedMedicine.getCompany().toString());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedDetails.add(BatchTable.BATCHTABLE_FOOTER_QUANTITY + selectedMedicine.getTotalQuantity().toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedDetails.add(BatchTable.BATCHTABLE_FOOTER_EXPIRY + selectedMedicine.getNextExpiry().toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedDetails, getTableDetails());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cBatch\u003e data \u003d getTableData();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertSorted(data, informationPanelSettings);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (Batch batch : selectedMedicine.getBatches().values()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertTrue(data.contains(batch));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that the data is sorted according to the sortProperty and sortDirection."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertSorted(List\u003cBatch\u003e data, InformationPanelSettings informationPanelSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (informationPanelSettings.getSortDirection().equals(SortDirection.DESCENDING)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Collections.reverse(data);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cBatch\u003e sortedData \u003d new ArrayList\u003c\u003e(data);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        switch (informationPanelSettings.getSortProperty()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case BATCHNUMBER:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            sortedData.sort(Comparator.comparing(b -\u003e b.getBatchNumber().toString()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case EXPIRY:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            sortedData.sort(Comparator.comparing(Batch::getExpiry));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        case QUANTITY:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            sortedData.sort(Comparator.comparing(Batch::getQuantity));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalArgumentException(\"Unknown Sort Property\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(data, sortedData);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 168
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final MedicineListPanelHandle medicineListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final InformationPanelHandle informationPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineListPanel \u003d new MedicineListPanelHandle(getChildNode(MedicineListPanelHandle.MEDICINE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanel \u003d new InformationPanelHandle(getChildNode(InformationPanelHandle.INFORMATION_PANEL_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineListPanelHandle getMedicineListPanel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return medicineListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InformationPanelHandle getInformationPanel() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return informationPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 8,
      "-": 43
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MedicineCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Provides a handle to a medicine card in the medicine list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String COMPANY_FIELD_ID \u003d \"#company\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String QUANTITY_FIELD_ID \u003d \"#quantity\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String EXPIRY_FIELD_ID \u003d \"#expiry\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Label companyLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Label quantityLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Label expiryLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        companyLabel \u003d getChildNode(COMPANY_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantityLabel \u003d getChildNode(QUANTITY_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiryLabel \u003d getChildNode(EXPIRY_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String getCompany() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return companyLabel.getText();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String getQuantity() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return quantityLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public String getExpiry() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return expiryLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if this handle contains {@code medicine}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean equals(Medicine medicine) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return getName().equals(medicine.getName().fullName)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 getCompany().equals(medicine.getCompany().companyName)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 getQuantity().equals(medicine.getTotalQuantity().toString())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 getExpiry().equals(medicine.getNextExpiry().toString())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(medicine.getTags().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 26,
      "-": 61
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MedicineListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Provides a handle for {@code MedicineListPanel} containing the list of {@code MedicineCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineListPanelHandle extends NodeHandle\u003cListView\u003cMedicine\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String MEDICINE_LIST_VIEW_ID \u003d \"#medicineListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Optional\u003cMedicine\u003e lastRememberedSelectedMedicineCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineListPanelHandle(ListView\u003cMedicine\u003e medicineListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        super(medicineListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a handle to the selected {@code MedicineCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e selectedMedicineList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (selectedMedicineList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new AssertionError(\"Medicine list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .map(MedicineCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedMedicineList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Navigates the listview to display {@code medicine}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void navigateToCard(Medicine medicine) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!getRootNode().getItems().contains(medicine)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new IllegalArgumentException(\"Medicine does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            getRootNode().scrollTo(medicine);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Selects the {@code MedicineCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the medicine card handle of a medicine associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineCardHandle getMedicineCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .map(MedicineCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .filter(handle -\u003e handle.equals(getMedicine(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Medicine getMedicine(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Remembers the selected {@code MedicineCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void rememberSelectedMedicineCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            lastRememberedSelectedMedicineCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            lastRememberedSelectedMedicineCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns true if the selected {@code MedicineCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code rememberSelectedMedicineCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public boolean isSelectedMedicineCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return lastRememberedSelectedMedicineCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return !lastRememberedSelectedMedicineCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    || !lastRememberedSelectedMedicineCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 38,
      "-": 121
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WarningCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Provides a handle to a medicine card in the medicine list panel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final String FIELD_FIELD_ID \u003d \"#field\"; // medicine details, total qty or batch exp"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final Label idText;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final Label nameText;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private final Label fieldText;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private WarningPanelPredicateType type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningCardHandle(Node cardNode, WarningPanelPredicateType listType) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        idText \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        nameText \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        fieldText \u003d getChildNode(FIELD_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        type \u003d listType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return idText.getText();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return nameText.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public String getDetail() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return fieldText.getText();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns true if this handle contains {@code medicine}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public boolean equals(Medicine medicine) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (!getName().equals(medicine.getName().fullName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (type.equals(WarningPanelPredicateType.EXPIRY)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            String expectedDetail \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            for (Batch batch: medicine.getBatches().values()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                expectedDetail +\u003d String.format(\"%s [Exp: %s]\\n\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        batch.getBatchNumber().toString(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        batch.getExpiry().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return getDetail().equals(expectedDetail);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            // List is for medicines with low stock"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return getDetail().equals(String.format(\"Qty: %s\\n\", medicine.getTotalQuantity().toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 67
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/WarningListViewHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Provides a handle for {@code WarningListView} containing the list of {@code WarningCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningListViewHandle extends NodeHandle\u003cListView\u003cMedicine\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static final String WARNING_LIST_VIEW_ID \u003d \"#warningListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#warningCardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningListViewHandle(ListView\u003cMedicine\u003e warningListViewNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        super(warningListViewNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Navigates the listview to display {@code medicine}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void navigateToCard(Medicine medicine) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (!getRootNode().getItems().contains(medicine)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            throw new IllegalArgumentException(\"Medicine does not exist.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            getRootNode().scrollTo(medicine);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns the warning card handle of a medicine associated with the {@code index} in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public WarningCardHandle getWarningCardHandle(int index, WarningPanelPredicateType type) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .map(node -\u003e new WarningCardHandle(node, type))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .filter(handle -\u003e handle.equals(getMedicine(index)))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private Medicine getMedicine(int index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    protected Supplier\u003cReadOnlyInventory\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyInventory\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            JsonInventoryStorage jsonInventoryStorage \u003d new JsonInventoryStorage(saveFileLocation);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                jsonInventoryStorage.saveInventory(initialDataSupplier.get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException ioe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userPrefs.setInventoryFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a defensive copy of the inventory data stored inside the storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Inventory readStorageInventory() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new Inventory(storage.readInventory().get());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new AssertionError(\"Data is not in the MediTabs format.\", dce);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return storage.getInventoryFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model copy \u003d new ModelManager((model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredMedicineList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a defensive copy of the selectedMedicine."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Medicine getSelectedMedicine() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine selectedMedicine \u003d model.getSelectedMedicine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Medicine(selectedMedicine.getName(), selectedMedicine.getCompany(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                selectedMedicine.getTotalQuantity(), selectedMedicine.getNextExpiry(), selectedMedicine.getTags(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                selectedMedicine.getBatches());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 26,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/InformationPanelSettingsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static junit.framework.TestCase.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortDirection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InformationPanelSettingsTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final InformationPanelSettings settings \u003d new InformationPanelSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void getters_defaultValues() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(settings.getSortProperty(), InformationPanelSettings.DEFAULT_SORT_PROPERTY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(settings.getSortDirection(), InformationPanelSettings.DEFAULT_SORT_DIRECTION);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        InformationPanelSettings otherSettings \u003d new InformationPanelSettings();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(settings.equals(otherSettings));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(settings.equals(settings));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(settings.equals(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(settings.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(settings.equals(new InformationPanelSettings(SortProperty.EXPIRY, SortDirection.ASCENDING)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toString_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedString \u003d \"Sort Property: \u0027batchnumber\u0027 Sort Direction: \u0027ascending\u0027\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(settings.toString(), expectedString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void isValidSortProperty() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e SortProperty.isValidSortProperty(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid SortProperties"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(SortProperty.isValidSortProperty(\"\")); // empty string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(SortProperty.isValidSortProperty(\" \")); // spaces only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(SortProperty.isValidSortProperty(\"random text\")); // invalid text"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // valid SortProperties"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(SortProperty.isValidSortProperty(\"BATCHNUMBER\")); // upper case"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(SortProperty.isValidSortProperty(\"QuAnTiTy\")); // mixed case"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(SortProperty.isValidSortProperty(\"expiry\")); // lower case"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void isValidSortDirection() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e SortDirection.isValidSortDirection(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid SortProperties"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(SortDirection.isValidSortDirection(\"\")); // empty string"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(SortDirection.isValidSortDirection(\" \")); // spaces only"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(SortDirection.isValidSortDirection(\"random text\")); // invalid text"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // valid SortProperties"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(SortDirection.isValidSortDirection(\"ASCENDING\")); // upper case"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(SortDirection.isValidSortDirection(\"DeScEnDing\")); // mixed case"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final Index fifthMedicineIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(fifthMedicineIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(fifthMedicineIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(fifthMedicineIndex.equals(fifthMedicineIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(fifthMedicineIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(fifthMedicineIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(fifthMedicineIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 7,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/medicine_bottle_32.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false, errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 46,
      "flxffy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/FileNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public class FileNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new FileName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String invalidFileName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new FileName(invalidFileName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void isValidFileName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FileName.isValidFileName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name (Windows reserved names)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // The Windows reserved names are as follows:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // CON, PRN, AUX, NUL, COM0, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT0, LPT1, LPT2, LPT3, LPT4,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // LPT5, LPT6, LPT7, LPT8, and LPT9"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"CON\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"PRN\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"AUX\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"NUL\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM0\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM2\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM3\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM4\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM5\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM6\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM7\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM8\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"COM9\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT0\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT2\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT3\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT4\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT5\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT6\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT7\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT8\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"LPT9\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // Reserved names in lower case"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"con\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"prn\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"aux\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"nul\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com0\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com1\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com2\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com3\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com4\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com5\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com6\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com7\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com8\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"com9\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt0\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt1\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt2\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt3\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt4\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt5\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt6\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt7\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt8\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"lpt9\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // Reserve names with a mix of lower and upper case"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"CoM1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"\")); // empty string"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\" \")); // spaces only"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"^\")); // only not supported non-alphanumeric characters"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"example*\")); // contains not supported non-alphanumeric characters"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"example record\")); // alphabets with a space only"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"exampleRecord.csv\")); // alphabets with file format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\".csv\")); // file format"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"_\")); // underscore only"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(FileName.isValidFileName(\"-\")); // hyphen only"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // valid file name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"examplerecord\")); // alphanumeric characters"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"exampleRecord2\")); // with numbers"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"exampleRecord\")); // with capital letters"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"example_Record\")); // with underscore"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"example-record\")); // with hyphen"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"COM10\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(FileName.isValidFileName(\"LPT10\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void equals_inputObjectEquals_trueReturned() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        FileName expected \u003d new FileName(\"example\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        FileName actual \u003d new FileName(\"example\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertTrue(actual.equals(expected));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void equals_inputObjectNotEquals_falseReturned() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        FileName expected \u003d new FileName(\"example2\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        FileName actual \u003d new FileName(\"example\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertFalse(actual.equals(expected));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/warning/WarningPanelPredicateAccessorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.commons.util.warning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.BatchExpiryThresholdPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineExpiryThresholdPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineLowStockThresholdPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningPanelPredicateAccessorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor firstAccessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor secondAccessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        secondAccessor.updateBatchExpiringThreshold(0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstAccessor.equals(firstAccessor));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor firstAccessorCopy \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstAccessor.equals(firstAccessorCopy));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstAccessor.equals(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstAccessor.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different accessor -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstAccessor.equals(secondAccessor));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setDefaultPredicates_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor accessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate batchExpiryPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate medicineExpiryPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate medicineLowStockPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same default BatchExpiryPredicate -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        batchExpiryPredicate \u003d new BatchExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getBatchExpiryPredicate().equals(batchExpiryPredicate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same default MedicineExpiryPredicate -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        medicineExpiryPredicate \u003d new MedicineExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getMedicineExpiryPredicate().equals(medicineExpiryPredicate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same default MedicineLowStockPredicate -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        medicineLowStockPredicate \u003d new MedicineLowStockThresholdPredicate(Model.DEFAULT_LOW_STOCK_THRESHOLD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getMedicineLowStockPredicate().equals(medicineLowStockPredicate));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setDefaultPredicates_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor accessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold otherExpiryThreshold \u003d new Threshold(\"0\", WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold otherLowStockThreshold \u003d new Threshold(\"0\", WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate batchExpiryPredicate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate medicineExpiryPredicate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate medicineLowStockPredicate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different BatchExpiryPredicate -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        batchExpiryPredicate \u003d new BatchExpiryThresholdPredicate(otherExpiryThreshold);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getBatchExpiryPredicate().equals(batchExpiryPredicate));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different MedicineExpiryPredicate -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        medicineExpiryPredicate \u003d new MedicineExpiryThresholdPredicate(otherExpiryThreshold);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getMedicineExpiryPredicate().equals(medicineExpiryPredicate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different MedicineLowStockPredicate -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        medicineLowStockPredicate \u003d new MedicineLowStockThresholdPredicate(otherLowStockThreshold);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getMedicineLowStockPredicate().equals(medicineLowStockPredicate));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setBatchExpiringThreshold() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor accessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold defaultThreshold \u003d Model.DEFAULT_EXPIRY_THRESHOLD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold otherThreshold \u003d new Threshold(\"0\", WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate defaultPredicate \u003d new BatchExpiryThresholdPredicate(defaultThreshold);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate otherPredicate \u003d new BatchExpiryThresholdPredicate(otherThreshold);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same predicate -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getBatchExpiryPredicate().equals(defaultPredicate));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getBatchExpiryPredicate().equals(otherPredicate));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // set new threshold"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        accessor.updateBatchExpiringThreshold(otherThreshold.getNumericValue());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same predicate -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getBatchExpiryPredicate().equals(otherPredicate));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getBatchExpiryPredicate().equals(defaultPredicate));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setMedicineExpiringThreshold() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor accessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold defaultThreshold \u003d Model.DEFAULT_EXPIRY_THRESHOLD;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold otherThreshold \u003d new Threshold(\"0\", WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate defaultPredicate \u003d new MedicineExpiryThresholdPredicate(defaultThreshold);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate otherPredicate \u003d new MedicineExpiryThresholdPredicate(otherThreshold);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same predicate -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getMedicineExpiryPredicate().equals(defaultPredicate));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getMedicineExpiryPredicate().equals(otherPredicate));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // set new threshold"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        accessor.updateMedicineExpiringThreshold(otherThreshold.getNumericValue());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same predicate -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getMedicineExpiryPredicate().equals(otherPredicate));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getMedicineExpiryPredicate().equals(defaultPredicate));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setMedicineLowStockThreshold() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor accessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold defaultThreshold \u003d Model.DEFAULT_LOW_STOCK_THRESHOLD;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold otherThreshold \u003d new Threshold(\"0\", WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate defaultPredicate \u003d new MedicineLowStockThresholdPredicate(defaultThreshold);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate otherPredicate \u003d new MedicineLowStockThresholdPredicate(otherThreshold);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same predicate -\u003e returns true"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getMedicineLowStockPredicate().equals(defaultPredicate));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getMedicineLowStockPredicate().equals(otherPredicate));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // set new threshold"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        accessor.updateMedicineLowStockThreshold(otherThreshold.getNumericValue());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same predicate -\u003e returns true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(accessor.getMedicineLowStockPredicate().equals(otherPredicate));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(accessor.getMedicineLowStockPredicate().equals(defaultPredicate));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/CommandHistoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_withCommandHistory_copiesCommandHistory() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA, new CommandHistory(commandHistoryWithA));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        final String validCommand \u003d \"clear\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final String invalidCommand \u003d \"adds Gabapentin\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(validCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(invalidCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validCommand, invalidCommand), history.getHistory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(commandHistoryWithA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandHistoryWithA.equals(anotherCommandHistoryWithA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandHistoryWithA.equals(commandHistoryWithB));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory anotherCommandHistoryWithA \u003d new CommandHistory();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        anotherCommandHistoryWithA.add(\"a\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        final CommandHistory commandHistoryWithB \u003d new CommandHistory();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        commandHistoryWithB.add(\"b\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandHistoryWithA.hashCode(), anotherCommandHistoryWithA.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns different hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandHistoryWithA.hashCode(), commandHistoryWithB.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.GABAPENTIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d new JsonInventoryStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        StorageManager storage \u003d new StorageManager(inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Setup LogicManager with JsonInventoryIoExceptionThrowingStub"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonInventoryIoExceptionThrowingStub(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        StorageManager storage \u003d new StorageManager(inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_GABAPENTIN + COMPANY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine expectedMedicine \u003d new MedicineBuilder(GABAPENTIN).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.addMedicine(expectedMedicine);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(CommandException.class, addCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(addCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void getFilteredMedicineList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        logic.getFilteredMedicineList().remove(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *      - {@code expectedModel}\u0027s inventory was saved to the storage file."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static class JsonInventoryIoExceptionThrowingStub extends JsonInventoryStorage {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private JsonInventoryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 26,
      "-": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_newMedicine_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine validMedicine \u003d new MedicineBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.addMedicine(validMedicine);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new AddCommand(validMedicine), model, commandHistory,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validMedicine), expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_duplicateMedicine_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineInList \u003d model.getInventory().getMedicineList().get(0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(new AddCommand(medicineInList), model, commandHistory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 15,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ReadOnlyProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.WarningPanelSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_nullMedicine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_medicineAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelStubAcceptingMedicineAdded modelStub \u003d new ModelStubAcceptingMedicineAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine validMedicine \u003d new MedicineBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validMedicine).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validMedicine), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Arrays.asList(validMedicine), modelStub.medicinesAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_duplicateMedicine_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine validMedicine \u003d new MedicineBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validMedicine);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithMedicine(validMedicine);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine paracetamol \u003d new MedicineBuilder().withName(\"Paracetamol\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine gabapentin \u003d new MedicineBuilder().withName(\"Gabapentin\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        AddCommand addParacetamolCommand \u003d new AddCommand(paracetamol);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        AddCommand addGabapentinCommand \u003d new AddCommand(gabapentin);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(addParacetamolCommand.equals(addParacetamolCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        AddCommand addParacetamolCommandCopy \u003d new AddCommand(paracetamol);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(addParacetamolCommand.equals(addParacetamolCommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(addParacetamolCommand.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(addParacetamolCommand.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different medicine -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(addParacetamolCommand.equals(addGabapentinCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public WarningPanelSettings getWarningPanelSettings() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public void setWarningPanelSettings(WarningPanelSettings warningPanelSettings) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public void configureWarningPanelLists() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setInformationPanelSettings(InformationPanelSettings informationPanelSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public ReadOnlyProperty\u003cInformationPanelSettings\u003e getInformationPanelSettings() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void addMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setInventory(ReadOnlyInventory newData) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public boolean hasMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void deleteMedicine(Medicine target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setMedicine(Medicine target, Medicine editedMedicine) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public WarningPanelPredicateAccessor getWarningPanelPredicateAccessor() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public ObservableList\u003cMedicine\u003e getFilteredMedicineList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public ObservableList\u003cMedicine\u003e getExpiringMedicinesList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public ObservableList\u003cMedicine\u003e getLowStockMedicinesList() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void updateFilteredMedicineList(Predicate\u003cMedicine\u003e predicate) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public void updateFilteredExpiringMedicineList(Predicate\u003cMedicine\u003e predicate) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public void updateFilteredLowStockMedicineList(Predicate\u003cMedicine\u003e predicate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public boolean canUndoInventory() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public boolean canRedoInventory() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void undoInventory() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void redoInventory() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void commitInventory() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public ReadOnlyProperty\u003cMedicine\u003e selectedMedicineProperty() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public Medicine getSelectedMedicine() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void setSelectedMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public void changeWarningPanelListThreshold(WarningPanelPredicateType type, Threshold threshold) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public Threshold getWarningPanelThreshold(WarningPanelPredicateType type) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * A Model stub that contains a single medicine."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private class ModelStubWithMedicine extends ModelStub {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private final Medicine medicine;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelStubWithMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            requireNonNull(medicine);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            this.medicine \u003d medicine;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public boolean hasMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            requireNonNull(medicine);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return this.medicine.isSameMedicine(medicine);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * A Model stub that always accept the medicine being added."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private class ModelStubAcceptingMedicineAdded extends ModelStub {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final ArrayList\u003cMedicine\u003e medicinesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public boolean hasMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            requireNonNull(medicine);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return medicinesAdded.stream().anyMatch(medicine::isSameMedicine);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void addMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            requireNonNull(medicine);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            medicinesAdded.add(medicine);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public void commitInventory() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new Inventory();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 69,
      "-": 221,
      "flxffy": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_emptyInventory_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_nonEmptyInventory_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setInventory(new Inventory());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 9,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BATCHNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.EditMedicineDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.UpdateBatchDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_NAME_AMOXICILLIN \u003d \"Amoxicillin\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_NAME_GABAPENTIN \u003d \"Gabapentin\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_QUANTITY_AMOXICILLIN \u003d \"111\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_QUANTITY_GABAPENTIN \u003d \"0\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_QUANTITY_LISNOPRIL \u003d \"100\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_EXPIRY_AMOXICILLIN \u003d \"27/11/2019\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_EXPIRY_GABAPENTIN \u003d \"-\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_EXPIRY_LISPINOL \u003d \"21/1/2020\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_COMPANY_AMOXICILLIN \u003d \"Merck \u0026 Co. (MSD)\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_COMPANY_GABAPENTIN \u003d \"Sanofi\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_COMPANY_LISNOPRIL \u003d \"Takeda Pharmaceutical Co.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String VALID_TAG_PAINKILLER \u003d \"painkiller\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String VALID_TAG_FEVER \u003d \"fever\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_BATCHNUMBER_AMOXICILLIN \u003d \"s9c4xs9532\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_BATCHNUMBER_GABAPENTIN \u003d \"O26M997570\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String VALID_BATCHNUMBER_LISNOPRIL \u003d \"ABC1234\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String NAME_DESC_AMOXICILLIN \u003d \" \" + PREFIX_NAME + VALID_NAME_AMOXICILLIN;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String NAME_DESC_GABAPENTIN \u003d \" \" + PREFIX_NAME + VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String QUANTITY_DESC_AMOXICILLIN \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_AMOXICILLIN;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String QUANTITY_DESC_GABAPENTIN \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_GABAPENTIN;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String QUANTITY_DESC_LISNOPRIL \u003d \" \" + PREFIX_QUANTITY + VALID_QUANTITY_LISNOPRIL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String EXPIRY_DESC_AMOXICILLIN \u003d \" \" + PREFIX_EXPIRY + VALID_EXPIRY_AMOXICILLIN;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String EXPIRY_DESC_GABAPENTIN \u003d \" \" + PREFIX_EXPIRY + VALID_EXPIRY_GABAPENTIN;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String EXPIRY_DESC_LISNOPRIL \u003d \" \" + PREFIX_EXPIRY + VALID_EXPIRY_LISPINOL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String COMPANY_DESC_AMOXICILLIN \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_AMOXICILLIN;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String COMPANY_DESC_GABAPENTIN \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_GABAPENTIN;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String COMPANY_DESC_LISNOPRIL \u003d \" \" + PREFIX_COMPANY + VALID_COMPANY_LISNOPRIL;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String TAG_DESC_FEVER \u003d \" \" + PREFIX_TAG + VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public static final String TAG_DESC_PAINKILER \u003d \" \" + PREFIX_TAG + VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String BATCHNUMBER_DESC_AMOXICILLIN \u003d \" \" + PREFIX_BATCHNUMBER + VALID_BATCHNUMBER_AMOXICILLIN;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String BATCHNUMBER_DESC_GABAPENTIN \u003d \" \" + PREFIX_BATCHNUMBER + VALID_BATCHNUMBER_GABAPENTIN;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String BATCHNUMBER_DESC_LISNOPRIL \u003d \" \" + PREFIX_BATCHNUMBER + VALID_BATCHNUMBER_LISNOPRIL;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Paraceta\u0026mol\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String INVALID_QUANTITY_DESC \u003d \" \" + PREFIX_QUANTITY + \"911a\"; // \u0027a\u0027 not allowed in quantities"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String INVALID_EXPIRY_DESC \u003d \" \" + PREFIX_EXPIRY + \"1211/2020\"; // missing \u0027/\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String INVALID_COMPANY_DESC \u003d \" \" + PREFIX_COMPANY; // empty string not allowed for company name"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"fever*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String INVALID_BATCHNUMBER_DESC \u003d \" \" + PREFIX_BATCHNUMBER + \"!4815%\u0026\"; // \u0027!\u0027 not allowed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \" NonEmptyPreamble\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final EditCommand.EditMedicineDescriptor DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final EditCommand.EditMedicineDescriptor DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final UpdateCommand.UpdateBatchDescriptor DESC_AMOXICILLIN_BATCH;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final UpdateCommand.UpdateBatchDescriptor DESC_GABAPENTIN_BATCH;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DESC_AMOXICILLIN \u003d new EditMedicineDescriptorBuilder().withName(VALID_NAME_AMOXICILLIN)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withCompany(VALID_COMPANY_AMOXICILLIN).withTags(VALID_TAG_FEVER).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DESC_GABAPENTIN \u003d new EditMedicineDescriptorBuilder().withName(VALID_NAME_GABAPENTIN)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withCompany(VALID_COMPANY_GABAPENTIN).withTags(VALID_TAG_PAINKILLER, VALID_TAG_FEVER).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DESC_AMOXICILLIN_BATCH \u003d new UpdateBatchDescriptorBuilder().withBatchNumber(VALID_BATCHNUMBER_AMOXICILLIN)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withQuantity(VALID_QUANTITY_AMOXICILLIN).withExpiry(VALID_EXPIRY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DESC_GABAPENTIN_BATCH \u003d new UpdateBatchDescriptorBuilder().withBatchNumber(VALID_BATCHNUMBER_GABAPENTIN)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withQuantity(VALID_QUANTITY_GABAPENTIN).withExpiry(VALID_EXPIRY_GABAPENTIN).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult expectedCommandResult, Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandHistory, CommandResult, Model)}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, actualCommandHistory, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * - the inventory, filtered medicine list and selected medicine in {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory expectedInventory \u003d new Inventory(actualModel.getInventory());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredMedicineList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine expectedSelectedMedicine \u003d actualModel.getSelectedMedicine();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertEquals(expectedInventory, actualModel.getInventory());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredMedicineList());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertEquals(expectedSelectedMedicine, actualModel.getSelectedMedicine());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the medicine at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code model}\u0027s inventory."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void showMedicineAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicine \u003d model.getFilteredMedicineList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final String[] splitName \u003d medicine.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(1, model.getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Deletes the first medicine in {@code model}\u0027s filtered list from {@code model}\u0027s inventory."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void deleteFirstMedicine(Model model) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine firstMedicine \u003d model.getFilteredMedicineList().get(0);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.deleteMedicine(firstMedicine);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.commitInventory();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 74,
      "melpulomas": 6,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMedicineAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToDelete \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MEDICINE_SUCCESS, medicineToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.deleteMedicine(medicineToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToDelete \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_MEDICINE_SUCCESS, medicineToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.deleteMedicine(medicineToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showNoMedicine(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInventory().getMedicineList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToDelete \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.deleteMedicine(medicineToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // delete -\u003e first medicine deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // undo -\u003e reverts Inventory back to previous state and filtered medicine list to show all medicines"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // redo -\u003e same first medicine deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // execution failed -\u003e inventory state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // single inventory state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 1. Deletes a {@code Medicine} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted medicine in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the medicine object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameMedicineDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_SECOND_MEDICINE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToDelete \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.deleteMedicine(medicineToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // delete -\u003e deletes second medicine in unfiltered medicine list / first medicine in filtered medicine list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // undo -\u003e reverts Inventory back to previous state and filtered medicine list to show all medicines"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertNotEquals(medicineToDelete, model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // redo -\u003e deletes same second medicine in unfiltered medicine list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_MEDICINE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different medicine -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void showNoMedicine(Model model) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(model.getFilteredMedicineList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 64,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMedicineAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditMedicineDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.EditMedicineDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToEdit \u003d model.getFilteredMedicineList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedMedicine \u003d new MedicineBuilder().withUneditableFields(medicineToEdit).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder(editedMedicine).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MEDICINE, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEDICINE_SUCCESS, editedMedicine);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Inventory(model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setMedicine(medicineToEdit, editedMedicine);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index indexLastMedicine \u003d Index.fromOneBased(model.getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine lastMedicine \u003d model.getFilteredMedicineList().get(indexLastMedicine.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineBuilder medicineInList \u003d new MedicineBuilder(lastMedicine);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Medicine editedMedicine \u003d medicineInList.withName(VALID_NAME_GABAPENTIN).withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withName(VALID_NAME_GABAPENTIN)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastMedicine, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEDICINE_SUCCESS, editedMedicine);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Inventory(model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setMedicine(lastMedicine, editedMedicine);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MEDICINE, new EditMedicineDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedMedicine \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEDICINE_SUCCESS, editedMedicine);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Inventory(model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineInFilteredList \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedMedicine \u003d new MedicineBuilder(medicineInFilteredList).withName(VALID_NAME_GABAPENTIN).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MEDICINE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new EditMedicineDescriptorBuilder().withName(VALID_NAME_GABAPENTIN).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_MEDICINE_SUCCESS, editedMedicine);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Inventory(model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setMedicine(model.getFilteredMedicineList().get(0), editedMedicine);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_duplicateMedicineUnfilteredList_failure() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine firstMedicine \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder(firstMedicine).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_MEDICINE, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_duplicateMedicineFilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // edit medicine in filtered list into a duplicate in inventory"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineInList \u003d model.getInventory().getMedicineList().get(INDEX_SECOND_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MEDICINE,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new EditMedicineDescriptorBuilder(medicineInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_invalidMedicineIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withName(VALID_NAME_GABAPENTIN).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * but smaller than size of inventory"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_invalidMedicineIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInventory().getMedicineList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new EditMedicineDescriptorBuilder().withName(VALID_NAME_GABAPENTIN).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToEdit \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedMedicine \u003d new MedicineBuilder().withUneditableFields(medicineToEdit).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder(editedMedicine).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MEDICINE, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Inventory(model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setMedicine(medicineToEdit, editedMedicine);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // edit -\u003e first medicine edited"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // undo -\u003e reverts Inventory back to previous state and filtered medicine list to show all medicines"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // redo -\u003e same first medicine edited again"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size() + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withName(VALID_NAME_GABAPENTIN).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // execution failed -\u003e inventory state not added into model"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // single inventory state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 1. Edits a {@code Medicine} from a filtered list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited medicine in the"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the medicine object regardless of indexing."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameMedicineEdited() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToEdit \u003d model.getFilteredMedicineList().get(INDEX_SECOND_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedMedicine \u003d new MedicineBuilder().withUneditableFields(medicineToEdit).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder(editedMedicine).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_MEDICINE, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Inventory(model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_SECOND_MEDICINE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineToEdit \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setMedicine(medicineToEdit, editedMedicine);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // edit -\u003e edits second medicine in unfiltered medicine list / first medicine in filtered medicine list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // undo -\u003e reverts Inventory back to previous state and filtered medicine list to show all medicines"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertNotEquals(model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased()), medicineToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // redo -\u003e edits same second medicine in unfiltered medicine list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_MEDICINE, DESC_AMOXICILLIN);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor copyDescriptor \u003d new EditMedicineDescriptor(DESC_AMOXICILLIN);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_MEDICINE, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_MEDICINE, DESC_AMOXICILLIN)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_MEDICINE, DESC_GABAPENTIN)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 109,
      "melpulomas": 3,
      "-": 136
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditMedicineDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_GABAPENTIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditMedicineDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.EditMedicineDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class EditMedicineDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptorWithSameValues \u003d new EditMedicineDescriptor(DESC_AMOXICILLIN);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(DESC_AMOXICILLIN.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(DESC_AMOXICILLIN.equals(DESC_AMOXICILLIN));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN.equals(DESC_GABAPENTIN));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor editedAmoxicillin \u003d new EditMedicineDescriptorBuilder(DESC_AMOXICILLIN)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withName(VALID_NAME_GABAPENTIN).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN.equals(editedAmoxicillin));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedAmoxicillin \u003d new EditMedicineDescriptorBuilder(DESC_AMOXICILLIN).withCompany(VALID_COMPANY_GABAPENTIN)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN.equals(editedAmoxicillin));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        editedAmoxicillin \u003d new EditMedicineDescriptorBuilder(DESC_AMOXICILLIN).withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN.equals(editedAmoxicillin));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 21,
      "melpulomas": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertArrayEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import org.apache.commons.io.FilenameUtils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import com.opencsv.CSVReader;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.csv.CsvWrapper;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * Contains unit tests for {@code ExportCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public class ExportCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void execute_csvFileDoesNotAlreadyExist_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Path exportDirectoryPath \u003d Paths.get(\"exported\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (Files.isDirectory(exportDirectoryPath) \u003d\u003d false) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            Files.createDirectory(exportDirectoryPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        File filePath \u003d File.createTempFile(\"tmp\", \".csv\", exportDirectoryPath.toFile());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String fileName \u003d filePath.toPath().getFileName().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String fileNameWithoutFileExtension \u003d FilenameUtils.removeExtension(fileName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(new FileName(fileNameWithoutFileExtension));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // Delete the temporary csv file so as to simulate csv file does not exist."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        filePath.delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_SUCCESS, fileNameWithoutFileExtension);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertCommandSuccess(exportCommand, model, commandHistory, expectedMessage, model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // Clean up temporary csv file for test case which was created."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        filePath.delete();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void execute_csvFileDoesNotAlreadyExist_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Path exportDirectoryPath \u003d Paths.get(\"exported\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (Files.isDirectory(exportDirectoryPath) \u003d\u003d false) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            Files.createDirectory(exportDirectoryPath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        File filePath \u003d File.createTempFile(\"tmp\", \".csv\", exportDirectoryPath.toFile());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String fileName \u003d filePath.toPath().getFileName().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String fileNameWithoutFileExtension \u003d FilenameUtils.removeExtension(fileName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(new FileName(fileNameWithoutFileExtension));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String expectedMessage \u003d CsvWrapper.FILE_OPS_ERROR_MESSAGE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                + fileName"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                + \" already exists in \\\"exported\\\" directory.\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertCommandFailure(exportCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // Clean up temporary csv file for test case which was created."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        filePath.delete();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void execute_csvFileInformationMatchesData_success() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Path exportDirectoryPath \u003d Paths.get(\"exported\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (Files.isDirectory(exportDirectoryPath) \u003d\u003d false) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            Files.createDirectory(exportDirectoryPath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        File filePath \u003d File.createTempFile(\"tmp\", \".csv\", exportDirectoryPath.toFile());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String fileName \u003d filePath.toPath().getFileName().toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String fileNameWithoutFileExtension \u003d FilenameUtils.removeExtension(fileName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        ExportCommand exportCommand \u003d new ExportCommand(new FileName(fileNameWithoutFileExtension));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // Delete the temporary csv file so as to simulate csv file does not exist."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        filePath.delete();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String expectedMessage \u003d String.format(ExportCommand.MESSAGE_SUCCESS, fileNameWithoutFileExtension);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertCommandSuccess(exportCommand, model, commandHistory, expectedMessage, model);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        compareActualAndExpectedData(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Compares actual and expected data for the exported Csv file."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Note: This version did not take advantage of JUnit TemporaryFolder method"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * and instead uses manual checking using File exists() method and File delete() method"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * as I am still finding the best way to implement it as unlike the usual usage of TemporaryFolder method"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * in this case, the method I am testing includes creating its own default export folder which users"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * will be using and it also creates its own csv file when the method which is being tested is executed"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * so I am trying to find the best way to take advantage of the Junit TemporaryFolder method"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * without accidentally deleting any of the existing data which the user might have exported"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * before running tests which might be crucial data though in practice usually when running tests"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * you should not have crucial data but this is an additional safety precaution I decide to implement"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * in case the developers do have crucial export data which they might accidentally did not back up before testing"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * There are two alternatives I can think of to solve this issue:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * 1) Update CsvWrapper.java to support either a test situation (depending on how it is implemented"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * it still can simulate real world scenario without affecting testing the main functionality) basically"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * if the test flag is enabled it will allow use of custom export directory and custom csv file"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * 2) I could just update CsvWrapper.java to support allowing custom export directory but that is actually"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * planned for v2.0 and beyond as that is nice to have and not top priority as of now so in order to minimise"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * any potential regression bugs, option 1 would be a better choice if compared to this option as option 1 hides"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * the custom export directory option from users and only allow it to use by developers or to be more precise"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * only use for testing purposes (abstraction and information hiding concepts)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * 3) Create the JUnit TemporaryFolder within the default exported directory"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * and move the temporary created csv file to that folder within the default exported directory"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * so that both will be deleted when each test case complete its execution (Might be possible"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * and still researching though it might be shift to Milestone v2.0 and beyond depending on availability of time"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * as there might be higher priority tasks)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * The advantage of using JUnit TemporaryFolder is it allows cleaner code without having"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * to manually delete the temporary file manually using File delete() method as it will be deleted"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * after each test method has executed"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param filePath The actual csv file to be compared with the expected data."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @throws IOException If the reading of the data from the exported Csv file encounters an exception."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private void compareActualAndExpectedData(File filePath) throws IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        try (CSVReader reader \u003d new CSVReader(new FileReader(filePath))) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            String[] expectedData;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            String[] actualData;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            expectedData \u003d CsvWrapper.getDefaultHeading();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            if ((actualData \u003d reader.readNext()) \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                // Clean up temporary csv file for test case which was created."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                filePath.delete();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                Assert.fail(\"The actual csv file contains less data than the expected amount of data.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            assertArrayEquals(expectedData, actualData);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            List\u003cMedicine\u003e currentGuiList \u003d model.getFilteredMedicineList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            List\u003cMedicine\u003e lowQuantityMedicineList \u003d model.getLowStockMedicinesList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            Iterator iterator \u003d currentGuiList.listIterator();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            while (iterator.hasNext()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                Medicine current \u003d (Medicine) iterator.next();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                List\u003cBatch\u003e listOfBatchesExpiringSoon \u003d current.getFilteredBatch("
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                        model.getWarningPanelPredicateAccessor().getBatchExpiryPredicate());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                if (current.getBatches().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                // Iterate through the batches of the current medicine"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                Collection\u003cBatch\u003e batches \u003d current.getBatches().values();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                Iterator batchIterator \u003d batches.iterator();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                while (batchIterator.hasNext()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    if ((actualData \u003d reader.readNext()) \u003d\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        // Clean up temporary csv file for test case which was created."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        filePath.delete();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        Assert.fail(\"The actual csv file contains less data than the expected amount of data.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    Batch currentBatch \u003d (Batch) batchIterator.next();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    String delimiter \u003d \"|\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    builder.append(current.getName())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(delimiter)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(currentBatch.getBatchNumber())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(delimiter)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(currentBatch.getQuantity())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(delimiter)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(currentBatch.getExpiry())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(delimiter)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(current.getCompany())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            .append(delimiter);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    Iterator buildIterator \u003d current.getTags().iterator();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    while (buildIterator.hasNext()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        Tag currentTag \u003d (Tag) buildIterator.next();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        String formattedCurrentTagString \u003d currentTag.toStringUpperCase();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        builder.append(formattedCurrentTagString);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        if (buildIterator.hasNext()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            builder.append(\u0027 \u0027);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    builder.append(delimiter);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    if (lowQuantityMedicineList.contains(current)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        builder.append(CsvWrapper.getDefaultLowStockNotification());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        if (listOfBatchesExpiringSoon.contains(currentBatch)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            builder.append(\u0027 \u0027);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            if (isMedicineBatchExpired(currentBatch)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                                builder.append(CsvWrapper.getDefaultExpiredNotification());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                                builder.append(CsvWrapper.getDefaultExpiringSoonNotification());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        if (listOfBatchesExpiringSoon.contains(currentBatch)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            if (isMedicineBatchExpired(currentBatch)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                                builder.append(CsvWrapper.getDefaultExpiredNotification());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                                builder.append(CsvWrapper.getDefaultExpiringSoonNotification());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    expectedData \u003d builder.toString().split(\"\\\\|\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                    assertArrayEquals(expectedData, actualData);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            if (reader.readNext() !\u003d null) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                // Clean up temporary csv file for test case which was created."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                filePath.delete();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                Assert.fail(\"The actual csv file contains more data than the expected amount of data.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            throw ioe;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            // Clean up temporary csv file for test case which was created."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            if (filePath.exists()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                filePath.delete();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Returns true if the input medicine batch is expired else returns false."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Note: A medicine batch is considered expired if the current date is greater than or equal to the medicine"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * batch expiry date."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @param batch The input medicine batch."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * @return Returns true if the input medicine batch is expired else returns false."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private boolean isMedicineBatchExpired(Batch batch) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Expiry currentMedicineBatchExpiry \u003d batch.getExpiry();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        Expiry currentDate;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        SimpleDateFormat currentDataAndTimeFormat \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String currentDateString \u003d currentDataAndTimeFormat.format(new Date());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        currentDate \u003d new Expiry(currentDateString);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        if (currentDate.compareTo(currentMedicineBatchExpiry) \u003e\u003d 1) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 242,
      "flxffy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MEDICINES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BATCHNUMBER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.ACETAMINOPHEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.IBUPROFEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.LISINOPRIL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.PREDNISONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.BatchContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_nameContainsKeywordsPredicate_medicineFound() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEDICINES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Predicate\u003cMedicine\u003e predicate \u003d preparePredicate(PREFIX_NAME, ACETAMINOPHEN.toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.updateFilteredMedicineList(predicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Arrays.asList(ACETAMINOPHEN), model.getFilteredMedicineList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_companyContainsKeywordsPredicate_medicineFound() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEDICINES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Predicate\u003cMedicine\u003e predicate \u003d preparePredicate(PREFIX_COMPANY, LISINOPRIL.getCompany().toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.updateFilteredMedicineList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Arrays.asList(LISINOPRIL), model.getFilteredMedicineList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_tagContainsKeywordsPredicate_medicineFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEDICINES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String tag \u003d IBUPROFEN.getTags().iterator().next().tagName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Predicate\u003cMedicine\u003e predicate \u003d preparePredicate(PREFIX_TAG, tag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.updateFilteredMedicineList(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Arrays.asList(IBUPROFEN), model.getFilteredMedicineList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_batchContainsKeywordsPredicate_medicineFound() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEDICINES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String batch \u003d PREDNISONE.getBatches().keySet().iterator().next().toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Predicate\u003cMedicine\u003e predicate \u003d preparePredicate(PREFIX_BATCHNUMBER, batch);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.updateFilteredMedicineList(predicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Arrays.asList(PREDNISONE), model.getFilteredMedicineList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_multipleKeywords_multipleMedicinesFound() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEDICINES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Predicate\u003cMedicine\u003e predicate \u003d preparePredicate(PREFIX_NAME, ACETAMINOPHEN.toString() + \" \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + LISINOPRIL.toString() + \" \" + PREDNISONE.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.updateFilteredMedicineList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Arrays.asList(ACETAMINOPHEN, LISINOPRIL, PREDNISONE), model.getFilteredMedicineList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_nonPresentKeywords_noMedicinesFound() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_MEDICINES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Predicate\u003cMedicine\u003e predicate \u003d preparePredicate(PREFIX_COMPANY, \"one two three\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.updateFilteredMedicineList(predicate);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Arrays.asList(), model.getFilteredMedicineList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses {@code userInput} into a {@code Predicate\u003cMedicine\u003e}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Predicate\u003cMedicine\u003e preparePredicate(Prefix prefix, String userInput) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String[] keywords \u003d userInput.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (prefix \u003d\u003d PREFIX_NAME) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new NameContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (prefix \u003d\u003d PREFIX_COMPANY) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new CompanyContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (prefix \u003d\u003d PREFIX_TAG) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new TagContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (prefix \u003d\u003d PREFIX_BATCHNUMBER) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return new BatchContainsKeywordsPredicate(Arrays.asList(keywords));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different medicine -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 106,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LabelCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.LabelCommand.DEFAULT_FILENAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.pdmodel.PDDocument;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.text.PDFTextStripper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.apache.pdfbox.text.PDFTextStripperByArea;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "public class LabelCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private static final String DEFAULT_LABEL_FOLDER_NAME \u003d \"PDF\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private static final Path DEFAULT_LABEL_FOLDER_PATH \u003d Paths.get(DEFAULT_LABEL_FOLDER_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private FileName fileName \u003d new FileName(DEFAULT_FILENAME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public void execute_labelMedicineAtIndexOneDefaultFileNameUnfilteredList_success()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            throws IOException, CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Medicine medicineToLabel \u003d model.getFilteredMedicineList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        LabelCommand labelCommand \u003d new LabelCommand(INDEX_FIRST_MEDICINE, new FileName(DEFAULT_FILENAME));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        labelCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        File printedFile \u003d new File(Paths.get(DEFAULT_LABEL_FOLDER_NAME, fileName + \".pdf\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .toString().replaceAll(\"\\\\s+\", \"\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String actualMessage \u003d readFromPdf(printedFile);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String information \u003d getMedicineInformationToString(medicineToLabel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String expectedMessage \u003d information.replaceAll(\"\\r\", \"\").replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        printedFile.delete();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public void execute_labelMedicineAtIndexTwoDefaultFileNameUnfilteredList_success()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            throws IOException, CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Medicine medicineToLabel \u003d model.getFilteredMedicineList().get(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        LabelCommand labelCommand \u003d new LabelCommand(INDEX_SECOND_MEDICINE, new FileName(\"secondMedicine\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        labelCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        File printedFile \u003d new File(Paths.get(DEFAULT_LABEL_FOLDER_NAME, \"secondMedicine\" + \".pdf\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .toString().replaceAll(\"\\\\s+\", \"\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String actualMessage \u003d readFromPdf(printedFile);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String information \u003d getMedicineInformationToString(medicineToLabel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String expectedMessage \u003d information.replaceAll(\"\\r\", \"\").replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertEquals(expectedMessage, actualMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        printedFile.delete();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size() + 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        LabelCommand labelCommand \u003d new LabelCommand(outOfBoundIndex, fileName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertCommandFailure(labelCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     * Helper function to read content from {@code file} file and output it as a String."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private String readFromPdf(File file) throws IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String pdfFileInText;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        try (PDDocument document \u003d PDDocument.load(file)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            document.getClass();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            PDFTextStripperByArea stripper \u003d new PDFTextStripperByArea();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            stripper.setSortByPosition(true);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            PDFTextStripper tStripper \u003d new PDFTextStripper();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "            pdfFileInText \u003d tStripper.getText(document);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        return pdfFileInText.replaceAll(\"\\r\", \"\").replaceAll(\"\\n\", \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private String getMedicineInformationToString(Medicine medicineToPrint) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineName \u003d medicineToPrint.getName().toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineExpiry \u003d medicineToPrint.getNextExpiry().toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineQuantity \u003d medicineToPrint.getTotalQuantity().toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineCompany \u003d medicineToPrint.getCompany().toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String medicineTags \u003d medicineToPrint.getTags().toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        return (\"Name:\" + medicineName + \"\\n\" + \"Company:\" + medicineCompany + \"\\n\" + \"Quantity:\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + medicineQuantity + \"\\n\" + \"Expiry:\" + medicineExpiry + \"\\n\" + \"Tags:\" + medicineTags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMedicineAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 6,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstMedicine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteFirstMedicine(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteFirstMedicine(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.undoInventory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.undoInventory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteFirstMedicine(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteFirstMedicine(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 14,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMedicineAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_MEDICINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index lastMedicineIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_MEDICINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertExecutionSuccess(lastMedicineIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size() + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(expectedModel, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(expectedModel, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getInventory().getMedicineList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_MEDICINE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different medicine -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index},"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * and checks that the model\u0027s selected medicine is set to the medicine"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * at {@code index} in the filtered medicine list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_MEDICINE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setSelectedMedicine(model.getFilteredMedicineList().get(index.getZeroBased()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 30,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortDirection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortProperty sortProperty \u003d SortProperty.EXPIRY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortDirection sortDirection \u003d SortDirection.DESCENDING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        InformationPanelSettings informationPanelSettings \u003d new InformationPanelSettings(sortProperty, sortDirection);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(informationPanelSettings);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Inventory(model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setInformationPanelSettings(informationPanelSettings);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, informationPanelSettings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(sortCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        InformationPanelSettings informationPanelSettings \u003d new InformationPanelSettings(SortProperty.QUANTITY,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.DESCENDING);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortCommand sortCommand \u003d new SortCommand(informationPanelSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(sortCommand.equals(sortCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortCommand sortCommandCopy \u003d new SortCommand(informationPanelSettings);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(sortCommand.equals(sortCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(sortCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(sortCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortCommand otherSortCommand \u003d new SortCommand(new InformationPanelSettings(SortProperty.EXPIRY,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.DESCENDING));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(sortCommand.equals(otherSortCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstMedicine;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteFirstMedicine(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteFirstMedicine(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteFirstMedicine(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteFirstMedicine(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 10,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateBatchDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMOXICILLIN_BATCH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_GABAPENTIN_BATCH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.UpdateCommand.UpdateBatchDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.UpdateBatchDescriptorBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UpdateBatchDescriptorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor descriptorWithSameValues \u003d new UpdateBatchDescriptor(DESC_AMOXICILLIN_BATCH);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(DESC_AMOXICILLIN_BATCH.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(DESC_AMOXICILLIN_BATCH.equals(DESC_AMOXICILLIN_BATCH));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN_BATCH.equals(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN_BATCH.equals(5));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN_BATCH.equals(DESC_GABAPENTIN_BATCH));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor updateBatchDescriptor \u003d new UpdateBatchDescriptorBuilder(DESC_AMOXICILLIN_BATCH)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatchNumber(VALID_NAME_GABAPENTIN).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN_BATCH.equals(updateBatchDescriptor));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updateBatchDescriptor \u003d new UpdateBatchDescriptorBuilder(DESC_AMOXICILLIN_BATCH).withNoQuantity().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN_BATCH.equals(updateBatchDescriptor));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different expiry -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updateBatchDescriptor \u003d new UpdateBatchDescriptorBuilder(DESC_AMOXICILLIN_BATCH).withNoExpiry().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(DESC_AMOXICILLIN_BATCH.equals(updateBatchDescriptor));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BATCHNUMBER_AMOXICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_AMOXICILLIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMOXICILLIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showMedicineAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_MEDICINE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateBatchDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.BatchBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.UpdateBatchDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * UpdateCommand."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Batch defaultBatch \u003d new BatchBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_addNewBatchUnfilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(BatchBuilder.DEFAULT_QUANTITY).withAddedBatch(defaultBatch)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(BatchBuilder.DEFAULT_EXPIRY).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_SUCCESS, defaultBatch);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_addNewBatchUnfilteredListNoExpiry_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(medicineToUpdate.getBatches().containsKey(defaultBatch.getBatchNumber()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).withNoExpiry().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d UpdateCommand.MESSAGE_NEW_BATCH_MISSING_PARAMETER;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_addNewBatchUnfilteredListNoQuantity_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(medicineToUpdate.getBatches().containsKey(defaultBatch.getBatchNumber()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).withNoQuantity().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d UpdateCommand.MESSAGE_NEW_BATCH_MISSING_PARAMETER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_addNewBatchUnfilteredListZeroQuantity_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch newBatch \u003d new BatchBuilder().withQuantity(\"0\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(medicineToUpdate.getBatches().containsKey(newBatch.getBatchNumber()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(newBatch).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d UpdateCommand.MESSAGE_NEW_BATCH_ZERO_QUANTITY;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_updateExistingBatchUnfilteredListNoExpiry_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(INDEX_SECOND_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch batchToUpdate \u003d getExistingBatch(medicineToUpdate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch updatedBatch \u003d new BatchBuilder(batchToUpdate).withQuantity(VALID_QUANTITY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int changeInQuantity \u003d updatedBatch.getQuantity().getNumericValue() - batchToUpdate.getQuantity()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .getNumericValue();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(Integer.toString(changeInQuantity))"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(updatedBatch).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(updatedBatch).withNoExpiry().build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_SECOND_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_SUCCESS, updatedBatch);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_updateExistingBatchUnfilteredListNoQuantity_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index index \u003d INDEX_THIRD_MEDICINE;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch batchToUpdate \u003d getExistingBatch(medicineToUpdate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch updatedBatch \u003d new BatchBuilder(batchToUpdate).withExpiry(defaultBatch.getExpiry().toString()).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(updatedBatch).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(updatedBatch).withNoQuantity()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(index, newBatchDetails);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_SUCCESS, updatedBatch);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_removeBatchUnfilteredListNoOtherBatch_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index index \u003d INDEX_SECOND_MEDICINE; // IBUPROFEN only has one batch"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch batchToRemove \u003d getExistingBatch(medicineToUpdate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Map\u003cBatchNumber, Batch\u003e batches \u003d new HashMap\u003c\u003e(medicineToUpdate.getBatches());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batches.remove(batchToRemove.getBatchNumber());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withQuantity(\"0\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(\"-\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatches(batches).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch inputBatch \u003d new BatchBuilder(batchToRemove).withQuantity(\"0\").build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(inputBatch).withNoExpiry().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(index, newBatchDetails);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_SUCCESS, inputBatch);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_removeBatchUnfilteredListOneOtherBatch_success() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index index \u003d INDEX_THIRD_MEDICINE; // LEVOTHYROXINE has 3 batches"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch batchToRemove \u003d getExistingBatch(medicineToUpdate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Map\u003cBatchNumber, Batch\u003e batches \u003d new HashMap\u003c\u003e(medicineToUpdate.getBatches());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batches.remove(batchToRemove.getBatchNumber());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int newQuantity \u003d medicineToUpdate.getTotalQuantity().getNumericValue()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                - batchToRemove.getQuantity().getNumericValue();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Expiry newExpiry \u003d batches.values().stream().min(Comparator.comparing(Batch::getExpiry)).get().getExpiry();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withQuantity(Integer.toString(newQuantity))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(newExpiry.toString())"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatches(batches).build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch inputBatch \u003d new BatchBuilder(batchToRemove).withQuantity(\"0\").build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(inputBatch).withNoExpiry().build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(index, newBatchDetails);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_SUCCESS, inputBatch);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineInFilteredList \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineInFilteredList)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(BatchBuilder.DEFAULT_QUANTITY)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(BatchBuilder.DEFAULT_EXPIRY)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(defaultBatch)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_SUCCESS, defaultBatch);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineInFilteredList, updatedMedicine);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(expectedModel, INDEX_FIRST_MEDICINE); // List should remain filtered after update"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setSelectedMedicine(updatedMedicine);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(updateCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_invalidMedicineIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size() + 1);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, newBatchDetails);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_exceedMaxQuantityUnfilteredList_failure() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch newBatch \u003d new BatchBuilder().withQuantity(Integer.toString(Quantity.MAX_QUANTITY)).build();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Try to add max quantity to the second medicine in the inventory."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(newBatch).build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_SECOND_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d UpdateCommand.MESSAGE_MAX_QUANTITY_EXCEEDED;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_expiredBatchUnfilteredList_failure() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch newBatch \u003d new BatchBuilder().withExpiry(\"1/1/2000\").build();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Try to add expired batch to the first medicine in the inventory."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(newBatch).build();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d UpdateCommand.MESSAGE_EXPIRED_BATCH;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_tooManyBatchesUnfilteredList_failure() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Map\u003cBatchNumber, Batch\u003e batches \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Expiry expiry \u003d new Expiry(VALID_EXPIRY_AMOXICILLIN);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Quantity quantity \u003d new Quantity(VALID_QUANTITY_AMOXICILLIN);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c Medicine.MAX_SIZE_BATCH; i++) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            BatchNumber batchNumber \u003d new BatchNumber(Integer.toString(i));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            batches.put(batchNumber, new Batch(batchNumber, quantity, expiry));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // name the medicine \"1\" to be at the first medicine in the sorted list"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicine \u003d new MedicineBuilder().withName(\"1\").withBatches(batches).build();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.addMedicine(medicine);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Try to add a batch to a medicine with max number of batch"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d Medicine.MESSAGE_CONSTRAINTS_BATCHES;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Update filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * but smaller than size of inventory"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void execute_invalidMedicineIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory list"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getInventory().getMedicineList().size());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, newBatchDetails);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredListNewBatch_success() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(BatchBuilder.DEFAULT_QUANTITY)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(BatchBuilder.DEFAULT_EXPIRY)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(defaultBatch)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // update -\u003e first medicine updated"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updateCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // undo -\u003e reverts Inventory back to previous state and filtered medicine list to show all medicines"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // redo -\u003e same first medicine updated again"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredListExistingBatch_success() throws Exception {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index index \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch batchToUpdate \u003d getExistingBatch(medicineToUpdate);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch updatedBatch \u003d new BatchBuilder(batchToUpdate).withQuantity(VALID_QUANTITY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int changeInQuantity \u003d updatedBatch.getQuantity().getNumericValue() - batchToUpdate.getQuantity()"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .getNumericValue();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(Integer.toString(changeInQuantity))"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(updatedBatch).build();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(updatedBatch).withNoExpiry().build();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(index, newBatchDetails);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // update -\u003e second medicine updated"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updateCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // undo -\u003e reverts Inventory back to previous state and filtered medicine list to show all medicines"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // redo -\u003e same first medicine updated again"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredListRemoveBatch_success() throws Exception {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Index index \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Map\u003cBatchNumber, Batch\u003e batches \u003d new HashMap\u003c\u003e(medicineToUpdate.getBatches());"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch batchToRemove \u003d getExistingBatch(medicineToUpdate);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batches.remove(batchToRemove.getBatchNumber());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int changeInQuantity \u003d -(batchToRemove.getQuantity().getNumericValue());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String updatedExpiry;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (batches.size() \u003e 0) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            updatedExpiry \u003d batches.values().stream()"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    .min(Comparator.comparing(Batch::getExpiry)).get().getExpiry().toString();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            updatedExpiry \u003d \"-\";"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(Integer.toString(changeInQuantity))"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(updatedExpiry)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatches(batches).build();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(batchToRemove).withQuantity(\"0\")"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withNoExpiry().build();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(index, newBatchDetails);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // update -\u003e second medicine updated"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updateCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // undo -\u003e reverts Inventory back to previous state and filtered medicine list to show all medicines"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // redo -\u003e same second medicine updated again"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredMedicineList().size() + 1);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of inventory list"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003e\u003d model.getInventory().getMedicineList().size());"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, newBatchDetails);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // execution failed -\u003e inventory state not added into model"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(updateCommand, model, commandHistory, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // single inventory state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 1. Updates a {@code Medicine} from a filtered list."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 2. Undo the update."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously updated medicine in the"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. Redo the update. This ensures {@code RedoCommand} updates the medicine object regardless of indexing."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameMedicineUpdated() throws Exception {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(INDEX_SECOND_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(BatchBuilder.DEFAULT_QUANTITY)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(defaultBatch)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicineAtIndex(model, INDEX_SECOND_MEDICINE);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineToUpdate \u003d model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getExpectedModel(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setSelectedMedicine(null);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // update -\u003e updates second medicine in unfiltered medicine list / first medicine in filtered medicine list"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updateCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // undo -\u003e reverts Inventory back to previous state and filtered medicine list to show all medicines"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.undoInventory();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertNotEquals(model.getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased()), medicineToUpdate);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // redo -\u003e updates same second medicine in unfiltered medicine list"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.redoInventory();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder(defaultBatch).build();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(INDEX_FIRST_MEDICINE, newBatchDetails);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_SECOND_MEDICINE, newBatchDetails)));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different UpdateBatchDescriptor -\u003e returns false"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch differentBatch \u003d new BatchBuilder().withBatchNumber(VALID_BATCHNUMBER_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor differentBatchDetails \u003d new UpdateBatchDescriptorBuilder(differentBatch).build();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_FIRST_MEDICINE, differentBatchDetails)));"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the expected model after replacing medicineToUpdate with updatedMedicine"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Model getExpectedModel(Medicine medicineToUpdate, Medicine updatedMedicine) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Inventory(model.getInventory()), new UserPrefs());"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setMedicine(medicineToUpdate, updatedMedicine);"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.commitInventory();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setSelectedMedicine(updatedMedicine);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return expectedModel;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns an existing batch from medicineToUpdate."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Batch getExistingBatch(Medicine medicineToUpdate) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Iterator\u003cBatch\u003e iter \u003d medicineToUpdate.getBatches().values().iterator();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(iter.hasNext());"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return iter.next();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 486,
      "flxffy": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/WarningCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SHOW_CURRENT_THRESHOLDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.ACETAMINOPHEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.IBUPROFEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.LEVOTHYROXINE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.LISINOPRIL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code WarningCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "@SuppressWarnings(\"ALL\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalInventory(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void constructor_nullWarningPanelPredicateType_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            -\u003e new WarningCommand(null, new Threshold(\"0\", WarningPanelPredicateType.EXPIRY)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            -\u003e new WarningCommand(null, new Threshold(\"0\", WarningPanelPredicateType.LOW_STOCK)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void constructor_nullThreshold_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new WarningCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.EXPIRY, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void constructor_nullShowString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new WarningCommand(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold firstThreshold \u003d Model.DEFAULT_EXPIRY_THRESHOLD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold secondThreshold \u003d Model.DEFAULT_LOW_STOCK_THRESHOLD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateType firstType \u003d WarningPanelPredicateType.EXPIRY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateType secondType \u003d WarningPanelPredicateType.LOW_STOCK;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand warningFirstCommand \u003d new WarningCommand(firstType, firstThreshold);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand warningSecondCommand \u003d new WarningCommand(secondType, secondThreshold);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand warningThirdCommand \u003d new WarningCommand(true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(warningFirstCommand.equals(warningFirstCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand warningFirstCommandCopy \u003d new WarningCommand(firstType, firstThreshold);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(warningFirstCommand.equals(warningFirstCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(warningFirstCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(warningFirstCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different command -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(warningFirstCommand.equals(warningSecondCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(warningFirstCommand.equals(warningThirdCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void execute_show_defaultThresholds() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SHOW_CURRENT_THRESHOLDS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue() \u003d\u003d 1 ? \"\" : \"s\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                Model.DEFAULT_LOW_STOCK_THRESHOLD.getNumericValue());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand command \u003d new WarningCommand(true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(Model.DEFAULT_EXPIRY_THRESHOLD,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                model.getWarningPanelThreshold(WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(Model.DEFAULT_LOW_STOCK_THRESHOLD,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                model.getWarningPanelThreshold(WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void execute_changeExpiryThreshold_zeroExpiringMedicine() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SHOW_CURRENT_THRESHOLDS,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                0, \"s\", Model.DEFAULT_LOW_STOCK_THRESHOLD.getNumericValue());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold threshold \u003d new Threshold(\"0\", WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand command \u003d new WarningCommand(WarningPanelPredicateType.EXPIRY, threshold);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        expectedModel.changeWarningPanelListThreshold(WarningPanelPredicateType.EXPIRY, threshold);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getExpiringMedicinesList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void execute_changeExpiryThreshold_multipleExpiringMedicines() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SHOW_CURRENT_THRESHOLDS,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                180, \"s\", Model.DEFAULT_LOW_STOCK_THRESHOLD.getNumericValue());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold threshold \u003d new Threshold(\"180\", WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand command \u003d new WarningCommand(WarningPanelPredicateType.EXPIRY, threshold);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        expectedModel.changeWarningPanelListThreshold(WarningPanelPredicateType.EXPIRY, threshold);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        expectedModel.updateFilteredMedicineList(medicine -\u003e medicine.getNextExpiry() !\u003d null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(Arrays.asList(IBUPROFEN, LEVOTHYROXINE, LISINOPRIL), model.getExpiringMedicinesList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void execute_changeLowStockThreshold_zeroLowStockMedicines() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SHOW_CURRENT_THRESHOLDS,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue(),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue() \u003d\u003d 1 ? \"\" : \"s\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                Quantity.MAX_QUANTITY + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold threshold \u003d new Threshold(Integer.toString(Threshold.MAX_QUANTITY_THRESHOLD),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand command \u003d new WarningCommand(WarningPanelPredicateType.LOW_STOCK, threshold);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        expectedModel.changeWarningPanelListThreshold(WarningPanelPredicateType.LOW_STOCK, threshold);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(model.getFilteredMedicineList(), model.getLowStockMedicinesList());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void execute_changeLowStockThreshold_multipleLowStockMedicines() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SHOW_CURRENT_THRESHOLDS,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue() \u003d\u003d 1 ? \"\" : \"s\", 0);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold threshold \u003d new Threshold(\"0\", WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCommand command \u003d new WarningCommand(WarningPanelPredicateType.LOW_STOCK, threshold);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        expectedModel.changeWarningPanelListThreshold(WarningPanelPredicateType.LOW_STOCK, threshold);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(Arrays.asList(ACETAMINOPHEN), model.getLowStockMedicinesList());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "flxffy": 164
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPIRY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_GABAPENTIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.GABAPENTIN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Medicine expectedMedicine \u003d new MedicineBuilder(GABAPENTIN).withTags(VALID_TAG_FEVER).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_GABAPENTIN + COMPANY_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_FEVER, new AddCommand(expectedMedicine));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMOXICILLIN + NAME_DESC_GABAPENTIN + COMPANY_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_FEVER, new AddCommand(expectedMedicine));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // multiple companies - last company accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GABAPENTIN + COMPANY_DESC_AMOXICILLIN + COMPANY_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_FEVER, new AddCommand(expectedMedicine));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine expectedMedicineMultipleTags \u003d new MedicineBuilder(GABAPENTIN)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withTags(VALID_TAG_FEVER, VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GABAPENTIN + COMPANY_DESC_GABAPENTIN + TAG_DESC_PAINKILER + TAG_DESC_FEVER,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new AddCommand(expectedMedicineMultipleTags));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine expectedMedicine \u003d new MedicineBuilder(GABAPENTIN).withTags().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_GABAPENTIN + COMPANY_DESC_GABAPENTIN,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new AddCommand(expectedMedicine));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_GABAPENTIN + COMPANY_DESC_GABAPENTIN, expectedMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // missing company prefix"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GABAPENTIN + QUANTITY_DESC_GABAPENTIN + EXPIRY_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + VALID_COMPANY_GABAPENTIN, expectedMessage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_GABAPENTIN + VALID_COMPANY_GABAPENTIN, expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + COMPANY_DESC_GABAPENTIN + TAG_DESC_PAINKILER"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_FEVER, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid company"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GABAPENTIN + INVALID_COMPANY_DESC + TAG_DESC_PAINKILER"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_FEVER, Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_GABAPENTIN + COMPANY_DESC_GABAPENTIN + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + VALID_TAG_FEVER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_COMPANY_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_GABAPENTIN + COMPANY_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_PAINKILER + TAG_DESC_FEVER, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_tooManyTags_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sb.append(NAME_DESC_GABAPENTIN).append(COMPANY_DESC_GABAPENTIN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c Medicine.MAX_SIZE_TAG + 1; i++) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            sb.append(\" \").append(PREFIX_TAG).append(i);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, sb.toString(), String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Medicine.MESSAGE_CONSTRAINTS_TAGS));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 44,
      "melpulomas": 16,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_MEDICINE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMOXICILLIN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_GABAPENTIN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMOXICILLIN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_MEDICINE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditMedicineDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.EditMedicineDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMOXICILLIN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMOXICILLIN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMOXICILLIN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_COMPANY_DESC, Company.MESSAGE_CONSTRAINTS); // invalid company name"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Medicine} being edited,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FEVER + TAG_DESC_PAINKILER + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FEVER + TAG_EMPTY + TAG_DESC_PAINKILER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FEVER + TAG_DESC_PAINKILER, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_COMPANY_AMOXICILLIN + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_tooManyTags_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sb.append(\"1 \").append(NAME_DESC_GABAPENTIN).append(COMPANY_DESC_GABAPENTIN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c Medicine.MAX_SIZE_TAG + 1; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            sb.append(\" \").append(PREFIX_TAG).append(i);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, sb.toString(), String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Medicine.MESSAGE_CONSTRAINTS_TAGS));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_PAINKILER + COMPANY_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + NAME_DESC_AMOXICILLIN + TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withName(VALID_NAME_AMOXICILLIN)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withCompany(VALID_COMPANY_AMOXICILLIN).withTags(VALID_TAG_PAINKILLER, VALID_TAG_FEVER).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMOXICILLIN + COMPANY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withName(VALID_NAME_AMOXICILLIN)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withCompany(VALID_COMPANY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MEDICINE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withName(VALID_NAME_AMOXICILLIN)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // company"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COMPANY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor \u003d new EditMedicineDescriptorBuilder().withCompany(VALID_COMPANY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        descriptor \u003d new EditMedicineDescriptorBuilder().withTags(VALID_TAG_FEVER).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + COMPANY_DESC_AMOXICILLIN + TAG_DESC_FEVER"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + COMPANY_DESC_AMOXICILLIN + TAG_DESC_FEVER + COMPANY_DESC_GABAPENTIN + TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withCompany(VALID_COMPANY_GABAPENTIN)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withTags(VALID_TAG_FEVER, VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_COMPANY_DESC + COMPANY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withCompany(VALID_COMPANY_GABAPENTIN)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FEVER + INVALID_COMPANY_DESC + NAME_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + COMPANY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        descriptor \u003d new EditMedicineDescriptorBuilder().withTags(VALID_TAG_FEVER)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withCompany(VALID_COMPANY_GABAPENTIN).withName(VALID_NAME_GABAPENTIN).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_MEDICINE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 57,
      "melpulomas": 17,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ExportCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT_DETAILED;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public class ExportCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    private ExportCommandParser parser \u003d new ExportCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void parse_optionalFileNameFieldPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        FileName expectedFileName \u003d new FileName(\"example\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // file name present as argument"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseSuccess(parser, \"example\", new ExportCommand(expectedFileName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void parse_optionalFileNameFieldsMissing_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        SimpleDateFormat currentDateAndTimeFormat \u003d new SimpleDateFormat(\"dd_MMM_yyyy_HH_mm_ss\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        String fileName \u003d currentDateAndTimeFormat.format(new Date());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        FileName expectedFileName \u003d new FileName(fileName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // no input file name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseSuccess(parser, \"\", new ExportCommand(expectedFileName));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name (hyphen only)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseFailure(parser, \"-\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_DETAILED, FileName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name (underscore only)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseFailure(parser, \"_\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_DETAILED, FileName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name (only not supported non-alphanumeric characters)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseFailure(parser, \"*\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_DETAILED, FileName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name (contains not supported non-alphanumeric characters)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseFailure(parser, \"example*\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_DETAILED, FileName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name (alphabets with a space only)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseFailure(parser, \"example record\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_DETAILED, FileName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name (alphabets with a file format)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseFailure(parser, \"exampleRecord.csv\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_DETAILED, FileName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        // invalid file name (file format)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertParseFailure(parser, \".csv\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT_DETAILED, FileName.MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "                        ExportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BATCHNUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.BatchContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.CompanyContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_hasPreamble_throwsParseException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + PREFIX_NAME + \"keyword\" ,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_multiplePrefixes_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME + \"Paracetamol \" + PREFIX_COMPANY + \" 3M\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_noKeywords_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_NAME, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Paracetamol\", \"Gabapentin\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \" Paracetamol Gabapentin\", expectedFindCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_NAME + \" \\n Paracetamol \\n \\t Gabapentin  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // find company"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new CompanyContainsKeywordsPredicate(Arrays.asList(\"3M\", \"Johnson\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_COMPANY + \" 3M Johnson\", expectedFindCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // find tag"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new TagContainsKeywordsPredicate(Arrays.asList(\"fever\", \"painkiller\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_TAG + \" fever painkiller\", expectedFindCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // find batch"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new BatchContainsKeywordsPredicate(Arrays.asList(\"CD485\", \"CD486\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, \" \" + PREFIX_BATCHNUMBER + \" CD485 CD486\", expectedFindCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 41,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/InventoryParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditMedicineDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.EditMedicineDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.testutil.ExportUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InventoryParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final InventoryParser parser \u003d new InventoryParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicine \u003d new MedicineBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(MedicineUtil.getAddCommand(medicine));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(new AddCommand(medicine), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_MEDICINE), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicine \u003d new MedicineBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        EditMedicineDescriptor descriptor \u003d new EditMedicineDescriptorBuilder(medicine).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + INDEX_FIRST_MEDICINE.getOneBased() + \" \" + MedicineUtil.getEditMedicineDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_MEDICINE, descriptor), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_MEDICINE), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public void parseCommand_exportCommandWord_returnsExportCommand() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        FileName fileName \u003d new FileName(\"example\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        ExportCommand command \u003d (ExportCommand) parser.parseCommand(ExportUtil.getExportCommand(fileName));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        assertEquals(new ExportCommand(fileName), command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 23,
      "JonathanLeeWH": 10,
      "-": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LabelCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.LabelCommand.DEFAULT_FILENAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import seedu.address.logic.commands.LabelCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "public class LabelCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    private LabelCommandParser parser \u003d new LabelCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public void parse_optionalFileNameFieldDefault_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        FileName expectedFileName \u003d new FileName(DEFAULT_FILENAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String userInput \u003d (\"1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Index index \u003d new Index(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseSuccess(parser, userInput, new LabelCommand(index, expectedFileName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public void parse_optionalFileNameFieldPresent_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        FileName expectedFileName \u003d new FileName(\"newFile\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String userInput \u003d (\"1 f/newFile\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Index index \u003d new Index(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseSuccess(parser, userInput, new LabelCommand(index, expectedFileName));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LabelCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        // missing all inputs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        // missing file prefix with index"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"1 noFilePrefix\", expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        // missing file prefix without index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"noFilePrefix\", expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        // missing index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"f/newFile\", expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        // missing index without fileName"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"f/\", expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, LabelCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        // Invalid User Input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"-\", expectedMessage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        // Invalid File name (no spacing allowed)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        assertParseFailure(parser, \"1 f/new File\", expectedMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melpulomas"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melpulomas": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"+651234\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \" \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_EXPIRY \u003d \"30-9-2019\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_QUANTITY \u003d \"123456\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_COMPANY \u003d \"Roche\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_EXPIRY \u003d \"30/9/2019\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(INDEX_FIRST_MEDICINE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(INDEX_FIRST_MEDICINE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseQuantity_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseQuantity((String) null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseQuantity_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseQuantity(INVALID_QUANTITY));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseQuantity_validValueWithoutWhitespace_returnsQuantity() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedQuantity, ParserUtil.parseQuantity(VALID_QUANTITY));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseQuantity_validValueWithWhitespace_returnsTrimmedQuantity() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String quantityWithWhitespace \u003d WHITESPACE + VALID_QUANTITY + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Quantity expectedQuantity \u003d new Quantity(VALID_QUANTITY);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedQuantity, ParserUtil.parseQuantity(quantityWithWhitespace));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseCompany_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCompany((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseCompany_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCompany(INVALID_COMPANY));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseCompany_validValueWithoutWhitespace_returnsCompany() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Company expectedCompany \u003d new Company(VALID_COMPANY);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedCompany, ParserUtil.parseCompany(VALID_COMPANY));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseCompany_validValueWithWhitespace_returnsTrimmedCompany() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String companyWithWhitespace \u003d WHITESPACE + VALID_COMPANY + WHITESPACE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Company expectedCompany \u003d new Company(VALID_COMPANY);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedCompany, ParserUtil.parseCompany(companyWithWhitespace));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseExpiry_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseExpiry((String) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseExpiry_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseExpiry(INVALID_EXPIRY));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseExpiry_validValueWithoutWhitespace_returnsExpiry() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Expiry expectedExpiry \u003d new Expiry(VALID_EXPIRY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedExpiry, ParserUtil.parseExpiry(VALID_EXPIRY));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parseExpiry_validValueWithWhitespace_returnsTrimmedExpiry() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expiryWithWhitespace \u003d WHITESPACE + VALID_EXPIRY + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Expiry expectedExpiry \u003d new Expiry(VALID_EXPIRY);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedExpiry, ParserUtil.parseExpiry(expiryWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 46,
      "-": 162
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_MEDICINE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 2,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIRECTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROPERTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortDirection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortProperty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_INPUT_PROPERTY_EXPIRY \u003d \" \" + PREFIX_PROPERTY + SortProperty.EXPIRY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_INPUT_PROPERTY_BATCHNUMBER \u003d \" \" + PREFIX_PROPERTY + SortProperty.BATCHNUMBER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_INPUT_DIRECTION_DESCENDING \u003d \" \" + PREFIX_DIRECTION + SortDirection.DESCENDING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_INPUT_DIRECTION_ASCENDING \u003d \" \" + PREFIX_DIRECTION + SortDirection.ASCENDING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_INPUT_PROPERTY \u003d \" \" + PREFIX_PROPERTY + \"expir\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_INPUT_DIRECTION \u003d \" \" + PREFIX_DIRECTION + \"down\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no sortProperty"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, VALID_INPUT_DIRECTION_DESCENDING, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no sortDirection"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, VALID_INPUT_PROPERTY_EXPIRY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Any preamble"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + VALID_INPUT_PROPERTY_EXPIRY + VALID_INPUT_DIRECTION_DESCENDING,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid sortProperty"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, INVALID_INPUT_PROPERTY + VALID_INPUT_DIRECTION_DESCENDING,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortProperty.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid sortDirection"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, VALID_INPUT_PROPERTY_EXPIRY + INVALID_INPUT_DIRECTION,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d VALID_INPUT_PROPERTY_EXPIRY + VALID_INPUT_DIRECTION_DESCENDING;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortCommand expectedCommand \u003d new SortCommand(new InformationPanelSettings(SortProperty.EXPIRY,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.DESCENDING));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d VALID_INPUT_PROPERTY_EXPIRY + VALID_INPUT_DIRECTION_DESCENDING"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + VALID_INPUT_DIRECTION_ASCENDING;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortCommand expectedCommand \u003d new SortCommand(new InformationPanelSettings(SortProperty.EXPIRY,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.ASCENDING));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d INVALID_INPUT_PROPERTY + VALID_INPUT_PROPERTY_EXPIRY + VALID_INPUT_DIRECTION_DESCENDING;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        SortCommand expectedCommand \u003d new SortCommand(new InformationPanelSettings(SortProperty.EXPIRY,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.DESCENDING));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userInput \u003d INVALID_INPUT_PROPERTY + VALID_INPUT_PROPERTY_EXPIRY + VALID_INPUT_DIRECTION_DESCENDING"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + VALID_INPUT_PROPERTY_BATCHNUMBER;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedCommand \u003d new SortCommand(new InformationPanelSettings(SortProperty.BATCHNUMBER,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.DESCENDING));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BATCHNUMBER_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BATCHNUMBER_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BATCHNUMBER_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPIRY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BATCHNUMBER_AMOXICILLIN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BATCHNUMBER_GABAPENTIN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_AMOXICILLIN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMOXICILLIN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_GABAPENTIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateBatchDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.UpdateBatchDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, BATCHNUMBER_DESC_AMOXICILLIN, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1\", UpdateCommand.MESSAGE_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no batch number"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" \" + QUANTITY_DESC_AMOXICILLIN, UpdateCommand.MESSAGE_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no quantity and expiry"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1\" + \" \" + BATCHNUMBER_DESC_AMOXICILLIN, UpdateCommand.MESSAGE_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"-5\" + BATCHNUMBER_DESC_AMOXICILLIN + QUANTITY_DESC_AMOXICILLIN,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"0\" + BATCHNUMBER_DESC_AMOXICILLIN + QUANTITY_DESC_AMOXICILLIN,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BATCHNUMBER_DESC + QUANTITY_DESC_AMOXICILLIN + EXPIRY_DESC_AMOXICILLIN,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                BatchNumber.MESSAGE_CONSTRAINTS); // invalid batch number"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1\" + BATCHNUMBER_DESC_AMOXICILLIN + INVALID_QUANTITY_DESC + EXPIRY_DESC_AMOXICILLIN,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Quantity.MESSAGE_CONSTRAINTS); // invalid quantity"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseFailure(parser, \"1\" + BATCHNUMBER_DESC_AMOXICILLIN + QUANTITY_DESC_AMOXICILLIN + INVALID_EXPIRY_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Expiry.MESSAGE_CONSTRAINTS); // invalid expiry"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + BATCHNUMBER_DESC_AMOXICILLIN + QUANTITY_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatchNumber(VALID_BATCHNUMBER_AMOXICILLIN).withQuantity(VALID_QUANTITY_AMOXICILLIN)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(VALID_EXPIRY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, newBatchDetails);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_expiryNotSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + BATCHNUMBER_DESC_GABAPENTIN + QUANTITY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatchNumber(VALID_BATCHNUMBER_GABAPENTIN).withQuantity(VALID_QUANTITY_GABAPENTIN).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, newBatchDetails);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_quantityNotSpecified_success() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + BATCHNUMBER_DESC_GABAPENTIN + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatchNumber(VALID_BATCHNUMBER_GABAPENTIN).withExpiry(VALID_EXPIRY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, newBatchDetails);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + BATCHNUMBER_DESC_GABAPENTIN + QUANTITY_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + EXPIRY_DESC_AMOXICILLIN + BATCHNUMBER_DESC_GABAPENTIN + QUANTITY_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_GABAPENTIN + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatchNumber(VALID_BATCHNUMBER_GABAPENTIN).withQuantity(VALID_QUANTITY_AMOXICILLIN)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(VALID_EXPIRY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, newBatchDetails);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_AMOXICILLIN + INVALID_BATCHNUMBER_DESC"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateBatchDescriptor newBatchDetails \u003d new UpdateBatchDescriptorBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatchNumber(VALID_BATCHNUMBER_GABAPENTIN).withQuantity(VALID_QUANTITY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, newBatchDetails);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + QUANTITY_DESC_AMOXICILLIN + INVALID_BATCHNUMBER_DESC"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_GABAPENTIN + QUANTITY_DESC_GABAPENTIN + BATCHNUMBER_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        newBatchDetails \u003d new UpdateBatchDescriptorBuilder()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withBatchNumber(VALID_BATCHNUMBER_AMOXICILLIN).withQuantity(VALID_QUANTITY_GABAPENTIN)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(VALID_EXPIRY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, newBatchDetails);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 158
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/WarningCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPIRY_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EXPIRY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.logic.commands.WarningCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private WarningCommandParser parser \u003d new WarningCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String lowStockInput \u003d \" \" + PREFIX_QUANTITY + Model.DEFAULT_LOW_STOCK_THRESHOLD.getNumericValue();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String expiryInput \u003d \" \" + PREFIX_EXPIRY + Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // without additional whitespace"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseSuccess(parser, lowStockInput,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new WarningCommand(WarningPanelPredicateType.LOW_STOCK, Model.DEFAULT_LOW_STOCK_THRESHOLD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseSuccess(parser, expiryInput,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new WarningCommand(WarningPanelPredicateType.EXPIRY, Model.DEFAULT_EXPIRY_THRESHOLD));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + lowStockInput,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new WarningCommand(WarningPanelPredicateType.LOW_STOCK, Model.DEFAULT_LOW_STOCK_THRESHOLD));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + expiryInput,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new WarningCommand(WarningPanelPredicateType.EXPIRY, Model.DEFAULT_EXPIRY_THRESHOLD));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // case insensitive \"show\" option"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseSuccess(parser, \" \" + \"SHOW\", new WarningCommand(true));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseSuccess(parser, \" \" + \"show\", new WarningCommand(true));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseSuccess(parser, \" \" + \"ShOw\", new WarningCommand(true));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, WarningCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // missing expiry prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseFailure(parser, \" \" + Model.DEFAULT_EXPIRY_THRESHOLD.value, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // missing quantity prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseFailure(parser, \" \" + Model.DEFAULT_LOW_STOCK_THRESHOLD.value, expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // all fields missing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseFailure(parser, \"\", expectedMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, WarningCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // invalid expiry"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseFailure(parser, INVALID_EXPIRY_DESC, Threshold.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseFailure(parser, INVALID_QUANTITY_DESC, Threshold.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // space in word \"show\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseFailure(parser, \" \" + \"sh ow\", expectedMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + PREFIX_QUANTITY + Model.DEFAULT_LOW_STOCK_THRESHOLD.value,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + PREFIX_EXPIRY + Model.DEFAULT_EXPIRY_THRESHOLD.value,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/model/InventoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_AMOXICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.PARACETAMOL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.beans.InvalidationListener;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.exceptions.DuplicateMedicineException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InventoryTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Collections.emptyList(), inventory.getMedicineList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.resetData(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void resetData_withValidReadOnlyInventory_replacesData() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory newData \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.resetData(newData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(newData, inventory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void resetData_withDuplicateMedicines_throwsDuplicateMedicineException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Two medicines with the same identity fields"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        Medicine editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e newMedicines \u003d Arrays.asList(PARACETAMOL, editedParacetamol);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        InventoryStub newData \u003d new InventoryStub(newMedicines);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(DuplicateMedicineException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void hasMedicine_nullMedicine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.hasMedicine(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void hasMedicine_medicineNotInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(inventory.hasMedicine(PARACETAMOL));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void hasMedicine_medicineInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(inventory.hasMedicine(PARACETAMOL));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void hasMedicine_medicineWithSameIdentityFieldsInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withExpiry(VALID_EXPIRY_AMOXICILLIN)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(inventory.hasMedicine(editedParacetamol));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void getMedicineList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.getMedicineList().remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addListener_withInvalidationListener_listenerAdded() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.addListener(listener);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, counter.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removeListener_withInvalidationListener_listenerRemoved() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        SimpleIntegerProperty counter \u003d new SimpleIntegerProperty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        InvalidationListener listener \u003d observable -\u003e counter.set(counter.get() + 1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.addListener(listener);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.removeListener(listener);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, counter.get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * A stub ReadOnlyInventory whose medicines list can violate interface constraints."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static class InventoryStub implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        private final ObservableList\u003cMedicine\u003e medicines \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        InventoryStub(Collection\u003cMedicine\u003e medicines) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            this.medicines.setAll(medicines);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        public ObservableList\u003cMedicine\u003e getMedicineList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            return medicines;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        public ObservableList\u003cMedicine\u003e getSortedMedicineList(Comparator\u003cMedicine\u003e comparator) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            return new SortedList\u003c\u003e(medicines, comparator);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public void removeListener(InvalidationListener listener) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 45,
      "melpulomas": 3,
      "-": 90,
      "flxffy": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_GABAPENTIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEDICINES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.GABAPENTIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.IBUPROFEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.PARACETAMOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.WarningPanelSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.exceptions.MedicineNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineExpiryThresholdPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineLowStockThresholdPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.InventoryBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(new WarningPanelSettings(), modelManager.getWarningPanelSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(new Inventory(), new Inventory(modelManager.getInventory()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(null, modelManager.getSelectedMedicine());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(new WarningPanelPredicateAccessor(), modelManager.getWarningPanelPredicateAccessor());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"inventory/file/path\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"new/inventory/file/path\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setWarningPanelSettings_nullWarningPanelSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.setWarningPanelSettings(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setWarningPanelSettings_validWarningPanelSettings_setsWarningPanelSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelSettings warningPanelSettings \u003d new WarningPanelSettings(1, 2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.setWarningPanelSettings(warningPanelSettings);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(warningPanelSettings, modelManager.getWarningPanelSettings());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void configureWarningPanelLists_expiryThresholdExceedsMax() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelSettings actualSetting \u003d new WarningPanelSettings(Threshold.MAX_EXPIRY_THRESHOLD + 1, 2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelSettings expectedSetting \u003d new WarningPanelSettings(Threshold.MAX_EXPIRY_THRESHOLD, 2);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.setWarningPanelSettings(actualSetting);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.configureWarningPanelLists();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(expectedSetting, modelManager.getWarningPanelSettings());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.setInventoryFilePath(null);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setInventoryFilePath_validPath_setsInventoryFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Path path \u003d Paths.get(\"inventory/file/path\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.setInventoryFilePath(path);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(path, modelManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void hasMedicine_nullMedicine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.hasMedicine(null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void hasMedicine_medicineNotInInventory_returnsFalse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(modelManager.hasMedicine(PARACETAMOL));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void hasMedicine_medicineInInventory_returnsTrue() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(modelManager.hasMedicine(PARACETAMOL));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void deleteMedicine_medicineIsSelectedAndFirstMedicineInFilteredMedicineList_selectionCleared() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.setSelectedMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.deleteMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(null, modelManager.getSelectedMedicine());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void deleteMedicine_medicineIsSelectedAndSecondMedicineInFilteredMedicineList_firstMedicineSelected() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.addMedicine(GABAPENTIN);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(Arrays.asList(GABAPENTIN, PARACETAMOL), modelManager.getFilteredMedicineList());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.setSelectedMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.deleteMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(GABAPENTIN, modelManager.getSelectedMedicine());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine_medicineIsSelected_selectedMedicineUpdated() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.setSelectedMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withExpiry(VALID_EXPIRY_GABAPENTIN).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.setMedicine(PARACETAMOL, updatedParacetamol);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(updatedParacetamol, modelManager.getSelectedMedicine());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void getFilteredMedicineList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.getFilteredMedicineList().remove(0);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void getExpiringMedicinesList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.getExpiringMedicinesList().remove(0);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void getLowStockMedicinesList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.getLowStockMedicinesList().remove(0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void updateFilteredMedicineList_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.updateFilteredMedicineList(null);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void updateFilteredExpiringMedicineList_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.updateFilteredExpiringMedicineList(null);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void updateFilteredLowStockMedicineList_nullPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.updateFilteredLowStockMedicineList(null);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setSelectedMedicine_medicineNotInFilteredMedicineList_throwsMedicineNotFoundException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(MedicineNotFoundException.class);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.setSelectedMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setSelectedMedicine_medicineInFilteredMedicineList_setsSelectedMedicine() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.addMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Collections.singletonList(PARACETAMOL), modelManager.getFilteredMedicineList());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.setSelectedMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(PARACETAMOL, modelManager.getSelectedMedicine());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory inventory \u003d new InventoryBuilder().withMedicine(PARACETAMOL).withMedicine(IBUPROFEN).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory differentInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager \u003d new ModelManager(inventory, userPrefs);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(inventory, userPrefs);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different inventory -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentInventory, userPrefs)));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different filteredMedicineList -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String[] keywords \u003d PARACETAMOL.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.updateFilteredMedicineList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(inventory, userPrefs)));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        modelManager.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different filteredExpiringMedicineList -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold threshold \u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MAX_EXPIRY_THRESHOLD), WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.updateFilteredExpiringMedicineList(new MedicineExpiryThresholdPredicate(threshold));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(inventory, userPrefs)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.updateFilteredExpiringMedicineList("
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new MedicineExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different filteredLowStockMedicineList -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        threshold \u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MAX_QUANTITY_THRESHOLD), WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.updateFilteredLowStockMedicineList(new MedicineLowStockThresholdPredicate(threshold));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(inventory, userPrefs)));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        modelManager.updateFilteredLowStockMedicineList("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new MedicineLowStockThresholdPredicate(Model.DEFAULT_LOW_STOCK_THRESHOLD));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        differentUserPrefs.setInventoryFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(inventory, differentUserPrefs)));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 62,
      "-": 141,
      "flxffy": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void setWarningPanelSettings_nullWarningPanelSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPref.setWarningPanelSettings(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e userPrefs.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 2,
      "-": 20,
      "flxffy": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedInventoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.ACETAMINOPHEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.AMOXICILLIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.GABAPENTIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.InventoryBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class VersionedInventoryTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final ReadOnlyInventory inventoryWithAmoxicillin \u003d new InventoryBuilder().withMedicine(AMOXICILLIN).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final ReadOnlyInventory inventoryWithGabapentin \u003d new InventoryBuilder().withMedicine(GABAPENTIN).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final ReadOnlyInventory inventoryWithAcetaminophen \u003d new InventoryBuilder().withMedicine(ACETAMINOPHEN)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final ReadOnlyInventory emptyInventory \u003d new InventoryBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void commit_singleInventory_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList(emptyInventory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertInventoryListStatus(versionedInventory,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.singletonList(emptyInventory),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void commit_multipleInventoryPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertInventoryListStatus(versionedInventory,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Arrays.asList(emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                inventoryWithGabapentin,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void commit_multipleInventoryPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.commit();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertInventoryListStatus(versionedInventory,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.singletonList(emptyInventory),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void canUndo_multipleInventoryPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(versionedInventory.canUndo());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void canUndo_multipleInventoryPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(versionedInventory.canUndo());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void canUndo_singleInventory_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList(emptyInventory);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.canUndo());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void canUndo_multipleInventoryPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 2);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.canUndo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void canRedo_multipleInventoryPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(versionedInventory.canRedo());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void canRedo_multipleInventoryPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(versionedInventory.canRedo());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void canRedo_singleInventory_returnsFalse() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList(emptyInventory);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.canRedo());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void canRedo_multipleInventoryPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.canRedo());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void undo_multipleInventoryPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertInventoryListStatus(versionedInventory,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.singletonList(emptyInventory),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                inventoryWithAmoxicillin,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.singletonList(inventoryWithGabapentin));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void undo_multipleInventoryPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.undo();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertInventoryListStatus(versionedInventory,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Arrays.asList(inventoryWithAmoxicillin, inventoryWithGabapentin));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void undo_singleInventory_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList(emptyInventory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertThrows(VersionedInventory.NoUndoableStateException.class, versionedInventory::undo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void undo_multipleInventoryPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 2);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertThrows(VersionedInventory.NoUndoableStateException.class, versionedInventory::undo);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void redo_multipleInventoryPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.redo();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertInventoryListStatus(versionedInventory,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Arrays.asList(emptyInventory, inventoryWithAmoxicillin),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                inventoryWithGabapentin,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void redo_multipleInventoryPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 2);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        versionedInventory.redo();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertInventoryListStatus(versionedInventory,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.singletonList(emptyInventory),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                inventoryWithAmoxicillin,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Collections.singletonList(inventoryWithGabapentin));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void redo_singleInventory_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList(emptyInventory);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertThrows(VersionedInventory.NoRedoableStateException.class, versionedInventory::redo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void redo_multipleInventoryPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList("
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                emptyInventory, inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertThrows(VersionedInventory.NoRedoableStateException.class, versionedInventory::redo);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d prepareInventoryList(inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory copy \u003d prepareInventoryList(inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(versionedInventory.equals(copy));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(versionedInventory.equals(versionedInventory));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.equals(null));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.equals(1));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory differentInventoryList \u003d prepareInventoryList(inventoryWithGabapentin,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                inventoryWithAcetaminophen);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.equals(differentInventoryList));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory differentCurrentStatePointer \u003d prepareInventoryList("
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                inventoryWithAmoxicillin, inventoryWithGabapentin);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedInventory, 1);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that {@code versionedInventory} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * states before {@code versionedInventory#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * and states after {@code versionedInventory#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertInventoryListStatus(VersionedInventory versionedInventory,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                                             List\u003cReadOnlyInventory\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                                             ReadOnlyInventory expectedCurrentState,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                                             List\u003cReadOnlyInventory\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(new Inventory(versionedInventory), expectedCurrentState);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        while (versionedInventory.canUndo()) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            versionedInventory.undo();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (ReadOnlyInventory expectedInventory : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertEquals(expectedInventory, new Inventory(versionedInventory));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            versionedInventory.redo();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (ReadOnlyInventory expectedInventory : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            versionedInventory.redo();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertEquals(expectedInventory, new Inventory(versionedInventory));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(versionedInventory.canRedo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedInventory.undo());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Creates and returns a {@code VersionedInventory} with the {@code inventoryStates} added into it, and the"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code VersionedInventory#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private VersionedInventory prepareInventoryList(ReadOnlyInventory... inventoryStates) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(inventoryStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        VersionedInventory versionedInventory \u003d new VersionedInventory(inventoryStates[0]);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 1; i \u003c inventoryStates.length; i++) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            versionedInventory.resetData(inventoryStates[i]);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            versionedInventory.commit();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return versionedInventory;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Shifts the {@code versionedInventory#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedInventory versionedInventory, int count) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            versionedInventory.undo();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 301
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/BatchExpiryThresholdPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.BatchExpiryThresholdPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.testutil.BatchBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class BatchExpiryThresholdPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold firstThreshold \u003d Model.DEFAULT_EXPIRY_THRESHOLD; // threshold value of 10"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold secondThreshold \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate firstPredicate \u003d new BatchExpiryThresholdPredicate(firstThreshold);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate secondPredicate \u003d new BatchExpiryThresholdPredicate(secondThreshold);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate firstPredicateCopy \u003d new BatchExpiryThresholdPredicate(firstThreshold);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same threshold -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.getThreshold().equals(firstThreshold));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Batch is expiring or has expired."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void test_batchBelowExpiryThreshold_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate predicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String today \u003d formatDateToString(LocalDate.now());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String yesterday \u003d formatDateToString(LocalDate.now().minusDays(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String defaultDate \u003d formatDateToString(LocalDate.now()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .plusDays(Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String maxDate \u003d formatDateToString(LocalDate.now().plusDays(Expiry.MAX_DAYS_TO_EXPIRY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Minimum threshold for expiring and expired batch"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new BatchExpiryThresholdPredicate("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(today).build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(yesterday).build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Default threshold"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new BatchExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(defaultDate).build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(today).build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(yesterday).build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Max threshold"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new BatchExpiryThresholdPredicate("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MAX_EXPIRY_THRESHOLD), WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(defaultDate).build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(today).build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(yesterday).build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new BatchBuilder().withExpiry(maxDate).build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Batch is not expiring."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void test_batchAboveExpiryThreshold_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        BatchExpiryThresholdPredicate predicate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String tomorrow \u003d formatDateToString(LocalDate.now().plusDays(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String defaultDate \u003d formatDateToString(LocalDate.now()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .plusDays(Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String maxDate \u003d formatDateToString(LocalDate.now().plusDays(Expiry.MAX_DAYS_TO_EXPIRY));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Minimum threshold for expiring and expired batch"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new BatchExpiryThresholdPredicate("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new BatchBuilder().withExpiry(tomorrow).build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new BatchBuilder().withExpiry(defaultDate).build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new BatchBuilder().withExpiry(maxDate).build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Default threshold"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new BatchExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new BatchBuilder().withExpiry(maxDate).build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private String formatDateToString(LocalDate date) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/BatchNumberTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class BatchNumberTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new BatchNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_invalidBatchNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String invalidBatchNumber \u003d \"!!!!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new BatchNumber(invalidBatchNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void isValidBatchNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e BatchNumber.isValidBatchNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid batch numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(BatchNumber.isValidBatchNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(BatchNumber.isValidBatchNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(BatchNumber.isValidBatchNumber(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(BatchNumber.isValidBatchNumber(\"SX 1484*\")); // contains illegal non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(BatchNumber.isValidBatchNumber(\"111111111111111111111111111111111111111111111111111\")); // too long"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // valid batch numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(BatchNumber.isValidBatchNumber(\"ABCDE\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(BatchNumber.isValidBatchNumber(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(BatchNumber.isValidBatchNumber(\"SX 1484 852\")); // alphanumeric characters with spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(BatchNumber.isValidBatchNumber(\"NC 154-4815\")); // with \u0027-\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/BatchTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BATCHNUMBER_AMOXICILLIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_AMOXICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMOXICILLIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.BatchBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class BatchTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Batch(null, null, null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_invalidBatchNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String invalidBatchNumber \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new BatchBuilder().withBatchNumber(invalidBatchNumber));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_invalidExpiry_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String invalidExpiry \u003d \"12-12-2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new BatchBuilder().withExpiry(invalidExpiry));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String invalidQuantity \u003d \"50.2\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new BatchBuilder().withQuantity(invalidQuantity));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch defaultBatch \u003d new BatchBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(defaultBatch.equals(new BatchBuilder().build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(defaultBatch.equals(defaultBatch));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(defaultBatch.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(defaultBatch.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch editedBatch \u003d new BatchBuilder().withBatchNumber(VALID_BATCHNUMBER_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(defaultBatch.equals(editedBatch));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedBatch \u003d new BatchBuilder().withQuantity(VALID_QUANTITY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(defaultBatch.equals(editedBatch));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different expiry date-\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedBatch \u003d new BatchBuilder().withExpiry(VALID_EXPIRY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(defaultBatch.equals(editedBatch));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/CompanyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class CompanyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Company(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_invalidCompany_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String invalidCompany \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Company(invalidCompany));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void isValidCompany() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null company name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Company.isValidCompany(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid company names"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Company.isValidCompany(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Company.isValidCompany(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Company.isValidCompany((\"way too long company nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // valid company names"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Company.isValidCompany(\"Acadia Pharmaceuticals\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Company.isValidCompany(\"-\")); // one character"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Company.isValidCompany(\"Gulf Pharmaceutical Industries (Julphar)\")); // with symbols"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/ExpiryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class ExpiryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Expiry(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_invalidExpiry_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Expiry(invalidDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Expiry expiry \u003d new Expiry(\"12/12/2020\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Later than expiry"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (expiry.compareTo(new Expiry(\"13/12/2020\")) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new AssertionError(\"Wrong comparison result\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Same date as expiry"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (expiry.compareTo(new Expiry(\"12/12/2020\")) !\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new AssertionError(\"Wrong comparison result\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Earlier than expiry"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (expiry.compareTo(new Expiry(\"11/12/2020\")) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new AssertionError(\"Wrong comparison result\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null expiry"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (expiry.compareTo(new Expiry(\"-\")) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new AssertionError(\"Wrong comparison result\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null expiry"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Expiry.isValidDate(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // blank expiry"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"/01/2020\")); // missing day part"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"0101/2020\")); // missing \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"01-01-2020\")); // \u0027-\u0027 instead of \u0027/\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"01.01.2020\")); // \u0027.\u0027 instead of \u0027/\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"0 1/01/2020\")); // spaces in day part"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\" 01/01/2020\")); // leading space"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"01/01/2020 \")); // trailing space"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"01/01/20a0\")); // invalid year"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"01//01/2020\")); // double \u0027/\u0027 symbol"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"01/01/01/2020\")); // extra part"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"2020/01/01\")); // wrong order"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"32/01/2020\")); // day more than 31"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"01/13/2020\")); // month more than 12"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"29/02/2019\")); // invalid date"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // exceed max date"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Expiry.isValidDate(\"11/11/2741746\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // valid expiry"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Expiry.isValidDate(\"11/11/2020\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Expiry.isValidDate(\"1/1/2020\")); // without leading zero"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Expiry.isValidDate(\"29/2/2020\")); // leap year"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 81,
      "flxffy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/MedicineExpiryThresholdPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineExpiryThresholdPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class MedicineExpiryThresholdPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold firstThreshold \u003d Model.DEFAULT_EXPIRY_THRESHOLD; // threshold value of 10"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold secondThreshold \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate firstPredicate \u003d new MedicineExpiryThresholdPredicate(firstThreshold);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate secondPredicate \u003d new MedicineExpiryThresholdPredicate(secondThreshold);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate firstPredicateCopy \u003d new MedicineExpiryThresholdPredicate(firstThreshold);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same threshold -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.getThreshold().equals(firstThreshold));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Medicine is expiring or has expired."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void test_medicineBelowExpiryThreshold_returnsTrue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate predicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String today \u003d formatDateToString(LocalDate.now());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String yesterday \u003d formatDateToString(LocalDate.now().minusDays(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String defaultDate \u003d formatDateToString(LocalDate.now()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .plusDays(Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String maxDate \u003d formatDateToString(LocalDate.now().plusDays(Expiry.MAX_DAYS_TO_EXPIRY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Minimum threshold for expiring and expired medicine"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineExpiryThresholdPredicate("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(today).build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(yesterday).build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Default threshold"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(defaultDate).build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(today).build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(yesterday).build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Max threshold"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineExpiryThresholdPredicate("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MAX_EXPIRY_THRESHOLD), WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(defaultDate).build()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(today).build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(yesterday).build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withExpiry(maxDate).build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Medicine is not expiring."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void test_medicineAboveExpiryThreshold_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineExpiryThresholdPredicate predicate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String tomorrow \u003d formatDateToString(LocalDate.now().plusDays(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String defaultDate \u003d formatDateToString(LocalDate.now()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .plusDays(Model.DEFAULT_EXPIRY_THRESHOLD.getNumericValue()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String maxDate \u003d formatDateToString(LocalDate.now().plusDays(Expiry.MAX_DAYS_TO_EXPIRY));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Minimum threshold for expiring and expired medicine"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineExpiryThresholdPredicate("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder().withExpiry(tomorrow).build()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder().withExpiry(defaultDate).build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder().withExpiry(maxDate).build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Default threshold"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineExpiryThresholdPredicate(Model.DEFAULT_EXPIRY_THRESHOLD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder().withExpiry(maxDate).build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private String formatDateToString(LocalDate date) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/MedicineLowStockThresholdPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.predicates.MedicineLowStockThresholdPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.threshold.Threshold;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class MedicineLowStockThresholdPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold firstThreshold \u003d Model.DEFAULT_LOW_STOCK_THRESHOLD; // threshold value of 20"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Threshold secondThreshold \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate firstPredicate \u003d new MedicineLowStockThresholdPredicate(firstThreshold);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate secondPredicate \u003d new MedicineLowStockThresholdPredicate(secondThreshold);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate firstPredicateCopy \u003d new MedicineLowStockThresholdPredicate(firstThreshold);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same threshold -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(firstPredicate.getThreshold().equals(firstThreshold));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Medicine is low in stock."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void test_medicineBelowLowStockThreshold_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate predicate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Minimum threshold"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineLowStockThresholdPredicate("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withQuantity(Integer.toString(Quantity.MIN_QUANTITY)).build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Threshold for maximum Medicine quantity"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineLowStockThresholdPredicate("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MAX_QUANTITY_THRESHOLD), WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withQuantity(Integer.toString(Quantity.MIN_QUANTITY)).build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withQuantity(Integer.toString(Quantity.MAX_QUANTITY)).build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withQuantity(Model.DEFAULT_LOW_STOCK_THRESHOLD.value).build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Default threshold"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineLowStockThresholdPredicate(Model.DEFAULT_LOW_STOCK_THRESHOLD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withQuantity(Integer.toString(Quantity.MIN_QUANTITY)).build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withQuantity(Model.DEFAULT_LOW_STOCK_THRESHOLD.value).build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Medicine is not low in stock."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void test_medicineAboveLowStockThreshold_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        MedicineLowStockThresholdPredicate predicate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Minimum threshold"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineLowStockThresholdPredicate("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Threshold.MIN_THRESHOLD), WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .withQuantity(Integer.toString(Quantity.MIN_QUANTITY + 1)).build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .withQuantity(Model.DEFAULT_LOW_STOCK_THRESHOLD.value).build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .withQuantity(Integer.toString(Quantity.MAX_QUANTITY)).build()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Greatest threshold for maximum Medicine quantity"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineLowStockThresholdPredicate("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new Threshold(Integer.toString(Quantity.MAX_QUANTITY - 1), WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .withQuantity(Integer.toString(Quantity.MAX_QUANTITY)).build()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // Default threshold"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicate \u003d new MedicineLowStockThresholdPredicate(Model.DEFAULT_LOW_STOCK_THRESHOLD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .withQuantity(Integer.toString(Model.DEFAULT_LOW_STOCK_THRESHOLD.getNumericValue() + 1)).build()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                .withQuantity(Integer.toString(Quantity.MAX_QUANTITY)).build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/MedicineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_GABAPENTIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_GABAPENTIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_GABAPENTIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.GABAPENTIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.PARACETAMOL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicine \u003d new MedicineBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicine.getTags().remove(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void isSameMedicine() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(PARACETAMOL.isSameMedicine(PARACETAMOL));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.isSameMedicine(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withName(VALID_NAME_GABAPENTIN).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.isSameMedicine(editedParacetamol));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same name, same quantity, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withCompany(VALID_COMPANY_GABAPENTIN)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(VALID_EXPIRY_GABAPENTIN).withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.isSameMedicine(editedParacetamol));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same name, same expiry, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withCompany(VALID_COMPANY_GABAPENTIN)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withQuantity(VALID_QUANTITY_GABAPENTIN).withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.isSameMedicine(editedParacetamol));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same name, same quantity, same expiry, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withCompany(VALID_COMPANY_GABAPENTIN)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.isSameMedicine(editedParacetamol));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same name, same company, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withQuantity(VALID_QUANTITY_GABAPENTIN)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withExpiry(VALID_EXPIRY_GABAPENTIN).withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(PARACETAMOL.isSameMedicine(editedParacetamol));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine paracetamolCopy \u003d new MedicineBuilder(PARACETAMOL).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(PARACETAMOL.equals(paracetamolCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(PARACETAMOL.equals(PARACETAMOL));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.equals(5));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different medicine -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.equals(GABAPENTIN));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withName(VALID_NAME_GABAPENTIN).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.equals(editedParacetamol));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different company -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withCompany(VALID_COMPANY_GABAPENTIN).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.equals(editedParacetamol));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withQuantity(VALID_QUANTITY_GABAPENTIN).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.equals(editedParacetamol));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different expiry date-\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withExpiry(VALID_EXPIRY_GABAPENTIN).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.equals(editedParacetamol));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(PARACETAMOL.equals(editedParacetamol));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 51,
      "melpulomas": 4,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.predicates.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different medicine -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \"Paracetamol\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withName(\"Paracetamol Gabapentin\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Paracetamol\", \"Gabapentin\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withName(\"Paracetamol Gabapentin\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Gabapentin\", \"Calcipotriene\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withName(\"Paracetamol Calcipotriene\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Paracetamol\", \"Gabapentin\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(predicate.test(new MedicineBuilder().withName(\"Paracetamol Gabapentin    \").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder().withName(\"Paracetamol\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Calcipotriene\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder().withName(\"Paracetamol Gabapentin\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Keywords match quantity, expiry date and company, but does not match name"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"123\", \"06/10/2019\", \"Adcock\", \"Ingram\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(predicate.test(new MedicineBuilder().withName(\"Paracetamol\").withQuantity(\"123\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(\"06/10/2019\").withCompany(\"Adcock Ingram\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 20,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Name.isValidName(\"Paracetamol*\")); // contains illegal non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Name.isValidName(\"-Ibuprofen\")); // start with a valid symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Name.isValidName(\"Long Medicine Nameeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\")); // long names"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Name.isValidName(\"Paracetamol\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Name.isValidName(\"Benzoyl Peroxide 5%\")); // alphanumeric characters and with \u0027%\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Name.isValidName(\"Co-codamol\")); // With \u0027-\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Name.isValidName(\"Aspirin (5mg)\")); // With \u0027(\u0027 and \u0027)\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 9,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/QuantityTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class QuantityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String invalidQuantity \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(invalidQuantity));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // invalid quantities"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"quantity\")); // non-numeric"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"-19282\")); // negative numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(\"124293842033123\")); // long quantities"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(Integer.toString(Quantity.MAX_QUANTITY + 1))); // max quantity exceeded"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // valid quantities"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"1\")); // 1 number"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(Integer.toString(Quantity.MAX_QUANTITY)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/medicine/UniqueMedicineListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.model.medicine;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_GABAPENTIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_GABAPENTIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.GABAPENTIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.PARACETAMOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.exceptions.DuplicateMedicineException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.exceptions.MedicineNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UniqueMedicineListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final UniqueMedicineList uniqueMedicineList \u003d new UniqueMedicineList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void contains_nullMedicine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.contains(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void contains_medicineNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(uniqueMedicineList.contains(PARACETAMOL));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void contains_medicineInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(uniqueMedicineList.contains(PARACETAMOL));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void contains_medicineWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withExpiry(VALID_EXPIRY_GABAPENTIN)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(uniqueMedicineList.contains(editedParacetamol));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void add_nullMedicine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void add_duplicateMedicine_throwsDuplicateMedicineException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(DuplicateMedicineException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine_nullTargetMedicine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicine(null, PARACETAMOL);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine_nullEditedMedicine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicine(PARACETAMOL, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine_targetMedicineNotInList_throwsMedicineNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(MedicineNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicine(PARACETAMOL, PARACETAMOL);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine_editedMedicineIsSameMedicine_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicine(PARACETAMOL, PARACETAMOL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UniqueMedicineList expectedUniqueMedicineList \u003d new UniqueMedicineList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedUniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedUniqueMedicineList, uniqueMedicineList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine_editedMedicineHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedParacetamol \u003d new MedicineBuilder(PARACETAMOL).withCompany(VALID_COMPANY_GABAPENTIN)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withTags(VALID_TAG_PAINKILLER).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicine(PARACETAMOL, editedParacetamol);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UniqueMedicineList expectedUniqueMedicineList \u003d new UniqueMedicineList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedUniqueMedicineList.add(editedParacetamol);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedUniqueMedicineList, uniqueMedicineList);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine_editedMedicineHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicine(PARACETAMOL, GABAPENTIN);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UniqueMedicineList expectedUniqueMedicineList \u003d new UniqueMedicineList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedUniqueMedicineList.add(GABAPENTIN);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedUniqueMedicineList, uniqueMedicineList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicine_editedMedicineHasNonUniqueIdentity_throwsDuplicateMedicineException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(GABAPENTIN);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(DuplicateMedicineException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicine(PARACETAMOL, GABAPENTIN);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void remove_nullMedicine_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.remove(null);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void remove_medicineDoesNotExist_throwsMedicineNotFoundException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(MedicineNotFoundException.class);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.remove(PARACETAMOL);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void remove_existingMedicine_removesMedicine() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.remove(PARACETAMOL);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UniqueMedicineList expectedUniqueMedicineList \u003d new UniqueMedicineList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedUniqueMedicineList, uniqueMedicineList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicines_nullUniqueMedicineList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicines((UniqueMedicineList) null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicines_uniqueMedicineList_replacesOwnListWithProvidedUniqueMedicineList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UniqueMedicineList expectedUniqueMedicineList \u003d new UniqueMedicineList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedUniqueMedicineList.add(GABAPENTIN);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicines(expectedUniqueMedicineList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedUniqueMedicineList, uniqueMedicineList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicines_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicines((List\u003cMedicine\u003e) null);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicines_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.add(PARACETAMOL);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e medicineList \u003d Collections.singletonList(GABAPENTIN);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicines(medicineList);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        UniqueMedicineList expectedUniqueMedicineList \u003d new UniqueMedicineList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedUniqueMedicineList.add(GABAPENTIN);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedUniqueMedicineList, uniqueMedicineList);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setMedicines_listWithDuplicateMedicines_throwsDuplicateMedicineException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cMedicine\u003e listWithDuplicateMedicines \u003d Arrays.asList(PARACETAMOL, PARACETAMOL);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(DuplicateMedicineException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.setMedicines(listWithDuplicateMedicines);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uniqueMedicineList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 183,
      "melpulomas": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void constructor_tooLongTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String invalidTagName \u003d \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/threshold/ThresholdTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.model.threshold;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class ThresholdTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            -\u003e new Threshold(null, WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            -\u003e new Threshold(null, WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        String invalidThreshold \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            -\u003e new Threshold(invalidThreshold, WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, ()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            -\u003e new Threshold(invalidThreshold, WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void isValidThreshold_false() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"\", WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"\", WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // spaces only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\" \", WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\" \", WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // non-numeric"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"threshold\", WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"threshold\", WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // alphabets within digits"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"9011p041\", WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"9011p041\", WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // spaces within digits"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"9312 1534\", WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"9312 1534\", WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // negative numbers"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"-19282\", WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(\"-19282\", WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // less than min"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(Integer.toString(Threshold.MIN_THRESHOLD - 1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(Integer.toString(Threshold.MIN_THRESHOLD - 1),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // more than max"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(Integer.toString(Threshold.MAX_EXPIRY_THRESHOLD + 1),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(Threshold.isValidThreshold(Integer.toString(Threshold.MAX_QUANTITY_THRESHOLD + 1),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void isValidThreshold_true() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // 1 number"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(Threshold.isValidThreshold(\"1\", WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(Threshold.isValidThreshold(\"1\", WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // exactly 3 numbers"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(Threshold.isValidThreshold(\"911\", WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(Threshold.isValidThreshold(\"911\", WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // max threshold"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(Threshold.isValidThreshold(Integer.toString(Threshold.MAX_EXPIRY_THRESHOLD),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.EXPIRY));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(Threshold.isValidThreshold(Integer.toString(Threshold.MAX_QUANTITY_THRESHOLD),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.LOW_STOCK));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedBatchTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.storage.JsonAdaptedBatch.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.BatchBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class JsonAdaptedBatchTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_BATCHNUMBER \u003d \"HASF@#!@#\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"+651234\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_EXPIRY \u003d \"a/1/09\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_BATCHNUMBER \u003d BatchBuilder.DEFAULT_BATCH_NUMBER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_QUANTITY \u003d BatchBuilder.DEFAULT_QUANTITY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_EXPIRY \u003d BatchBuilder.DEFAULT_EXPIRY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_validBatchDetails_returnsMedicine() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedBatch batch \u003d new JsonAdaptedBatch(new BatchBuilder().build());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(new BatchBuilder().build(), batch.toModelType());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_invalidBatchNumber_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedBatch batch \u003d new JsonAdaptedBatch(INVALID_BATCHNUMBER, VALID_QUANTITY, VALID_EXPIRY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d BatchNumber.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, batch::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedBatch batch \u003d new JsonAdaptedBatch(null, VALID_QUANTITY, VALID_EXPIRY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, BatchNumber.class.getSimpleName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, batch::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedBatch batch \u003d new JsonAdaptedBatch(VALID_BATCHNUMBER, INVALID_QUANTITY, VALID_EXPIRY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, batch::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedBatch batch \u003d new JsonAdaptedBatch(VALID_BATCHNUMBER, null, VALID_EXPIRY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, batch::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_invalidExpiry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedBatch batch \u003d new JsonAdaptedBatch(VALID_BATCHNUMBER, VALID_QUANTITY, INVALID_EXPIRY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d Expiry.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, batch::toModelType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_nullExpiry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedBatch batch \u003d new JsonAdaptedBatch(VALID_BATCHNUMBER, VALID_QUANTITY, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Expiry.class.getSimpleName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, batch::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedMedicineTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.storage.JsonAdaptedMedicine.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.IBUPROFEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class JsonAdaptedMedicineTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_NAME \u003d \"I@bupr!fen\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_COMPANY \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_QUANTITY \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_EXPIRY \u003d \"a/1/09\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String INVALID_BATCHNUMBER \u003d \"!#4@$532532\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_NAME \u003d IBUPROFEN.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_COMPANY \u003d IBUPROFEN.getCompany().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_QUANTITY \u003d IBUPROFEN.getTotalQuantity().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final String VALID_EXPIRY \u003d IBUPROFEN.getNextExpiry().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d IBUPROFEN.getTags().stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final List\u003cJsonAdaptedBatch\u003e VALID_BATCHES \u003d IBUPROFEN.getBatches().values().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .map(JsonAdaptedBatch::new)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_validMedicineDetails_returnsMedicine() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d new JsonAdaptedMedicine(IBUPROFEN);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(IBUPROFEN, medicine.toModelType());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(INVALID_NAME, VALID_COMPANY, VALID_QUANTITY, VALID_EXPIRY, VALID_TAGS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        VALID_BATCHES);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, medicine::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d new JsonAdaptedMedicine(null, VALID_COMPANY, VALID_QUANTITY, VALID_EXPIRY,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                VALID_TAGS, VALID_BATCHES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, medicine::toModelType);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_invalidCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(VALID_NAME, INVALID_COMPANY, VALID_QUANTITY, VALID_EXPIRY, VALID_TAGS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        VALID_BATCHES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d Company.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, medicine::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_nullCompany_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(VALID_NAME, null, VALID_QUANTITY, VALID_EXPIRY, VALID_TAGS, VALID_BATCHES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Company.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, medicine::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_invalidQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(VALID_NAME, VALID_COMPANY, INVALID_QUANTITY, VALID_EXPIRY, VALID_TAGS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        VALID_BATCHES);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d Quantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, medicine::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_nullQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(VALID_NAME, VALID_COMPANY, null, VALID_EXPIRY, VALID_TAGS,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        VALID_BATCHES);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Quantity.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, medicine::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_invalidExpiry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(VALID_NAME, VALID_COMPANY, VALID_QUANTITY, INVALID_EXPIRY, VALID_TAGS,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        VALID_BATCHES);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d Expiry.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, medicine::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_nullExpiry_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(VALID_NAME, VALID_COMPANY, VALID_QUANTITY, null, VALID_TAGS, VALID_BATCHES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Expiry.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, medicine::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(VALID_NAME, VALID_COMPANY, VALID_QUANTITY, VALID_EXPIRY, invalidTags,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        VALID_BATCHES);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, medicine::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_invalidBatches_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cJsonAdaptedBatch\u003e invalidBatches \u003d new ArrayList\u003c\u003e(VALID_BATCHES);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        invalidBatches.add(new JsonAdaptedBatch(INVALID_BATCHNUMBER, VALID_QUANTITY, VALID_EXPIRY));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonAdaptedMedicine medicine \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new JsonAdaptedMedicine(VALID_NAME, VALID_COMPANY, VALID_QUANTITY, VALID_EXPIRY, VALID_TAGS,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                        invalidBatches);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, medicine::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 78,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInventoryStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.HYDROCHLOROTHIAZIDE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.NAPROXEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.PARACETAMOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class JsonInventoryStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonInventoryStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void readInventory_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        readInventory(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInventory\u003e readInventory(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new JsonInventoryStorage(Paths.get(filePath)).readInventory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(readInventory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        readInventory(\"notJsonFormatInventory.json\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void readInventory_invalidMedicineInventory_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        readInventory(\"invalidMedicineInventory.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void readInventory_invalidAndValidMedicineInventory_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        readInventory(\"invalidAndValidMedicineInventory.json\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void readAndSaveInventory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempInventory.json\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonInventoryStorage jsonInventoryStorage \u003d new JsonInventoryStorage(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ReadOnlyInventory readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        original.addMedicine(NAPROXEN);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        original.removeMedicine(PARACETAMOL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        original.addMedicine(HYDROCHLOROTHIAZIDE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        jsonInventoryStorage.saveInventory(original); // file path not specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory().get(); // file path not specified"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void saveInventory_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        saveInventory(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Saves {@code inventory} at the specified {@code filePath}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void saveInventory(ReadOnlyInventory inventory, String filePath) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            new JsonInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    .saveInventory(inventory, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void saveInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        saveInventory(new Inventory(), null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableInventoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.TypicalMedicines;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class JsonSerializableInventoryTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableInventoryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Path TYPICAL_MEDICINES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalMedicinesInventory.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Path INVALID_MEDICINE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidMedicineInventory.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Path DUPLICATE_MEDICINE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateMedicineInventory.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_typicalMedicinesFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MEDICINES_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory inventoryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory typicalMedicinesInventory \u003d TypicalMedicines.getTypicalInventory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(inventoryFromFile, typicalMedicinesInventory);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_invalidMedicineFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MEDICINE_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void toModelType_duplicateMedicines_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MEDICINE_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        thrown.expectMessage(JsonSerializableInventory.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 20,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.WarningPanelSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"MediTabs.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        original.setWarningPanelSettings(new WarningPanelSettings(1200, 200));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        original.setWarningPanelSettings(new WarningPanelSettings(5, 5));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "-": 134,
      "flxffy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.core.WarningPanelSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d new JsonInventoryStorage(getTempFilePath(\"inv\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        storageManager \u003d new StorageManager(inventoryStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        original.setWarningPanelSettings(new WarningPanelSettings(300, 600));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void inventoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * {@link JsonInventoryStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInventoryStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        storageManager.saveInventory(original);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ReadOnlyInventory retrieved \u003d storageManager.readInventory().get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(original, new Inventory(retrieved));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void getInventoryFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertNotNull(storageManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 14,
      "-": 56,
      "flxffy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/BatchBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A utility class to help with building Batch objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class BatchBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String DEFAULT_BATCH_NUMBER \u003d \"NDC 0777-3105-02\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"500\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String DEFAULT_EXPIRY \u003d \"12/12/2019\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private BatchNumber batchNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Expiry expiry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batchNumber \u003d new BatchNumber(DEFAULT_BATCH_NUMBER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiry \u003d new Expiry(DEFAULT_EXPIRY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Initializes the BatchBuilder with the data of {@code batchToCopy}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchBuilder(Batch batchToCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batchNumber \u003d batchToCopy.getBatchNumber();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantity \u003d batchToCopy.getQuantity();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiry \u003d batchToCopy.getExpiry();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code BatchNumber} of the {@code Batch} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchBuilder withBatchNumber(String batchNumber) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batchNumber \u003d new BatchNumber(batchNumber);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Batch} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Expiry} of the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public BatchBuilder withExpiry(String expiry) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.expiry \u003d new Expiry(expiry);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Batch build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Batch(batchNumber, quantity, expiry);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditMedicineDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditMedicineDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A utility class to help with building EditMedicineDescriptor objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class EditMedicineDescriptorBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private EditMedicineDescriptor descriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public EditMedicineDescriptorBuilder() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor \u003d new EditMedicineDescriptor();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public EditMedicineDescriptorBuilder(EditMedicineDescriptor descriptor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.descriptor \u003d new EditMedicineDescriptor(descriptor);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns an {@code EditMedicineDescriptor} with fields containing {@code medicine}\u0027s details"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public EditMedicineDescriptorBuilder(Medicine medicine) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor \u003d new EditMedicineDescriptor();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setName(medicine.getName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setCompany(medicine.getCompany());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setTags(medicine.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Name} of the {@code EditMedicineDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public EditMedicineDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Company} of the {@code EditMedicineDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public EditMedicineDescriptorBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setCompany(new Company(company));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditMedicineDescriptor}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public EditMedicineDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public EditMedicineDescriptor build() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExportUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.commons.util.FileName;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "import seedu.address.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " * A utility class for Export."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "public class ExportUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     * Returns an export command string for exporting the current list to a {@code fileName}.csv file."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    public static String getExportCommand(FileName fileName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "        return ExportCommand.COMMAND_WORD + \" \" + fileName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JonathanLeeWH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JonathanLeeWH": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/InventoryBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A utility class to help with building inventory objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " *     {@code Inventory inv \u003d new InventoryBuilder().withMedicine(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InventoryBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Inventory inventory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InventoryBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InventoryBuilder(Inventory inventory) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Adds a new {@code Medicine} to the {@code inventory} that we are building."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InventoryBuilder withMedicine(Medicine medicine) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        inventory.addMedicine(medicine);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Inventory build() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MedicineBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A utility class to help with building Medicine objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Paracetamol\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String DEFAULT_COMPANY \u003d \"Gilead Sciences\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String DEFAULT_QUANTITY \u003d \"0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String DEFAULT_EXPIRY \u003d \"-\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Company company;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Quantity quantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Expiry expiry;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Map\u003cBatchNumber, Batch\u003e batches;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        company \u003d new Company(DEFAULT_COMPANY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantity \u003d new Quantity(DEFAULT_QUANTITY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiry \u003d new Expiry(DEFAULT_EXPIRY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batches \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Initializes the MedicineBuilder with the data of {@code medicineToCopy}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder(Medicine medicineToCopy) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        name \u003d medicineToCopy.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        company \u003d medicineToCopy.getCompany();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        quantity \u003d medicineToCopy.getTotalQuantity();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expiry \u003d medicineToCopy.getNextExpiry();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(medicineToCopy.getTags());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batches \u003d new HashMap\u003c\u003e(medicineToCopy.getBatches());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Name} of the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Company} of the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withCompany(String company) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.company \u003d new Company(company);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Quantity} of the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.quantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Adds {@code quantity} to the {@code Quantity} of the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withAddedQuantity(String quantity) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int sum \u003d this.quantity.getNumericValue() + Integer.parseInt(quantity);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.quantity \u003d new Quantity(Integer.toString(sum));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Expiry} of the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withExpiry(String expiry) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.expiry \u003d new Expiry(expiry);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets {@code batches} to the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withBatches(Map\u003cBatchNumber, Batch\u003e batches) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batches \u003d batches;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Parses the {@code batchDetails} into a {@code Map\u003cBatchName, Batch\u003e} and set it to the {@code Medicine} that we"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withBatches(String ... batchDetails) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batches \u003d SampleDataUtil.getBatchSet(batchDetails);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Adds {@code batch} to the {@code Medicine} that we are building. Replaces existing value."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withAddedBatch(Batch batch) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batches.put(batch.getBatchNumber(), batch);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     *  Sets {@code medicineToCopy}\u0027s uneditable fields to the {@code Medicine} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineBuilder withUneditableFields(Medicine medicineToCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.quantity \u003d medicineToCopy.getTotalQuantity();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.expiry \u003d medicineToCopy.getNextExpiry();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.batches \u003d medicineToCopy.getBatches();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public Medicine build() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return new Medicine(name, company, quantity, expiry, tags, batches);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/MedicineUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditMedicineDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A utility class for Medicine."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineUtil {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns an add command string for adding the {@code medicine}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static String getAddCommand(Medicine medicine) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getMedicineDetails(medicine);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the part of command string for the given {@code medicine}\u0027s details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static String getMedicineDetails(Medicine medicine) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sb.append(PREFIX_NAME + medicine.getName().fullName + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        sb.append(PREFIX_COMPANY + medicine.getCompany().companyName + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicine.getTags().stream().forEach("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the part of command string for the given {@code EditMedicineDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static String getEditMedicineDescriptorDetails(EditMedicineDescriptor descriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.getCompany().ifPresent(company -\u003e sb.append(PREFIX_COMPANY).append(company.companyName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 16,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the middle index of the medicine in the {@code model}\u0027s medicine list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return Index.fromOneBased(model.getFilteredMedicineList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the last index of the medicine in the {@code model}\u0027s medicine list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return Index.fromOneBased(model.getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns the medicine in the {@code model}\u0027s medicine list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static Medicine getMedicine(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 8,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Index INDEX_FIRST_MEDICINE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Index INDEX_SECOND_MEDICINE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Index INDEX_THIRD_MEDICINE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Index INDEX_FOURTH_MEDICINE \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 4,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMedicines.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BATCHNUMBER_AMOXICILLIN;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMOXICILLIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_GABAPENTIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_AMOXICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_GABAPENTIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMOXICILLIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMOXICILLIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_GABAPENTIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_PAINKILLER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A utility class containing a list of {@code Medicine} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class TypicalMedicines {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine PARACETAMOL \u003d new MedicineBuilder().withName(\"Paracetamol\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(\"GlaxoSmithKline\").withQuantity(\"312\").withExpiry(\"31/12/2019\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withTags(\"fever\").withBatches(\"0042121\", \"312\", \"31/12/2019\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine IBUPROFEN \u003d new MedicineBuilder().withName(\"Ibuprofen\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(\"Novartis\").withQuantity(\"432\").withExpiry(\"21/09/2019\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withTags(\"inflammation\", \"fever\").withBatches(\"HH073101\", \"432\", \"21/09/2019\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine ACETAMINOPHEN \u003d new MedicineBuilder().withName(\"Acetaminophen\").withCompany(\"Pfizer\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withQuantity(\"0\").withExpiry(\"-\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine LEVOTHYROXINE \u003d new MedicineBuilder().withName(\"Levothyroxine Sodium\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(\"3M Pharmaceuticals\").withQuantity(\"533\").withExpiry(\"31/07/2019\").withTags(\"thyroid\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withBatches(\"GKP1684\", \"233\", \"13/08/2019\", \"GKP1685\", \"300\", \"15/08/2019\", \"GKP1682\", \"5\", \"31/07/2019\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine LISINOPRIL \u003d new MedicineBuilder().withName(\"Lisinopril\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(\"Takeda Pharmaceutical Co.\").withQuantity(\"94\").withExpiry(\"06/07/2019\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withBatches(\"307002\", \"94\", \"06/07/2019\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine PREDNISONE \u003d new MedicineBuilder().withName(\"Prednisone\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(\"Gilead Sciences\").withQuantity(\"427\").withExpiry(\"19/11/2019\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withBatches(\"A030F21\", \"427\", \"19/11/2019\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine LIPITOR \u003d new MedicineBuilder().withName(\"Lipitor\").withCompany(\"Johnson \u0026 Johnson\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withQuantity(\"82\").withExpiry(\"25/01/2020\").withBatches(\"NDC 0777-3105-02\", \"82\", \"25/01/2020\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine NAPROXEN \u003d new MedicineBuilder().withName(\"Naproxen Sodium\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(\"Boehringer-Ingelheim\").withQuantity(\"424\").withExpiry(\"29/07/2019\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withBatches(\"HH 5100004\", \"224\", \"29/07/2019\", \"HH 5100011\", \"200\", \"11/08/2019\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine HYDROCHLOROTHIAZIDE \u003d new MedicineBuilder().withName(\"Hydrochlorothiazide\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(\"NovaBay Pharmaceuticals\").withQuantity(\"0\").withExpiry(\"-\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    // Manually added - Medicine\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine AMOXICILLIN \u003d new MedicineBuilder().withName(VALID_NAME_AMOXICILLIN)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(VALID_COMPANY_AMOXICILLIN).withQuantity(VALID_QUANTITY_AMOXICILLIN)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withExpiry(VALID_EXPIRY_AMOXICILLIN).withTags(VALID_TAG_FEVER)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withBatches(VALID_BATCHNUMBER_AMOXICILLIN, VALID_QUANTITY_AMOXICILLIN, VALID_EXPIRY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final Medicine GABAPENTIN \u003d new MedicineBuilder().withName(VALID_NAME_GABAPENTIN)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withCompany(VALID_COMPANY_GABAPENTIN).withQuantity(VALID_QUANTITY_GABAPENTIN)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            .withExpiry(VALID_EXPIRY_GABAPENTIN).withTags(VALID_TAG_PAINKILLER, VALID_TAG_FEVER).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static final String KEYWORD_MATCHING_SODIUM \u003d \"Sodium\"; // A keyword that matches SODIUM"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private TypicalMedicines() {} // prevents instantiation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns an {@code Inventory} with all the typical medicines."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static Inventory getTypicalInventory() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Inventory inv \u003d new Inventory();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (Medicine medicine : getTypicalMedicines()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            inv.addMedicine(medicine);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return inv;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static List\u003cMedicine\u003e getTypicalMedicines() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ACETAMINOPHEN, IBUPROFEN, LEVOTHYROXINE, LIPITOR, LISINOPRIL, PARACETAMOL,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                PREDNISONE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 55,
      "melpulomas": 2,
      "-": 24,
      "flxffy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UpdateBatchDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdateBatchDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A utility class to help with building UpdateBatchDescriptor objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UpdateBatchDescriptorBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private UpdateBatchDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor \u003d new UpdateBatchDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptorBuilder(UpdateBatchDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        this.descriptor \u003d new UpdateBatchDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns an {@code UpdateBatchDescriptorBuilder} with fields containing {@code batch}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptorBuilder(Batch batch) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor \u003d new UpdateBatchDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setBatchNumber(batch.getBatchNumber());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setQuantity(batch.getQuantity());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setExpiry(batch.getExpiry());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code BatchNumber} of the {@code UpdateBatchDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptorBuilder withBatchNumber(String batchNumber) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setBatchNumber(new BatchNumber(batchNumber));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Quantity} of the {@code UpdateBatchDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptorBuilder withQuantity(String quantity) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setQuantity(new Quantity(quantity));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Expiry} of the {@code UpdateBatchDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptorBuilder withExpiry(String expiry) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setExpiry(new Expiry(expiry));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Expiry} of the {@code UpdateBatchDescriptor} that we are building to null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptorBuilder withNoExpiry() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setExpiry(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Sets the {@code Quantity} of the {@code UpdateBatchDescriptor} that we are building to null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptorBuilder withNoQuantity() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        descriptor.setQuantity(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public UpdateBatchDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jtankw3": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/GuiUnitTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.UiPartRule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A GUI unit test class for MediTabs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final UiPartRule uiPartRule \u003d new UiPartRule();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param query name of the CSS selector of the node to retrieve."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 1,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/InformationPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.LEVOTHYROXINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.PARACETAMOL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.InformationPanelHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortDirection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.InformationPanelSettings.SortProperty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class InformationPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private SimpleObjectProperty\u003cMedicine\u003e selectedMedicine \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private SimpleObjectProperty\u003cInformationPanelSettings\u003e informationPanelSettings \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private InformationPanel informationPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private InformationPanelHandle informationPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelSettings.setValue(new InformationPanelSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e informationPanel \u003d new InformationPanel(selectedMedicine, informationPanelSettings));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uiPartRule.setUiPart(informationPanel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelHandle \u003d new InformationPanelHandle(informationPanel.getRoot());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // default"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(informationPanelHandle.isBatchTableLoaded());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // load table of selected medicine"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e selectedMedicine.set(PARACETAMOL));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(informationPanelHandle.isBatchTableLoaded());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelHandle.assertTableCorrect(selectedMedicine.get(), informationPanelSettings.getValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // deselect medicine"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e selectedMedicine.set(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(informationPanelHandle.isBatchTableLoaded());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // change settings without loading the table"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e informationPanelSettings.set(new InformationPanelSettings(SortProperty.EXPIRY,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.DESCENDING)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(informationPanelHandle.isBatchTableLoaded());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Select another medicine"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e selectedMedicine.set(LEVOTHYROXINE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(informationPanelHandle.isBatchTableLoaded());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelHandle.assertTableCorrect(selectedMedicine.get(), informationPanelSettings.getValue());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // Select same medicine and change settings without deselecting"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e selectedMedicine.set(LEVOTHYROXINE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(informationPanelHandle.isBatchTableLoaded());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e informationPanelSettings.set(new InformationPanelSettings(SortProperty.QUANTITY,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                SortDirection.DESCENDING)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelHandle.assertTableCorrect(selectedMedicine.get(), informationPanelSettings.getValue());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final TemporaryFolder temporaryFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        JsonInventoryStorage jsonInventoryStorage \u003d new JsonInventoryStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.newFile().toPath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        StorageManager storageManager \u003d new StorageManager(jsonInventoryStorage, jsonUserPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new LogicManager(new ModelManager(), storageManager));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_menuBarExitButton_allWindowsClosed() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuHelpButton();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // The application will exit when all windows are closed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), guiRobot.listWindows());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * Opens the {@code HelpWindow} by clicking on the menu bar\u0027s help button."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuHelpButton() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Help\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"F1\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 3,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MedicineCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMedicine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.MedicineCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineWithNoTags \u003d new MedicineBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineCard medicineCard \u003d new MedicineCard(medicineWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uiPartRule.setUiPart(medicineCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCardDisplay(medicineCard, medicineWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineWithTags \u003d new MedicineBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineCard \u003d new MedicineCard(medicineWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uiPartRule.setUiPart(medicineCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCardDisplay(medicineCard, medicineWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicine \u003d new MedicineBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineCard medicineCard \u003d new MedicineCard(medicine, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same medicine, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineCard copy \u003d new MedicineCard(medicine, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(medicineCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(medicineCard.equals(medicineCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(medicineCard.equals(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(medicineCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // different medicine, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine differentMedicine \u003d new MedicineBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(medicineCard.equals(new MedicineCard(differentMedicine, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // same medicine, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(medicineCard.equals(new MedicineCard(medicine, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that {@code medicineCard} displays the details of {@code expectedMedicine} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCardDisplay(MedicineCard medicineCard, Medicine expectedMedicine, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineCardHandle medicineCardHandle \u003d new MedicineCardHandle(medicineCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", medicineCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // verify medicine details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCardDisplaysMedicine(expectedMedicine, medicineCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MedicineListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalMedicines;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMedicine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.MedicineCardHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.MedicineListPanelHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class MedicineListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final ObservableList\u003cMedicine\u003e TYPICAL_MEDICINES \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            FXCollections.observableList(getTypicalMedicines());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final SimpleObjectProperty\u003cMedicine\u003e selectedMedicine \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private MedicineListPanelHandle medicineListPanelHandle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        initUi(TYPICAL_MEDICINES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_MEDICINES.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            medicineListPanelHandle.navigateToCard(TYPICAL_MEDICINES.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Medicine expectedMedicine \u003d TYPICAL_MEDICINES.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            MedicineCardHandle actualCard \u003d medicineListPanelHandle.getMedicineCardHandle(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertCardDisplaysMedicine(expectedMedicine, actualCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void selection_modelSelectedMedicineChanged_selectionChanges() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        initUi(TYPICAL_MEDICINES);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine secondMedicine \u003d TYPICAL_MEDICINES.get(INDEX_SECOND_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e selectedMedicine.set(secondMedicine));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineCardHandle expectedMedicine \u003d medicineListPanelHandle.getMedicineCardHandle("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                INDEX_SECOND_MEDICINE.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineCardHandle selectedMedicine \u003d medicineListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCardEquals(expectedMedicine, selectedMedicine);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Verifies that creating and deleting large number of medicines in {@code MedicineListPanel} requires lesser than"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ObservableList\u003cMedicine\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }, \"Creation and deletion of medicine cards exceeded time limit\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a list of medicines containing {@code medicineCount} medicines that is used to populate the"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MedicineListPanel}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private ObservableList\u003cMedicine\u003e createBackingList(int medicineCount) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ObservableList\u003cMedicine\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c medicineCount; i++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Quantity quantity \u003d new Quantity(\"0\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Expiry expiry \u003d new Expiry(\"-\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Company company \u003d new Company(\"a\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Medicine medicine \u003d new Medicine(name, company, quantity, expiry, Collections.emptySet(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                    Collections.emptyMap());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            backingList.add(medicine);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Initializes {@code medicineListPanelHandle} with a {@code MedicineListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code MedicineListPanel}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void initUi(ObservableList\u003cMedicine\u003e backingList) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        MedicineListPanel medicineListPanel \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                new MedicineListPanel(backingList, selectedMedicine, selectedMedicine::set);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        uiPartRule.setUiPart(medicineListPanel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineListPanelHandle \u003d new MedicineListPanelHandle(getChildNode(medicineListPanel.getRoot(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                MedicineListPanelHandle.MEDICINE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.PARACETAMOL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private final Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, inventory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        // after inventory is updated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        guiRobot.interact(() -\u003e inventory.addMedicine(PARACETAMOL));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 6,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/WarningCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMedicine;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import guitests.guihandles.WarningCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Medicine medicine \u003d new MedicineBuilder().withBatches(\"batch number\", \"1\", \"12/12/2019\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // thresholds set high enough to view all medicines and batches"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor predicateAccessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicateAccessor.setMaxThresholds();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // expiry list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCard warningCard \u003d new WarningCard(medicine, 1, WarningPanelPredicateType.EXPIRY, predicateAccessor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        uiPartRule.setUiPart(warningCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertCardDisplay(warningCard, medicine, 1, WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // low stock list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningCard \u003d new WarningCard(medicine, 2, WarningPanelPredicateType.LOW_STOCK, predicateAccessor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        uiPartRule.setUiPart(warningCard);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertCardDisplay(warningCard, medicine, 2, WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Medicine medicine \u003d new MedicineBuilder().withBatches(\"batch number\", \"1\", \"12/12/2019\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor predicateAccessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicateAccessor.setMaxThresholds();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCard expiryWarningCard \u003d new WarningCard(medicine, 0,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.EXPIRY, predicateAccessor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCard lowStockWarningCard \u003d new WarningCard(medicine, 0,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.LOW_STOCK, predicateAccessor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same medicine, same index -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCard copy \u003d new WarningCard(medicine, 0, WarningPanelPredicateType.EXPIRY, predicateAccessor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(expiryWarningCard.equals(copy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        copy \u003d new WarningCard(medicine, 0, WarningPanelPredicateType.LOW_STOCK, predicateAccessor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(lowStockWarningCard.equals(copy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(expiryWarningCard.equals(expiryWarningCard));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(lowStockWarningCard.equals(lowStockWarningCard));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(expiryWarningCard.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(lowStockWarningCard.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(expiryWarningCard.equals(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(lowStockWarningCard.equals(0));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // different medicine, same index -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        Medicine differentMedicine \u003d new MedicineBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(expiryWarningCard.equals(new WarningCard(differentMedicine, 0,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.EXPIRY, predicateAccessor)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(lowStockWarningCard.equals(new WarningCard(differentMedicine, 0,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.LOW_STOCK, predicateAccessor)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // same medicine, different index -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(expiryWarningCard.equals(new WarningCard(medicine, 1,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.EXPIRY, predicateAccessor)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertFalse(lowStockWarningCard.equals(new WarningCard(medicine, 1,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningPanelPredicateType.LOW_STOCK, predicateAccessor)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Asserts that {@code warningCard} displays the details of {@code expectedMedicine} correctly and matches"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private void assertCardDisplay(WarningCard warningCard, Medicine expectedMedicine,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            int expectedId, WarningPanelPredicateType listType) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningCardHandle warningCardHandle \u003d new WarningCardHandle(warningCard.getRoot(), listType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", warningCardHandle.getId());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        // verify medicine details are displayed correctly"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertCardDisplaysMedicine(expectedMedicine, warningCardHandle);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/WarningListViewTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "flxffy"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.getTypicalMedicines;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMedicine;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import guitests.guihandles.WarningCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import guitests.guihandles.WarningListViewHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateAccessor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.commons.util.warning.WarningPanelPredicateType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "flxffy"
        },
        "content": "public class WarningListViewTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final ObservableList\u003cMedicine\u003e TYPICAL_MEDICINES \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            FXCollections.observableList(getTypicalMedicines());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private WarningListViewHandle warningListViewHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void display_expiryListView() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        initUi(TYPICAL_MEDICINES, WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_MEDICINES.size(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningListViewHandle.navigateToCard(TYPICAL_MEDICINES.get(i));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Medicine expectedMedicine \u003d TYPICAL_MEDICINES.get(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            WarningCardHandle actualCard \u003d warningListViewHandle"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    .getWarningCardHandle(i, WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            assertCardDisplaysMedicine(expectedMedicine, actualCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void display_lowStockListView() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        initUi(TYPICAL_MEDICINES, WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_MEDICINES.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            warningListViewHandle.navigateToCard(TYPICAL_MEDICINES.get(i));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Medicine expectedMedicine \u003d TYPICAL_MEDICINES.get(i);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            WarningCardHandle actualCard \u003d warningListViewHandle"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    .getWarningCardHandle(i, WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            assertCardDisplaysMedicine(expectedMedicine, actualCard);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Verifies that creating and deleting large number of medicines in {@code WarningListView} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public void performanceTest() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        ObservableList\u003cMedicine\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            initUi(backingList, WarningPanelPredicateType.EXPIRY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }, \"Creation and deletion of medicine cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            initUi(backingList, WarningPanelPredicateType.LOW_STOCK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }, \"Creation and deletion of medicine cards exceeded time limit\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Returns a list of medicines containing {@code medicineCount} medicines that is used to populate the"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * {@code MedicineListPanel}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private ObservableList\u003cMedicine\u003e createBackingList(int medicineCount) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        ObservableList\u003cMedicine\u003e backingList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        for (int i \u003d 0; i \u003c medicineCount; i++) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Name name \u003d new Name(i + \"a\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Quantity quantity \u003d new Quantity(\"0\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Expiry expiry \u003d new Expiry(\"-\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Company company \u003d new Company(\"a\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            Medicine medicine \u003d new Medicine(name, company, quantity, expiry, Collections.emptySet(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                    Collections.emptyMap());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "flxffy"
        },
        "content": "            backingList.add(medicine);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        return backingList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Initializes {@code warningListViewHandle} with a {@code WarningListView} backed by {@code backingList}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code WarningListView}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    private void initUi(ObservableList\u003cMedicine\u003e backingList, WarningPanelPredicateType listType) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningPanelPredicateAccessor predicateAccessor \u003d new WarningPanelPredicateAccessor();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        predicateAccessor.setMaxThresholds();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        WarningListView warningListView \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                new WarningListView(backingList, listType, predicateAccessor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        uiPartRule.setUiPart(warningListView);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        warningListViewHandle \u003d new WarningListViewHandle(getChildNode(warningListView.getRoot(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                WarningListViewHandle.WARNING_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "flxffy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "flxffy": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.MedicineCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.MedicineListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import guitests.guihandles.WarningCardHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void assertCardEquals(MedicineCardHandle expectedCard, MedicineCardHandle actualCard) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedCard.getCompany(), actualCard.getCompany());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedCard.getExpiry(), actualCard.getExpiry());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedCard.getQuantity(), actualCard.getQuantity());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedMedicine}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void assertCardDisplaysMedicine(Medicine expectedMedicine, MedicineCardHandle actualCard) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedMedicine.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedMedicine.getTotalQuantity().toString(), actualCard.getQuantity());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedMedicine.getNextExpiry().toString(), actualCard.getExpiry());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedMedicine.getCompany().companyName, actualCard.getCompany());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedMedicine.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedMedicine}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "flxffy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    public static void assertCardDisplaysMedicine(Medicine expectedMedicine, WarningCardHandle actualCard) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertEquals(expectedMedicine.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(actualCard.equals(expectedMedicine));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "flxffy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "flxffy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that the list in {@code medicineListPanelHandle} displays the details of {@code medicines} correctly and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void assertListMatching(MedicineListPanelHandle medicineListPanelHandle, Medicine... medicines) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        for (int i \u003d 0; i \u003c medicines.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            medicineListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertCardDisplaysMedicine(medicines[i], medicineListPanelHandle.getMedicineCardHandle(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that the list in {@code medicineListPanelHandle} displays the details of {@code medicines} correctly and"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void assertListMatching(MedicineListPanelHandle medicineListPanelHandle, List\u003cMedicine\u003e medicines) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertListMatching(medicineListPanelHandle, medicines.toArray(new Medicine[0]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts the size of the list in {@code medicineListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void assertListSize(MedicineListPanelHandle medicineListPanelHandle, int size) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int numberOfPeople \u003d medicineListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 25,
      "-": 50,
      "flxffy": 9
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMOXICILLIN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.ACETAMINOPHEN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.AMOXICILLIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.GABAPENTIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.HYDROCHLOROTHIAZIDE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineUtil;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class AddCommandSystemTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a medicine without tags to a non-empty inventory, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine toAdd \u003d GABAPENTIN;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_GABAPENTIN + \"   \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + COMPANY_DESC_GABAPENTIN + \"   \" + TAG_DESC_FEVER + \" \" + TAG_DESC_PAINKILER + \" \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: undo adding Gabapentin to the list -\u003e Gabapentin deleted */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: redo adding Gabapentin to the list -\u003e Gabapentin added again */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.addMedicine(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a medicine with all fields same as another medicine in the inventory except name -\u003e added */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        toAdd \u003d new MedicineBuilder(GABAPENTIN).withName(VALID_NAME_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMOXICILLIN + COMPANY_DESC_GABAPENTIN + TAG_DESC_FEVER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add to empty inventory -\u003e added */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteAllMedicines();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new MedicineBuilder().build());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a medicine with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        toAdd \u003d GABAPENTIN;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FEVER + COMPANY_DESC_GABAPENTIN + NAME_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a medicine, missing tags -\u003e added */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(new MedicineBuilder(AMOXICILLIN).withQuantity(\"0\").withExpiry(\"-\").withBatches()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filters the medicine list before adding -\u003e added */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(HYDROCHLOROTHIAZIDE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* ----------------------- Perform add operation while a medicine card is selected -------------------------- */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: selects first card in the medicine list, add a medicine -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        selectMedicine(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(ACETAMINOPHEN);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a duplicate medicine -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d MedicineUtil.getAddCommand(AMOXICILLIN);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a duplicate medicine except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d MedicineUtil.getAddCommand(AMOXICILLIN) + \" \" + PREFIX_TAG.getPrefix() + \"inflammation\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + COMPANY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: missing company -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \"adds \" + MedicineUtil.getMedicineDetails(toAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + COMPANY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: invalid company -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMOXICILLIN + INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMOXICILLIN + COMPANY_DESC_AMOXICILLIN + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. {@code Storage} and {@code MedicineListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 5. Loaded information table and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCommandSuccess(Medicine toAdd) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(MedicineUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Medicine)}. Executes {@code command}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Medicine)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCommandSuccess(String command, Medicine toAdd) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.addMedicine(toAdd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Medicine)} except asserts that"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 2. {@code Storage} and {@code MedicineListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Medicine)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. {@code Storage} and {@code MedicineListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 5. Loaded information table, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 72,
      "melpulomas": 7,
      "-": 118
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class ClearCommandSystemTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: clear non-empty inventory, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: undo clearing inventory -\u003e original inventory restored */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: redo clearing inventory -\u003e cleared */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: selects first card in medicine list and clears inventory -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original inventory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        selectMedicine(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filters the medicine list before clearing -\u003e entire inventory cleared */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original inventory"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: clear empty inventory -\u003e cleared */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Also verifies that the loaded information table, selected card and status bar remain unchanged, and the command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * box has the error style."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 18,
      "-": 83
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_MEDICINE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMedicine;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class DeleteCommandSystemTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Comparator\u003cMedicine\u003e comparator \u003d Comparator.naturalOrder();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: delete the first medicine in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_MEDICINE.getOneBased()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + \"       \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine deletedMedicine \u003d removeMedicine(expectedModel, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEDICINE_SUCCESS, deletedMedicine);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: delete the last medicine in the list -\u003e deleted */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index lastMedicineIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(lastMedicineIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: undo deleting the last medicine in the list -\u003e last medicine restored */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: redo deleting the last medicine in the list -\u003e last medicine deleted again */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        removeMedicine(modelBeforeDeletingLast, lastMedicineIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filtered medicine list, delete index within bounds of inventory and medicine list -\u003e deleted */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index index \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filtered medicine list, delete index within bounds of inventory but out of bounds of medicine list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int invalidIndex \u003d getModel().getInventory().getSortedMedicineList(comparator).size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* -------------------- Performing delete operation while a medicine card is selected ----------------------- */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: delete the selected medicine -\u003e medicine list panel selects the medicine before the deleted medicine */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showAllMedicines();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        selectMedicine(selectedIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deletedMedicine \u003d removeMedicine(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEDICINE_SUCCESS, deletedMedicine);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                getModel().getInventory().getSortedMedicineList(comparator).size() + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Removes the {@code Medicine} at the specified {@code index} in {@code model}\u0027s inventory."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @return the removed medicine"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private Medicine removeMedicine(Model model, Index index) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine targetMedicine \u003d getMedicine(model, index);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.deleteMedicine(targetMedicine);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return targetMedicine;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Deletes the medicine at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine deletedMedicine \u003d removeMedicine(expectedModel, toDelete);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_MEDICINE_SUCCESS, deletedMedicine);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. Asserts that the loaded information table and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the loaded"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * information table and selected card are expected to update accordingly depending on the card at"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. Asserts that the loaded information table, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 55,
      "-": 137,
      "flxffy": 1
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COMPANY_DESC_LISNOPRIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_COMPANY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_GABAPENTIN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_AMOXICILLIN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPANY_GABAPENTIN;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMOXICILLIN;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GABAPENTIN;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FEVER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEDICINES;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.AMOXICILLIN;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.GABAPENTIN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.LISINOPRIL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Company;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class EditCommandSystemTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index index \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToEdit \u003d model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + \"  \" + COMPANY_DESC_AMOXICILLIN + \" \" + TAG_DESC_FEVER + \" \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine editedMedicine \u003d new MedicineBuilder(medicineToEdit).withName(VALID_NAME_AMOXICILLIN)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                .withCompany(VALID_COMPANY_AMOXICILLIN).withTags(VALID_TAG_FEVER).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, editedMedicine);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: undo editing the last medicine in the list -\u003e last medicine restored */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: redo editing the last medicine in the list -\u003e last medicine edited again */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setMedicine(getModel().getFilteredMedicineList().get(INDEX_FIRST_MEDICINE.getZeroBased()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                editedMedicine);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: edit a medicine with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + COMPANY_DESC_AMOXICILLIN + TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineToEdit \u003d getModel().getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedMedicine \u003d new MedicineBuilder(AMOXICILLIN).withUneditableFields(medicineToEdit).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(medicineToEdit, editedMedicine);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, editedMedicine);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: edit a medicine with new values same as another medicine\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(getModel().getInventory().getMedicineList().contains(LISINOPRIL));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        index \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineToEdit \u003d getModel().getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertNotEquals(medicineToEdit, LISINOPRIL);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_GABAPENTIN + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + PREFIX_TAG.getPrefix() + \" \" + COMPANY_DESC_LISNOPRIL;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedMedicine \u003d new MedicineBuilder(LISINOPRIL).withName(VALID_NAME_GABAPENTIN)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withUneditableFields(medicineToEdit).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, editedMedicine);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: edit a medicine with new values same as another medicine\u0027s values but with different company"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        index \u003d INDEX_SECOND_MEDICINE;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineToEdit \u003d model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + COMPANY_DESC_GABAPENTIN + TAG_DESC_FEVER;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedMedicine \u003d new MedicineBuilder(AMOXICILLIN).withUneditableFields(medicineToEdit)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withCompany(VALID_COMPANY_GABAPENTIN).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, editedMedicine);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        index \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineToEdit \u003d getModel().getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedMedicine \u003d new MedicineBuilder(medicineToEdit).withTags().build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, editedMedicine);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filtered medicine list, edit index within bounds of inventory and medicine list -\u003e edited */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        index \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineToEdit \u003d getModel().getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        editedMedicine \u003d new MedicineBuilder(medicineToEdit).withName(VALID_NAME_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, editedMedicine);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filtered medicine list, edit index within bounds of inventory but out of bounds of medicine list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int invalidIndex \u003d getModel().getInventory().getMedicineList().size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_GABAPENTIN,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_GABAPENTIN,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_GABAPENTIN,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredMedicineList().size() + 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_GABAPENTIN,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_GABAPENTIN,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased(),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: invalid company -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased() + INVALID_COMPANY_DESC,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                Company.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: edit a medicine with new values same as another medicine\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        executeCommand(MedicineUtil.getAddCommand(GABAPENTIN));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(getModel().getInventory().getMedicineList().contains(GABAPENTIN));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        index \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getModel().getFilteredMedicineList().get(index.getZeroBased()).equals(GABAPENTIN));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_GABAPENTIN + COMPANY_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + TAG_DESC_FEVER + TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: edit a medicine with new values same as another medicine\u0027s but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_GABAPENTIN"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melpulomas"
        },
        "content": "                + COMPANY_DESC_GABAPENTIN + TAG_DESC_PAINKILER;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_MEDICINE);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Medicine, Index)} except that"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * the loaded information table and selected card remain unchanged."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Medicine, Index)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Medicine editedMedicine) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedMedicine, null);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the medicine at index {@code toEdit} being"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * updated to values specified {@code editedMedicine}.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Medicine editedMedicine,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setMedicine(expectedModel.getFilteredMedicineList().get(toEdit.getZeroBased()), editedMedicine);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_MEDICINE_SUCCESS, editedMedicine), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * loaded information table and selected card remain unchanged."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. Asserts that the loaded information table and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. Asserts that the loaded information table, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 115,
      "melpulomas": 9,
      "-": 142
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_MEDICINES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BATCHNUMBER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COMPANY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.ACETAMINOPHEN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.IBUPROFEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.LEVOTHYROXINE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.NAPROXEN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class FindCommandSystemTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find multiple medicines in inventory, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * -\u003e 2 medicines found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \" + KEYWORD_MATCHING_SODIUM + \"   \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, NAPROXEN, LEVOTHYROXINE); // Naproxen Sodium and Levothyroxine Sodium"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: repeat previous find command where medicine list is displaying the medicines we are finding"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * -\u003e 2 medicines found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find medicine where medicine list is not displaying the medicine we are finding -\u003e 1 medicine found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Acetaminophen\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ACETAMINOPHEN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find multiple medicines in inventory, 2 keywords -\u003e 2 medicines found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Ibuprofen Levothyroxine\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, IBUPROFEN, LEVOTHYROXINE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find multiple medicines in inventory, 2 keywords in reversed order -\u003e 2 medicines found */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Levothyroxine Ibuprofen\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find multiple medicines in inventory, 2 keywords with 1 repeat -\u003e 2 medicines found */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Levothyroxine Ibuprofen Levothyroxine\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find multiple medicines in inventory, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * -\u003e 2 medicines found"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Levothyroxine Ibuprofen NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find same medicines in inventory after deleting 1 of them -\u003e 1 medicine found */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getModel().getInventory().getMedicineList().contains(IBUPROFEN));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \" + KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, LEVOTHYROXINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find medicine in inventory, keyword is same as name but of different case -\u003e 1 medicine found */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" SoDiUm\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find company of medicine in inventory -\u003e 1 medicines found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_COMPANY + \" \" + LEVOTHYROXINE.getCompany().companyName;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find tag of medicine in inventory -\u003e 1 medicines found */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(LEVOTHYROXINE.getTags());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_TAG + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find batch of medicine in inventory -\u003e 1 medicines found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cBatch\u003e batches \u003d new ArrayList\u003c\u003e(LEVOTHYROXINE.getBatches().values());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_BATCHNUMBER + \" \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + batches.get(0).getBatchNumber().batchNumber;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find medicine in inventory, keyword is substring of name -\u003e 0 medicines found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Sodi\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find medicine in inventory, name is substring of keyword -\u003e 0 medicines found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Sodiums\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find medicine not in inventory -\u003e 0 medicines found */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Augmentin\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find quantity of medicine in inventory -\u003e 0 medicines found */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_QUANTITY + \" \" + LEVOTHYROXINE.getTotalQuantity().toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find while a medicine is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showAllMedicines();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        selectMedicine(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getMedicineListPanel().getHandleToSelectedCard().getName()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .equals(LEVOTHYROXINE.getName().fullName));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Levothyroxine\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, LEVOTHYROXINE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: find medicine in empty inventory -\u003e 0 medicines found */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteAllMedicines();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \" + KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, LEVOTHYROXINE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \"FiNd n/Sodium\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * box displays {@code Messages#MESSAGE_MEDICINES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                MESSAGE_MEDICINES_LISTED_OVERVIEW, expectedModel.getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Also verifies that the loaded information table, selected card and status bar remain unchanged, and the command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * box has the error style."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 81,
      "-": 126
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class HelpCommandSystemTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        getMedicineListPanel().click();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(getInformationPanel().isBatchTableLoaded());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertListMatching(getMedicineListPanel(), getModel().getFilteredMedicineList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 7,
      "-": 95
    }
  },
  {
    "path": "src/test/java/systemtests/MediTabsSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.InformationPanelHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import guitests.guihandles.MedicineListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "flxffy"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.TypicalMedicines;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.ui.BatchTable;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": " * A system test class for MediTabs, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public abstract class MediTabsSystemTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Comparator\u003cMedicine\u003e comparator \u003d Comparator.naturalOrder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    protected Inventory getInitialData() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return TypicalMedicines.getTypicalInventory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public MedicineListPanelHandle getMedicineListPanel() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return mainWindowHandle.getMedicineListPanel();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public InformationPanelHandle getInformationPanel() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return mainWindowHandle.getInformationPanel();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Displays all medicines in the inventory."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    protected void showAllMedicines() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(getModel().getInventory().getSortedMedicineList(comparator).size(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "flxffy"
        },
        "content": "                getModel().getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Displays all medicines with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    protected void showMedicinesWithName(String keyword) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" \" + keyword);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "flxffy"
        },
        "content": "        assertTrue(getModel().getFilteredMedicineList().size()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                \u003c getModel().getInventory().getSortedMedicineList(comparator).size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Selects the medicine at {@code index} of the displayed list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    protected void selectMedicine(Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(index.getZeroBased(), getMedicineListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Deletes all medicines in the inventory."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    protected void deleteAllMedicines() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(0, getModel().getInventory().getSortedMedicineList(comparator).size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same medicine objects as {@code expectedModel}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * and the medicine list panel displays the medicines in the model correctly."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(new Inventory(expectedModel.getInventory()), testApp.readStorageInventory());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertListMatching(getMedicineListPanel(), expectedModel.getFilteredMedicineList());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Calls {@code InformationPanelHandle}, {@code MedicineListPanelHandle} and {@code StatusBarFooterHandle} to"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * remember their current state."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        getInformationPanel().rememberLoadedTableDetails();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        getMedicineListPanel().rememberSelectedMedicineCard();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the information panel is not displaying any"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * loaded table."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see InformationPanelHandle#isLoadedTableDetailsChanged()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getInformationPanel().isBatchTableLoaded());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getMedicineListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that the information panel is changed to display the details of the medicine in the medicine list panel"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * at {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see InformationPanelHandle#isLoadedTableDetailsChanged()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MedicineListPanelHandle#isSelectedMedicineCardChanged()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        getMedicineListPanel().navigateToCard(getMedicineListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        List\u003cString\u003e expectedDetails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedDetails.add(getMedicineListPanel().getHandleToSelectedCard().getName());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedDetails.add(getMedicineListPanel().getHandleToSelectedCard().getCompany());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedDetails.add(BatchTable.BATCHTABLE_FOOTER_QUANTITY"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + getMedicineListPanel().getHandleToSelectedCard().getQuantity());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedDetails.add(BatchTable.BATCHTABLE_FOOTER_EXPIRY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + getMedicineListPanel().getHandleToSelectedCard().getExpiry());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedDetails, getInformationPanel().getTableDetails());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getMedicineListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that the loaded information table and the selected card in the medicine list panel remain"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * unchanged."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see InformationPanelHandle#isLoadedTableDetailsChanged"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MedicineListPanelHandle#isSelectedMedicineCardChanged()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getInformationPanel().isLoadedTableDetailsChanged());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getMedicineListPanel().isSelectedMedicineCardChanged());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Asserts that the loaded information page has the correct information."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    protected void assertInformationPageIsCorrect() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        InformationPanelHandle informationPanelHandle \u003d getInformationPanel();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(informationPanelHandle.isBatchTableLoaded());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        informationPanelHandle.assertTableCorrect(testApp.getSelectedMedicine(),"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                getModel().getInformationPanelSettings().getValue());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertListMatching(getMedicineListPanel(), getModel().getFilteredMedicineList());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getInformationPanel().isBatchTableLoaded());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 75,
      "-": 221,
      "flxffy": 4
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static final Predicate\u003cMedicine\u003e PREDICATE_MATCHING_NO_MEDICINES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cMedicine\u003e toDisplay) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Optional\u003cPredicate\u003cMedicine\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(predicate.orElse(PREDICATE_MATCHING_NO_MEDICINES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public static void setFilteredList(Model model, Medicine... toDisplay) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Medicine} equals to {@code other}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private static Predicate\u003cMedicine\u003e getPredicateMatching(Medicine other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        return medicine -\u003e medicine.equals(other);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class SampleDataTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    protected Inventory getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void inventory_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine[] expectedList \u003d SampleDataUtil.getSampleMedicines();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertListMatching(getMedicineListPanel(), expectedList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 7,
      "-": 44
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_MEDICINE_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class SelectCommandSystemTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: select the first card in the medicine list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_MEDICINE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: select the last card in the medicine list -\u003e selected */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index medicineCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + medicineCount.getOneBased();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, medicineCount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: select the middle card in the medicine list -\u003e selected */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filtered medicine list, select index within bounds of inventory but out of bounds of medicine list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int invalidIndex \u003d getModel().getInventory().getMedicineList().size();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertFalse(getInformationPanel().isBatchTableLoaded()); // find command deselects medicine"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filtered medicine list, select index within bounds of inventory and medicine list -\u003e selected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredMedicineList().size() + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: select from empty inventory -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        deleteAllMedicines();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_MEDICINE.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected medicine.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. {@code Storage} and {@code MedicineListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the loaded information table is updated"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                MESSAGE_SELECT_MEDICINE_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getMedicineListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertInformationPageIsCorrect();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. {@code Storage} and {@code MedicineListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 5. Loaded information table, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 41,
      "-": 117
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyInventory\u003e inventory, Path saveFileLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(inventory, saveFileLocation));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 3,
      "-": 71
    }
  },
  {
    "path": "src/test/java/systemtests/UpdateCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BATCHNUMBER_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BATCHNUMBER_DESC_LISNOPRIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EXPIRY_DESC_LISNOPRIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BATCHNUMBER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EXPIRY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_QUANTITY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.QUANTITY_DESC_LISNOPRIL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BATCHNUMBER_LISNOPRIL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_AMOXICILLIN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_LISPINOL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_AMOXICILLIN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_LISNOPRIL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MEDICINES;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import static seedu.address.testutil.TypicalMedicines.KEYWORD_MATCHING_SODIUM;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Batch;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.BatchNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Expiry;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Medicine;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.model.medicine.Quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.BatchBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "import seedu.address.testutil.MedicineBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "public class UpdateCommandSystemTest extends MediTabsSystemTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    public void update() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* ---------------- Performing update operation while an unfiltered list is being shown --------------------- */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a new batch, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * -\u003e updated"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Index index \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine medicineToUpdate \u003d model.getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_LISNOPRIL + \"  \" + QUANTITY_DESC_LISNOPRIL + \" \" + EXPIRY_DESC_LISNOPRIL + \" \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch batch \u003d new BatchBuilder().withBatchNumber(VALID_BATCHNUMBER_LISNOPRIL)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withQuantity(VALID_QUANTITY_LISNOPRIL).withExpiry(VALID_EXPIRY_LISPINOL).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Medicine updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(batch.getQuantity().toString())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(VALID_EXPIRY_LISPINOL)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(batch).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, updatedMedicine, batch, index, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: undo adding the batch -\u003e batch removed */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: redo adding the batch -\u003e batch replaced */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.setMedicine(getModel().getFilteredMedicineList().get(index.getZeroBased()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                updatedMedicine);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        model.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: update existing batch, no expiry input -\u003e updated */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_LISNOPRIL + \"  \" + QUANTITY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch existingBatch \u003d batch;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Batch updatedBatch \u003d new BatchBuilder(existingBatch).withQuantity(VALID_QUANTITY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int changeInQuantity \u003d updatedBatch.getQuantity().getNumericValue() - existingBatch.getQuantity()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .getNumericValue();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updatedMedicine \u003d new MedicineBuilder(updatedMedicine).withAddedQuantity(Integer.toString(changeInQuantity))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(updatedBatch).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, updatedMedicine, updatedBatch, index, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: update existing batch, no quantity input -\u003e updated */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_LISNOPRIL + \"  \" + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        existingBatch \u003d updatedBatch;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updatedBatch \u003d new BatchBuilder(existingBatch).withExpiry(VALID_EXPIRY_AMOXICILLIN).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updatedMedicine \u003d new MedicineBuilder(updatedMedicine).withExpiry(VALID_EXPIRY_AMOXICILLIN)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(updatedBatch).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, updatedMedicine, updatedBatch, index, false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: remove existing batch -\u003e updated */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_LISNOPRIL + \"  \" + PREFIX_QUANTITY + \"0\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        existingBatch \u003d updatedBatch;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Map\u003cBatchNumber, Batch\u003e batches \u003d new HashMap\u003c\u003e(medicineToUpdate.getBatches());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batches.remove(existingBatch.getBatchNumber());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int newQuantity \u003d updatedMedicine.getTotalQuantity().getNumericValue()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                - existingBatch.getQuantity().getNumericValue();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updatedMedicine \u003d new MedicineBuilder(updatedMedicine).withQuantity(Integer.toString(newQuantity))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withExpiry(\"-\").withBatches(batches).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updatedBatch \u003d new BatchBuilder(existingBatch).withQuantity(\"0\").build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, updatedMedicine, updatedBatch, index, false);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* ------------------ Performing update operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filtered medicine list, update index within bounds of inventory and medicine list -\u003e updated */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        index \u003d INDEX_FIRST_MEDICINE;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredMedicineList().size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_LISNOPRIL + \"  \" + QUANTITY_DESC_LISNOPRIL + \" \" + EXPIRY_DESC_LISNOPRIL + \" \";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        medicineToUpdate \u003d getModel().getFilteredMedicineList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        batch \u003d new BatchBuilder().withBatchNumber(VALID_BATCHNUMBER_LISNOPRIL)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withQuantity(VALID_QUANTITY_LISNOPRIL).withExpiry(VALID_EXPIRY_LISPINOL).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        updatedMedicine \u003d new MedicineBuilder(medicineToUpdate)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedQuantity(VALID_QUANTITY_LISNOPRIL)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                .withAddedBatch(batch).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, index, updatedMedicine, batch, index, true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: filtered medicine list, update index within bounds of inventory but out of bounds of medicine list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        showMedicinesWithName(KEYWORD_MATCHING_SODIUM);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        int invalidIndex \u003d getModel().getInventory().getMedicineList().size();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + invalidIndex + \"  \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_AMOXICILLIN + \"  \" + QUANTITY_DESC_LISNOPRIL + \" \" + EXPIRY_DESC_LISNOPRIL + \" \";"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* --------------------------------- Performing invalid update operation ----------------__------------------ */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \"  \" + \"0\" + \"  \" + BATCHNUMBER_DESC_AMOXICILLIN + \"  \""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + QUANTITY_DESC_AMOXICILLIN + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \"  \" + \"-1\" + \"  \" + BATCHNUMBER_DESC_AMOXICILLIN + \"  \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + QUANTITY_DESC_AMOXICILLIN + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredMedicineList().size() + 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \"  \" + invalidIndex + \"  \" + BATCHNUMBER_DESC_AMOXICILLIN + \"  \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + QUANTITY_DESC_AMOXICILLIN + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_INVALID_MEDICINE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \"  \" + BATCHNUMBER_DESC_AMOXICILLIN + \"  \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + QUANTITY_DESC_AMOXICILLIN + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                UpdateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a new batch, no batch number input -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + QUANTITY_DESC_AMOXICILLIN + \"  \" + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a new batch, no quantity and no expiry -\u003e rejected */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a new batch, no expiry input -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_AMOXICILLIN + \"  \" + QUANTITY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_NEW_BATCH_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a new batch, no quantity input -\u003e rejected */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_AMOXICILLIN + \"  \" + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_NEW_BATCH_MISSING_PARAMETER);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: add a new batch, zero quantity input -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + BATCHNUMBER_DESC_AMOXICILLIN + \"  \" + PREFIX_QUANTITY + \"0 \" + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, UpdateCommand.MESSAGE_NEW_BATCH_ZERO_QUANTITY);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: invalid batch number -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + INVALID_BATCHNUMBER_DESC"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + QUANTITY_DESC_AMOXICILLIN + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, BatchNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: invalid quantity -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + BATCHNUMBER_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + INVALID_QUANTITY_DESC + EXPIRY_DESC_AMOXICILLIN;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        /* Case: invalid expiry -\u003e rejected */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        command \u003d \" \" + UpdateCommand.COMMAND_WORD + \"  \" + index.getOneBased() + BATCHNUMBER_DESC_AMOXICILLIN"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                + QUANTITY_DESC_AMOXICILLIN + INVALID_EXPIRY_DESC;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandFailure(command, Expiry.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the medicine at index {@code toEdit} being"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * updated to values specified {@code editedMedicine}.\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @param toUpdate the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCommandSuccess(String command, Index toUpdate, Medicine updatedMedicine, Batch updatedBatch,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Index expectedSelectedCardIndex, boolean isFiltered) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        expectedModel.setMedicine(expectedModel.getFilteredMedicineList().get(toUpdate.getZeroBased()),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                updatedMedicine);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (!isFiltered) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            expectedModel.updateFilteredMedicineList(PREDICATE_SHOW_ALL_MEDICINES);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "                String.format(UpdateCommand.MESSAGE_SUCCESS, updatedBatch), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * loaded information table and selected card remain unchanged."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see UpdateCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. Asserts that the loaded information table and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertInformationPageIsCorrect();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 3. Asserts that the loaded information table, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * {@code MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     * @see MediTabsSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jtankw3"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jtankw3"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jtankw3": 299
    }
  }
]
