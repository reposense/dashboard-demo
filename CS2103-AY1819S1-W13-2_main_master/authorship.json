[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d EventsPlus+"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W13-2/main[image:https://travis-ci.org/CS2103-AY1819S1-W13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "https://ci.appveyor.com/project/kaitingpeck/main[image:https://ci.appveyor.com/api/projects/status/5mecq596nyw31vnu?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W13-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W13-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\"\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A [blue]*convenient* and [green]*time-saving* command-line interface event manager for university students. With this"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "one-stop shop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "for managing contacts and events, a few lines and you’re all set!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\"\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* EventsPlus+ is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* It is a Java application catered for busy university students to manage their contacts, events, project meetings and ad-hoc"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " efficiently. EventsPlus+ aims to simplify some of the more time-consuming administrative tasks such as coordinating location and date of ad-hoc events"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " using a *Command Line Interface* (CLI)."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* This application includes the following features:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** A sophisticated GUI that includes a list panel and an in-built Browser."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* With this application, you can"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Avoid contact duplication, so the user has a clean and well-maintained address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Provide suggested locations and timings for events or meetings based on participants’ locations and timetable. This eases for the user the process of asking people for available timings / places to meet, by automating it."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Notifications to alert the user to favourited events"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Allow the user to import contacts from an external source"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Allow the user to manage events neatly in the address book, so that he/she can avoid event clashes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* This project is built on the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 26,
      "-": 27
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"githubId\": \"cjiefeng\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"displayName\": \"CHAI ... FENG\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "      \"authorNames\": [\"cjiefeng\", \"JACK\\\\Jack\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"githubId\": \"kaitingpeck\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"displayName\": \"PECK ... TING\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "      \"authorNames\": [\"kaitingpeck\", \"Kai Ting Peck\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"githubId\": \"pratyayj\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"displayName\": \"PRATY...AIDEV\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "      \"authorNames\": [\"pratyayj\", \"Pratyay Jaidev\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"githubId\": \"ryantanwk\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"displayName\": \"RYAN ... KEAT\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "      \"authorNames\": [\"ryantanwk\", \"Ryan Tan Wei Keat\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"githubId\": \"yap666y\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \"displayName\": \"YAP Y...U WEI\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "      \"authorNames\": [\"yap666y\", \"yuwei\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 25,
      "cjiefeng": 5
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u0027site-name\u0027: \u0027EventsPlus+\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-W13-2/main\u0027"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 2,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "EventsPlus+ was developed by team W13-2 of CS2103 AY18/19 Semester 1. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Jack Chai Jie Feng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::cjiefeng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[https://github.com/cjiefeng[github]][\u003c\u003ccjiefeng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Responsibility: Overall project coordination, Code quality +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Component: Model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Peck Kai Ting"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::kaitingpeck.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[http://github.com/kaitingpeck[github]][\u003c\u003ckaitingpeck#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Responsibilities: Scheduling and Tracking, Documentation, Set up Travis, Coveralls \u0026 Appveyor +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Component: Logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Pratyay Jaidev"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::pratyayj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[http://github.com/pratyayj[github]][\u003c\u003cpratyayj#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Responsibilities: Intellij expert +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Component: UI"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Yap Yu Wei"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::yap666y.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[http://github.com/yap666y[github]][\u003c\u003cyap666y#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Responsibilities: Deliverables and Deadlines +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Component: Storage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Ryan Tan Wei Keat"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::ryantanwk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "{empty}[http://github.com/ryantanwk[github]][\u003c\u003cryantanwk#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Responsibilities: Integration, Testing, Set up team org and repo +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Component: Logic"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 15,
      "kaitingpeck": 14,
      "-": 33
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-W13-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d EventsPlus+ - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-2/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "By: `Team W13-2`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `9`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "After forking the repo, the documentation will still have the EventsPlus+ branding and refer to the `CS2103-AY1819S1-W13-2/main` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If you plan to develop this fork as a separate product, you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::LogicClassDiagramUpdated.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Note how the `Model` simply raises a `SystemChangedEvent` when the application\u0027s data is changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::UiClassDiagramUpdated.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::LogicClassDiagramUpdated.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  `Logic` uses the `SystemParser` class to parse the user command."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::ModelClassDiagramUpdated.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* stores the application\u0027s data."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cEvent\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTag\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::StorageClassDiagramUpdated.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* can save the application\u0027s data in xml format and read it back."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Classes used by multiple components are in the `seedu.System.commons` package."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "//tag::toggle[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Toggles the UI tab to the tab on its right."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Toggle command raises a TabPanelSelectionChangedEvent event through the ModelManager."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "The tab panel is subscribed to this event and will loop the tabList and change the selected tab to its adjacent tab when the event is raised."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `logic#parser#ToggleCommandParser()` -- creates a ToggleCommand object."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `logic#commands#ToggleCommand()` -- raises a TabPanelSelectionChangedEvent through the ModelManager."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "ToggleCommand is not compatible with undo/redo since there is no writing of data to storage."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How change of UI tab is executed"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 1 (current choice):** TabPanel subscribe to an event which will be raised by ToggleCommand"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Convenient to implement."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Creates a new object and a new handler method."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 2:** Pass TabPanel into the ToggleCommand and select the new tab from ToggleCommand"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Does not require new event to be raised."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Increases coupling."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// end::toggle[]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "//@@author ryantanwk"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "//tag::favourite[]"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Select an existing event to be detailed in the notification if notification is enabled."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Details of favourite event (i.e. event name, date, day, time, details) stored as a String \"Favourite\" in preferences.json file."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "The favourite mechanism is implemented through the ModelManager."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Upon startup, if notification is enabled, and there is a String \"favourite\" in preferences.json is non-null, the notification will display the String \"favourite\"."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\"Favourite\" in preferences.json is also loaded into ModelManager."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Upon executing FavouriteCommand, the event is selected based on the input parameters and the filteredEventsListByDate."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "The attributes of the event is formatted into a String and saved to the ModelManager."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Upon exit, the formatted String in ModelManager is saved to preferences.json to ensure statefulness."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `logic#parser#FavouriteCommandParser()` -- creates a FavouriteCommand object based on user\u0027s inputs."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `logic#commands#FavouriteCommand()` -- updates the ModelManager\u0027s favouriteEvent attribute."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Given below is an example usage scenario and how the favourite mechanism behaves at each step."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Step 1. The user launches the application for the first time. The model\u0027s favouriteEvent attribute is initially null."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Step 2. The user executes `favourite d/2018-04-01 i/1`. The `favourite` command calls FavouriteCommandParser which checks validity of user inputs and creates a new FavouriteCommand which selects the event and create a formatted String from the event details."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "The favourite command will update favouriteEvent regardless of whether the new favouriteEvent String is the same as the existing String."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: How favourite is updated"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 1 (current choice):** Re-assign Model\u0027s favouriteEvent regardless of previous preference"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Wasteful in the case of same favorite event."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 2:** Check current favouriteEvent and only assign new value if it is different from the previous value."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Do not waste computing cycles on unecessary re-assingment of favouriteEvent."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Code becomes more complicated because additional check required."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Writing to preferences.json"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 1 (current choice):** Write all Model preferences to preferences.json"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Unecessary computing cycles wasted on writing when possibly no change"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 2:** Check for difference between Model preferences and preferences.json, only write to preferences.json if there is difference."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Efficient."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Code becomes more complicated because additional check required"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// end::favourite[]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "//tag::notification[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Enable/Disable Notification feature"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Notification preference is stored in the preferences.json file."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "The notification mechanism is facilitated by Javafx."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Upon startup, notification preference is loaded from preferences.json and saved to the ModelManager."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Upon exit, the model\u0027s notification preference is saved to preferences.json to ensure statefulness."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "When enabled, it creates a child stage and scene from the main window and displays with a countdown timer to automatically close the stage."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Additionally, it implements the following operations"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `ui#NotificationWindow()` -- creates the stage and scene for the notification using 2 String inputs: `title` and `message`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `logic#parser#NotificationCommandParser()` -- creates a NotificationCommand object based on user\u0027s input"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `logic#commands#NotificationCommand()` -- updates the ModelManager\u0027s notificationPref attribute."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Given below is an example usage scenario and how the enable/disable notification mechanism behaves at each step."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Step 1. The user launches the application for the first time. The model\u0027s notification preference is initally enabled, the notification window appears."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Step 2. The user executes `notification disable`. The `notification` command calls NotificationCommandParser which converts `disable` into the boolean `false` and creates a new Notification Command which updates the Model\u0027s notification preference to false."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "The notification command will update the notification preference regardless of whether the new preference is same as the previous preference."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How notification preferences is updated"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 1 (current choice):** Re-assign Model\u0027s notification preference regardless of previous preference"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Wasteful in the case of same notification preference."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 2:** Check current notification preference and only assign new value if it is different from the previous value."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Do not waste computing cycles on unecessary re-assingment of notification preference."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Code becomes more complicated because additional check required."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Writing to preferences.json"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 1 (current choice):** Write all Model preferences to preferences.json"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Unecessary computing cycles wasted on writing when possibly no change"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* **Alternative 2:** Check for difference between Model preferences and preferences.json, only write to preferences.json if there is difference."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Pros: Efficient."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Cons: Code becomes more complicated because additional check required"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// end::notification[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedSystem`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "It extends `System` with an undo/redo history, stored internally as an `SystemStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `VersionedSystem#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `VersionedSystem#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `VersionedSystem#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitSystem()`, `Model#undoSystem()` and `Model#redoSystem()` respectively."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedSystem` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitSystem()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `SystemStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitSystem()`, causing another modified address book state to be saved into the `SystemStateList`."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If a command fails its execution, it will not call `Model#commitSystem()`, so the address book state will not be saved into the `SystemStateList`."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoSystem()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoSystem()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoSystem()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If the `currentStatePointer` is at index `SystemStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoSystem()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitSystem()`, `Model#undoSystem()` or `Model#redoSystem()`. Thus, the `SystemStateList` remains unchanged."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitSystem()`. Since the `currentStatePointer` is not pointing at the end of the `SystemStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedSystem`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//@@author kaitingpeck"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[AddDeleteEvents]]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::addEventsHeader[]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Add/Delete Events feature"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Structure of an Event"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "In the `Model` component, an `Event` consists of various `Event` attributes."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Namely, the classes `EventName`, `EventDescription`, `EventDate`, `EventTime`, `EventAddress` are used to represent respective information in an `Event`,"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "as shown in the Class diagram below. Note that `EventDay` is generated from `EventDate` values, and each event also contains a `Set` of `Person` and `Tag` objects,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "which are used to represent the event contacts (from the address book) and event tags (from \u003c\u003cEventTags, event tags\u003e\u003e currently existing in the address book). +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::addEventsHeader[]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "By doing so, we achieve more abstraction and cohesion, and this abides by the Separation of Concerns (SoC) principle at the class level."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "On top of facilitating checking of bugs within the individual attributes,"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "doing so will also allow the developer to alter the definition of the different attribute classes, as well as to add more attributes into the"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`Event` class easily."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::eventDiagram[]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::Event.png[Event class]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::eventDiagram[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::addEvents[]"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Adding/Deleting of an Event"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Methods have been added to `ModelManager`, `AddressBook` and the newly-added class `UniqueEventList` to facilitate adding and deleting of events."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "In order to limit modification of the internal list of `Event` objects, changes to this list is only carried out at the most fundamental level,"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "which is `UniqueEventList`. `AddressBook` stores a reference to this internal list, and `ModelManager` stores an unmodifiable copy of this list."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "An example usage scenario of the adding of events is as shown in the sequence diagram below."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The diagram shows the interaction between the different components in the system when an event is added."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The interaction between components is similar for the deletion of an event."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event-component.png[Interactions between components]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "More specific interactions between `Logic` and `Model` are as shown in the diagram below."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event_logic-model.png[Interactions between Logic and Model, width\u003d\"750\", height\u003d\"700\"]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. User enters command to add an event +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `AddressBookParser` calls `AddEventCommandParser`, which generates an `AddEventCommand` with an `Event` and `Set\u003cIndex\u003e`. The latter specifies the contacts (indices) to add into the event. +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `AddEventCommand` calls `Model#hasEvent`, `Model#hasClashingEvent`, `Model#hasEventTag` to check if event details are valid. +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. `AddEventCommand` calls `Event#setEventContacts` to set the `Set\u003cPerson\u003e` of event contacts (Each `Person` has to be in the existing address book records). +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 5. `AddEventCommand` calls `Model#addEvent` after all checks have passed. The event is added into the system from the `Model` component. +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "For deletion of event(s), the flow is similar."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::addEvents[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The sequence diagram for the deletion of event is shown below. +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::delete-event-condensed_logic-model.png[Deleting an event, width\u003d\"750\"]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. User enters command to delete an event based on the event date and index (as displayed in the UI) +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `AddressBookParser` calls `DeleteEventCommandParser`, which generates an `DeleteEventCommand` with an `EventDate` and `Index`. +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `DeleteEventCommand` \u003c\u003cgettingAnEvent, gets the event\u003e\u003e."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. The event from step 3 is deleted from the system from the `Model` component. +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[gettingAnEvent]]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Events are retrieved based on their date and index in the displayed events list, as shown in the diagram below."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::get-event.png[Getting an event, width\u003d\"350\", height\u003d\"300\"]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "For the case of `DeleteEventCommand`, we let `XYZCommand` be `DeleteEventCommand`. +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. `DeleteEventCommand` calls `Model#getFilteredEventListByDate` to retrieve the last shown event list. +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `DeleteEventCommand` calls `getTargetDateList` to retrieve the list from which the event belongs to.  +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `DeleteEventCommand` calls `getEvent` to retrieve the event based on its index in the list from step 2. +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::addEvents2[]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Upon adding/deletion of events in `Model`, `AddressBookChangedEvent`, `AddressBookEventChangedEvent` and `EventPanelDisplayChangedEvent`"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "are triggered from the `Model` component."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The raised events are handled by:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `UI`, which updates the displayed information and updates the active tab to the Events tab, and"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `Storage`, which saves the information to an XML data file."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "For instance, when an `Event` is added (or deleted), the event triggers are handled as follows."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event_event-trigger.png[Handling of triggered events]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d UI Events Display"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To display the event information according to their date, a list of lists of events grouped by `EventDate` is set in the `ListView` object in the `EventPanelList`."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Each cell represents the `EventListCard` for a particular date, which contains all the events, each displayed in a `EventCard`. For this implementation,"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "we require `ModelManager` to be able to return such an `ObservableList\u003cList\u003cEvent\u003e\u003e` object to the UI class `MainWindow`, and this is achieved via the method"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`ModelManager#getFilteredEventListByDate`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data Structure to Support the UI Events Display"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 1 (current choice):** Store a list of type `ObservableList\u003cList\u003cEvent\u003e\u003e` in the `ListView` object in the `EventPanelList`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This list is re-computed from `Model` each time a change in the internal list of events is detected, and the"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "updated list is passed to the UI class `MainWindow`."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This facilitates a regeneration of the `TabPanel` stored in `MainWindow`, updating the display of events to the user."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* We only need to maintain one internal list of `Event` objects. For the UI"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "to be updated with new information whenever events are added into/deleted from the underlying `Event` list,"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "we make use of a listener on the `filteredEvents` list in `Model`."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Whenever there is a change detected by `filteredEvents`, an `AddressBookEventChangedEvent` is posted"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** `MainWindow` resets its `TabPanel` and passes the re-computed list (events grouped by date) into it."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::ui-display-ad.png[Refresh of Tab Panel on Event Change]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* There is a regeneration of the `TabPanel` object in `MainWindow` each time such an event occurs."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "However, this overhead is still acceptable given the current scale of the `AddressBook`."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::addEvents2[]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 2:** Store a list of type `ObservableList\u003cObservableList\u003cEvent\u003e\u003e` in `UI` and `Model`,"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "where each `ObservableList\u003cEvent\u003e` is the list of events for a given date."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Update this alongside the `filteredEvent` list in `Model`, by adding a listener to `filteredEvents`,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "such that each time the internal list of events changes, the corresponding update is performed on the 2D-list."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* There is no need to regenerate the list for `UI`, since information in this list stays updated."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This reduces overhead incurred in list regeneration."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons*: If more actions are carried out on the internal event list, the listener will have to be updated,"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "as it will have to listen to more types of changes. This could potentially create more bugs in the code."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 3:** Store a list of type `ObservableList\u003cObservableList\u003cEvent\u003e\u003e` (similar structure as in Alternative 2) in `UI` and `Model`."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Create another internal list `UniqueEventListByDate` for this list of lists. Update this alongside `UniqueEventList`."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:*"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** There is no need to regenerate the list for `UI`, since information in this list stays updated."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** No listener is required, since an event can be added to `UniqueEventList` and `UniqueEventListByDate` simultaneously."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* Two lists have to be maintained, both storing the same `Event` objects."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The task of maintaining two lists may lead to inconsistencies between the two lists and more complex code in future."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Restrictions on Event Tags"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 1 (current choice):** Valid event tags to be restricted to a list which can be edited by the user."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* Allows event tags to be standardized, and the user can keep track of the all the types of events he/she has just"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "by referring to the `Flowpane` containing all the event tags available in the system. This also facilitates finding of events"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "by event tags."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* More work has to be done from the user\u0027s end, as he/she has to add an event tag in the system"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "before adding an event with that tag."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 2:** No restriction to event tags."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* Less work by the user, as he/she can just add any event tag when adding an event into the system."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* Less standardization of event tags, which may cause the user\u0027s data to become more disorganized in future."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 3:** (2-in-1 approach) Event tags that are non-existing in EventsPlus+ to be added upon adding an event with that new tag."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* Less work by the user, and tag gets automatically added into the system."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* The `addEvent` command will be performing two different actions - adding an event"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and adding an event tag. This may violate the Single Responsibility Principle (SRP) for the `AddEventCommand` class."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[seeEventContacts]]"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::seeEventContacts[]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d See Event Contacts feature"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::seeEventContacts[]"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::seeEventContacts2[]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To obtain an event\u0027s contacts, comparisons are done using `Person#isSamePerson` to check if for each event contact, there exists a person in the system"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "who is the same person as the contact. By the use of a `Predicate` with this logic, we then apply the filter on `filteredPersons` in `Model`. +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::seeEventContacts2[]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The sequence diagram below shows a typical usage of the feature."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The flow for getting an event using date and index is the same as in \u003c\u003cgettingAnEvent, getEvent\u003e\u003e."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::see-event-contacts-condensed_logic-model.png[Interactions between Logic and Model, width\u003d\"700\"]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. User enters command to see an event\u0027s contacts. +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `AddressBookParser` calls `SeeEventContactsCommandParser`, which generates a SeeEventContactsCommand` with an `EventDate` and `Index` +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `SeeEventContactsCommand` \u003c\u003cgettingAnEvent, gets the event\u003e\u003e. +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. A `ExistingPersonInEventPredicate` is created based on the event\u0027s contacts from the event retrieved in Step 3. +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 5. `SeeEventContactsCommand` calls `Model#updateFilteredEventList` to filter the displayed list using the `Predicate` object generated in step 4. +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Considerations"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The displayed person list shown using this feature is aligned with the contact information displayed in the UI when hovering over the event contact. +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Namely, both the displayed person list and information displayed in the UI are obtained by checking if there is a same person as the person originally"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "added into the event (using `Person#isSamePerson`) in the system. If there is, the information is shown; else, the person is regarded as"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "having been deleted from the system. +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "More specific scenarios are as follows:"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* When an event contact is deleted from EventsPlus+, the `seeEventContacts` command would not display the person in the filtered list."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Simultaneously, when hovering over the event contact, the user would see a message indicating that the person has been deleted from the system."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This is so that users can still see the person as related to the event (when the event is first added),"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "even when the person\u0027s contact details no longer exist in the address book."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* When an event contact is edited in EventsPlus+, if the edited person is still the same person (using `Person#isSamePerson`) as the original person,"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`seeEventContacts` would display the edited person. When hovering over the contact, the edited person would also be displayed."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* When an event contact is edited in EventsPlus+, if the edited person is no longer the same person (using `Person#isSamePerson`),"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`seeEventContacts` would not display the original nor edited person. When hovering over the contact, if there is no such person in the"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "system who is the same person as the person originally added into EventsPlus+,"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "the user would see a message indicating that the person has been deleted from the system."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[EditEventAddress]]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::editEventAddress[]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Edit Event Address feature"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::editEventAddress[]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::editEventAddress2[]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To edit an event\u0027s existing address, the system first retrieves the event from the address book. This process is similar to that for"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "deleting an event. A new `Event` object is created with the same details as the old `Event` object, but with the updated `EventAddress`."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This new `Event` replaces the old one in the address book in the `Model#updateEvent` method, i.e. the old `Event` object is removed"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "from the internal list, and the new one set in its position. +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::editEventAddress2[]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The overall flow between the `Logic` and `Model` component when editing an event address\u0027s tag is as follows."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The flow for getting an event using date and index is the same as in \u003c\u003cgettingAnEvent, getEvent\u003e\u003e."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::edit-event-address-condensed_logic-model.png[Interactions between Logic and Model, width\u003d\"750\"]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. User enters command to edit an event\u0027s address based on the event date and index (as displayed in the UI) +"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `AddressBookParser` calls `EditEventAddressCommandParser`, which generates an `EditEventAddressCommand` with an `EventDate`, `Index`"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and the updated `EventAddress`. +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `EditEventAddressCommand` \u003c\u003cgettingAnEvent, gets the event\u003e\u003e."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. A new event with all details (except `EventAddress`) duplicated from the old event in step 3 is created. +"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The `EventAddress` attribute of this new event is set to the updated `EventAddress` passed in to `EditEventAddressCommand` in step 2. +"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 5. The old event is replaced with the new one in the system from the `Model` component, through the execution of `Model#updateEvent`."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::editEventAddress3[]"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Considerations"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "When editing an event, there are several possible values that can be updated, including the event\u0027s name, description, etc."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "However, this functionality is mainly catered to complement the `suggestLocation` functionality, whereby the user"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "can first add an event without specifying any location (and address will be displayed as TBD), and"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "edit the suggested location in afterwards."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::editEventAddress3[]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[EventTags]]"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::eventTags[]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Add Event Tags feature"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::eventTags[]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::eventTags2[]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The list of event tags in the system is stored in a `UniqueTagList` in `Model`."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This implementation requires all event `Tag` objects to be unique (using case-insensitive comparison) +"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "All event tags are always shown, hence it is sufficient to"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "to keep an `ObservableList\u003cTag\u003e` in `ModelManager`, rather than a `FilteredList` which is used to store list of `Person` and `Event` objects. +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::eventTags2[]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "An event tag specified by the user is added in the system as depicted in the sequence diagram below."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event-tag_logic-model.png[Interactions between Logic and Model, width\u003d\"700\"]"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::eventTags3[]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. User enters command to add an event tag. +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `AddressBookParser` calls `AddEventTagCommandParser`, which generates an `AddEventTagCommand` with a `Set` of `Tag` object. +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `AddEventTagCommand` calls `Model#hasEventTag` to check for duplicate tags already in the system. +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. `AddEventTagCommand` calls `Model#addEventTag` to add the new event `Tag` into `Model`."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::eventTags3[]"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[filteringEvents]]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::filterEvents[]"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Filtering of Events"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[FindEvent]]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Find Event (by tag) feature"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::filterEvents[]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::filterEvents2[]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To find events by their tags, we make use of a `Predicate`. The `EventTagMatchesKeywordsPredicate` is used in filtering"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "all events which have at least one tag matching at least one of the keywords provided by the user. +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::filterEvents2[]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::find-event_logic-model.png[Interactions between Logic and Model, width\u003d\"750\"]"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::filterEvents3[]"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. User enters command to find events with certain tags. +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `AddressBookParser` calls `FindEventCommandParser`, which generates an `FindEventCommand` with an `EventTagMatchesKeywordsPredicate`. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `FindEventCommand` calls `Model#updateFilteredEventList` to filter the displayed list using the `Predicate` generated in step 2. +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Similar to the other event-related commands, the list-filtering is done in `Model`, and"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "the change is propagated to the `UI` component by triggering an event."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::filterEvents3[]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The details of the event triggers are as follows."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::find-event_event-triggers.png[Handling of triggered events]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[listEvent]]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Listing of all events"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To list all events, we make use of a `Predicate` which is always true (the `PREDICATE_LIST_ALL_EVENTS` constant)."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::list-event_logic-model.png[Interactions between Logic and Model, width\u003d\"650\"]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The `UI` components are updated using a similar flow (by event triggers) to the \u003c\u003cFindEvent, find event\u003e\u003e feature. +"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Note:* The inclusion of the `EventDisplayPanelChangedEvent` is required in `Model#updateFilteredEventList`"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "so that `TabPanel` can switch to the event tab automatically whenever any of these commands are executed,"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "even if there is no change to data in the filtered list"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "(for example, when `listEvent` is executed even though all events are already currently listed)."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[Autocomplete]]"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::autoComplete[]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Command Auto-completion feature"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Command auto-completion uses a fixed list of all command words in EventsPlus+. Each time the user"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "presses the `Tab` key, a check is run against the internal list of command words (including aliases)"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and the input is auto-completed to the nearest command word containing the current user input, if any."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The following activity diagram outlines the typical usage of this feature."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::autocomplete-ad.png[Auto-complete command activity diagram, width\u003d\"800\"]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Aspect: Computing the nearest valid command word"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 1 (current choice):** Each time the `Tab` key is pressed,"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`String#startsWithPrefix` is used to check against the internal list for the nearest possible"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "command word."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* The implementation is neater as most of the checking is done by `String#startsWithPrefix`."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* The current input has to be checked against potentially every valid command word."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::autoComplete[]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 2:** Store a `HashMap` with maps every possible prefix of every command word to the corresponding command word."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Do a lookup in the `HashMap` using current user input as the key and return the value (command word) if any."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* Typically constant time lookup for each prefix in the `HashMap`."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* More space required to store all the possible prefixes. Furthermore,"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "if no such prefix is contained in the mapping, takes linear time with respect to size of the map."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 3** Use a Prefix Tree (Trie) implementation, where the intermediate nodes are the prefixes and"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "leaf nodes are the valid command words."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* Provides a balance between time and space complexity."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* Potentially more complex implementation."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::tab[]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Tab feature"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d Current implementation"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`UI` component consists of a `TabPanel` which stores all the `Tab` objects in the `UI` as follows."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::tabPanel.png[Tab Panel basic class diagram]"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 1 (current choice):** `TabPanel` to store all `Tab` objects."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* New tabs can be added easily as a class, and initialized in `TabPanel`."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "This abides by the SoC principle and each tab can be managed separately from the others."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **Alternative 2:** Store the methods for each `Tab` in the same class `TabPanel`."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Hence, all the tabs and their methods are contained in this class."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Pros:* Less code needed, especially if some tabs have similar or overlapping methods."
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** *Cons:* Does not abide by SoC and SRP principle, since this one class would have to change for many reasons."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::tab[]"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "// tag::importContacts[]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "\u003d\u003d\u003d Import Contacts"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "When `FileReader` is created, it will read the provided CSV file, breaking the first line into Arrays of Strings. +"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "`FileReader` then take note of the index of mandatory fields:"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* Name"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* Email"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* Phone Number"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* Address"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* Faculty"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "`ModelManager` now implements `importContacts` and it calls on `VersionedAddressBook`. +"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "`VersionAddressBook` is being called so that undo redo can work on import contacts command. +"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "`VersionAddressBook` extends `AddressBook` and it implements `importContacts`. +"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "`importContacts` will get the list of contacts from `FileReader` and the index all all mandatory fields. +"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "For each of the contact in contact list, `Person` is created using index saved for each mandatory fields. +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "Returned `Person` objects are then inserted into `UniquePersonsList` with validation. +"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "The number of successful inserts will be displayed. +"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "The following sequence diagram shows how the importContactsCommand operation works:"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::ImportContactsSequenceDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "// end::importContacts[]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// tag::showFacultyLocationDisplay[]"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Show Person\u0027s faculty location visually"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "The displaying of the a ``Person``\u0027s faculty is facilitated by the newly added `Faculty` field in the `Person` class. This"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "`Faculty` field is defined as a separate class (akin to other classes constituting the `Person` class such as `Email` and `Address`)."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "During the adding of ``Person``\u0027s to EventsPlus+\u0027s address book, the `Faculty` class will ensure that the argument passed in is that of"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "a valid NUS faculty. It does this via an inner enum class called `Faculties` which stores as constants the only accepted `Faculty`"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "argument values. The `isInEnum` method is used to check that the argument passed already exists as one of the constants."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "The valid arguments allowed are namely:"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* SOC (School of Computing)"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* FOS (Faculty of Science)"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* YLLSOM (Yong Loo Lin School of Medicine)"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* FOD (Faculty of Dentistry)"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* BIZ (NUS Business School)"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* SDE (School of Design and Environment)"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* FOE (Faculty of Engineering)"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* FOL (Faculty of Law)"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* YSTCOM (Yong Siew Toh Conservatory of Music)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* FASS (Faculty of Arts and Social Sciences)"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "A \"-\" response is also allowed as it is possible that EventsPlus+\u0027s address book"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " may indeed have contacts who are not students of NUS at the current point in time."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "The command used to display the faculty visually is `showLocation`."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "In addition to the `Faculty` field, the showLocation command is assisted by Google Maps Embed API that allows for locations"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "to be displayed visually in a separate tab, Location Display Tab. Google Maps uses unique Place IDs to identify locations"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "on the map. For each faculty, these place IDs are stored in a newly created class `EmbedGoogleMaps` in the logic component of the"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "application. Together with the Google Maps API key, the place ID allows for the generation of the exact spot of the person\u0027s"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "faculty to be displayed in the Location Display Tab."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "When the (correct) `showLocation` command is input together with the index of the individual whose faculty location is to be displayed,"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "the index is first checked to determine if it is correct (more than 0 and not larger than the size of the list of contacts"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "in EventsPlus+\u0027s addressbook). Following this, the appropriate person is obtained from the `FilteredPersonList` (this is so as to allow"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "the displaying of the contact\u0027s faculty location even if the list is filtered)."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "A event, `FacultyLocationDisplayChangedEvent`, also newly created for this showLocation command, is posted and is then handled by `TabPanel` (which switches to the Location"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Display Tab) and subsequently by `LocationDisplayPanel`. The status message will show \"Selected person: [INDEX]. Faculty location successfully displayed.\""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "If the contact has no faculty, a default location - University Hall - is displayed on the map."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "The above-mentioned information can be represented in the following sequence diagram:"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "image::showLocation_UI_LogicManager_seqDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "image::showLocation_EventsCenter_seqDiagram.PNG[width\u003d\"800\"]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// end::showFacultyLocationDisplay[]"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// tag::generateMeetingLocation[]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Generate a random meeting location for event"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "The generation of a random meeting location primarily builds upon the visual display of a ``Person``\u0027s faculty. However"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "there are a few key differences in the process that one needs to take note of."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "The command used to generate this possible meeting location is `generateLocation`."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "In order to generate a random location for an event, the user needs to input (in addition to the command) the"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "event date and event index. This is to detect the unique event (because some events may have the same name) and to ensure"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "that this event is currently in EventsPlus+."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Command parsing is handled in a similar manner as other commands but there exists a specific `GenerateLocationCommandParser` to specifically parse"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "these kind of commands. The GenerateLocationCommand object created will then consist of two fields:"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* Event date"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* Event index"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "The values for these fields are based on the input given by the user. These values are checked for validity as per other event-related"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "commands before the object is created. Following this, EventsPlus+ is checked to determine whether this event does"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "exist. If it does exist, the event name is retrieved and stored in the `GenerateCommandLocation` object."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "The status message indicates that a meeting location (it will show the meeting name too) has been generated, if not it indicates to the user"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "that such as event does not exist."
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "A random meeting location is generated based on 7 locations (more will be added in future iterations) that have their Google Maps Place IDs stored in the `EmbedGoogleMaps` class."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "A call to the method that generates this location (more specifically, returns the Place ID of the location) is made in the execute"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "method of GenerateLocationCommand."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Following this, a event, `RandomMeetingLocationGeneratedEvent`, newly created for this generateLocation command, is posted and is then handled by `TabPanel` (which switches to the Location"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Display Tab) and subsequently by `LocationDisplayPanel`."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "For simplicity, only the logic and event handling sections of the sequence diagram are shown below for the `generateLocation` command:"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "image::generateLocation_EventsCenter_EmbedGoogleMaps_seqDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// end::generateMeetingLocation[]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A project often depends on third-party libraries. For example, EventsPlus+ depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Typical university student who"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* needs to manage a significant number of contacts from various social circles in and out of school"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* is usually kept busy due to many classes from different faculties and/or other commitments"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* finds it difficult to juggle the task of contacting different members across different module projects"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* finds it difficult to determine convenient timings / locations for meetings"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* is reasonably comfortable with Command Line Interface (CLI) apps"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* prefers typing to mouse input"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* prefers desktop apps"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Value proposition*: A convenient and time-saving command-line interface event manager for university students"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Our enhanced Addressbook application will offer its users the following benefits:"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* Avoid contact duplication, so the user has a clean and well-maintained contacts list."
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* Show location of a person\u0027s faculty visually, so that it is easier for user to see the location"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(and can even use the embedded Google Maps to show walking directions)."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* Provide suggested locations for events or meetings to prevent the need for the user to spend energy thinking"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "about where the group can meet by providing a list of locations that can be considered."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Notifications to alert the user to favourited events"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Allow the user to import contacts from an external source"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* Allow the user to manage events neatly in EventsPlus+, so that he/she can avoid event clashes."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::userStories[]"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |add a new person |store more contacts in the app"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |university student on multiple platforms (including social media) |import contacts from other sources (Facebook, Linkedin, etc.) |synchronize my contacts with other applications"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |forgetful user |attach a picture to every contact [Coming in V2.0] |remember how the person looks like [Coming in V2.0]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |forgetful user |save some interesting notes about the contact [Coming in V2.0] |remember characteristics or traits of the contact"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |delete multiple contacts at one go [Coming in V2.0] |clean up my address book easily"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail, private contact details\u003e\u003e by default [Coming in V2.0] |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name [Coming in V2.0] |locate a person easily"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |undo and redo changes |easily correct a wrongly taken action"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |edit contact information (contact numbers, addresses, tags, faculty, etc.) of existing contacts |be assured my contacts are up-to-date"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |edit the information of multiple contacts at one go [Coming in V2.0] |maintain up-to-date records more efficiently"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |add more than one number to a contact [Coming in V2.0] |retrieve all the contact numbers of the contact at one go"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |view contacts by tags [Coming in V2.0] |locate contacts in my different social circles easily"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |receive a toast for every action |be assured of the changes made"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |choose what notifications I would like to receive |minimize distractions from the app"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |create new \u003c\u003cgroups, group\u003e\u003e from already existing contacts |collaborate with existing contacts"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |create new \u003c\u003cgroups, group\u003e\u003e from new contacts [Coming in V2.0] |have new group members automatically added in my address book"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |user |add contacts to an existing \u003c\u003cgroup, group\u003e\u003e [Coming in V2.0] |include later-joining members"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |be prompted to add new contacts to a suggested \u003c\u003cgroup, group\u003e\u003e based on the tags [Coming in V2.0] |be reminded to update groups with possible new users"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |rename groups [Coming in V2.0] |change the name of \u003c\u003cgroups, group\u003e\u003e over time"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |merge \u003c\u003cgroups, group\u003e\u003e [Coming in V2.0] |organize my groups"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |split \u003c\u003cgroups, group\u003e\u003e [Coming in V2.0] |organize my groups"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |view team members belonging to a \u003c\u003cgroup, group\u003e\u003e |view my contacts related to a specific group"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |view other contacts in the same \u003c\u003cgroup, group\u003e\u003e as a specific contact [Coming in V2.0] |view group-related contacts using the information of only one member"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |remove a contact from a \u003c\u003cgroup, group\u003e\u003e [Coming in V2.0] |ensure that the group member list is up-to-date"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |delete an entire \u003c\u003cgroup, group\u003e\u003e [Coming in V2.0] |remove inactive groups without affecting my contact list"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |university student |add events to the app |keep track of my schedule and upcoming events"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* *` |busy university student |save my timetable in the app [Coming in V2.0] |tell easily when any events clash with my timetable"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |university student |check if an event clashes with my schedule |better decide if I can set up an appointment at that time slot"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "|`* * *` |new university student |visually locate a contact\u0027s faculty on a map"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "|find faculty locations easily as I am unfamiliar with the campus"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "|`* * *` |busy university student |find a possible meeting location for an event or a meeting"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "|find a meeting location on campus quickly so as to save time and energy thinking about such minor details"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |considerate  university student |obtain a meeting time that is convenient for all contacts in a group [Coming in V2.0]"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "|find a convenient time for events or meetings"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "|`* * *` |considerate university student |obtain a meeting location that is convenient for all contacts in a group [Coming in V2.0]"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(based on faculty) |find a convenient location for events or meetings"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |edit an event\u0027s address |update the event\u0027s address after getting a suggested location"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |busy university student |view all contacts related an event quickly |get the contact information I needed quickly"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |organized university student |view events by tags |know quickly the events I have upcoming of a certain type"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |university student |view my events for a particular week [Coming in V2.0] |gauge my availability for that week"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |share multiple contacts with my peers [Coming in V2.0] |exchange contacts quickly"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |archive inactive \u003c\u003cgroup, group\u003e\u003e without deletion [Coming in V2.0] |avoid clutter in the list of visible groups without losing the information permanently"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`*` |user |un-archive \u003c\u003cgroup, group\u003e\u003e [Coming in V2.0] |continue working with groups that have been re-activated if needed"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| `* *` |user |detect similar contacts when importing contacts from an external source e.g. .csv file and merge them [Coming in V2.0] |avoid having duplicate contacts"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|`* * *` |user |I cannot add duplicate contacts (manually) [Coming in V2.0] |avoid having duplicate contacts"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::userStories[]"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "(For all use cases below, the *System* is `EventsPlus+` and the *Actor* is the `user`, unless specified otherwise)."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC1: Add person"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  User requests to add a new contact"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  System adds the contact and displays the new contact added"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. The input information is invalid."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC2: Delete person"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  User requests to list persons"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  System shows a list of persons"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  System deletes the person"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 3a1. System shows an error message."
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC3: Add events"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to add event."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System records and displays event."
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. System detects a clash with the user\u0027s schedule."
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System shows a message informing the user of the clash."
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC4: View all events"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to view all events."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System displays all events."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. User enters invalid command."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System displays error message."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC5: Delete an event"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Guarantees: Only the selected event will be deleted from the existing list."
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tUser requests to delete an event."
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tSystem removes the event from the user’s personal list of events"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and displays message showing that the event is deleted."
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. User enters invalid event identifier or invalid command."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System displays error message."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC6: Find an event by event tag"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Precondition: Event tag exists in the system."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Guarantees: Events with the specified tags will be shown."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tUser requests to get all events tagged with a specific event tag."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tSystem shows all events with the specified tags."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC7: Edit an event address"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Precondition: Event to edit exists in the system and address is valid."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Guarantees: Event will be edited with the given address."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tUser requests to edit the address of a specific event in the address book."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".\tSystem updates the address of the specified event and displays a message to the user informing them of the update."
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC8: Upcoming event notification"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Notification appears 24h before the event."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User taps on notification."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User is redirected to app homepage."
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC9: Show contact\u0027s faculty location visually"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User selects a person that he/she wants to have their faculty location displayed on Google Maps."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System makes Google Maps Embed API calls to display this location."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System switches to the location display tab automatically to show the result."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC10: Generate possible event location"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User selects the event (using date and index) that he/she wants to find an event location for."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System randomly generates a meeting location from those stored and displays it to user in location display tab using Google Maps Embed API."
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User considers the location and deems it to be acceptable or not."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System indicates in status message what course of action to take from here."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* 4a. User accepts the generated location."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 4a1. User uses the editEventLocation command (as indicated in the status message) to edit event location with the one generated."
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 4a2. Handling of the editing of event location is taken care of by editEventLocation command."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 4a3. If user does not like the generated location, user does not have to do anything and continues using the application according to what he/she wants to do."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC11: Import contacts"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User request to import contacts."
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System records and displays how many successfully added and duplicates."
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. User enters invalid file path (not a file or not an absolute path)."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System displays invalid file path."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 2a. System detects empty file."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2a1. System displays empty file."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 2b. System detects invalid csv format (cannot find compulsory header in csv)."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2b1. System displays invalid csv file."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d UC12: View contacts of an event"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to view contacts for an event."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System displays the contact information for all contacts included in the event."
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 2a. System is unable to find a matching contact"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2a1. System does not display the information for the contact which cannot be found and shows only the existing contacts\u0027 information."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "////"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Coming in V2.0"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC13: Create new group"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User requests to add new group of persons"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System creates a new group with that name and displays the newly created group"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* 1a. The input information is invalid."
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC14: View contacts for a group"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User requests to view contacts for a particular group"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System displays all contacts in that group"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* 1a. The group name is invalid."
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 1a1. System shows an error message."
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC15: Find groups by keyword"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to get groups with a certain keyword."
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System displays all the groups containing that keyword."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC16: View contacts by tag"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to view contacts for a given tag."
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System displays contacts under that tag."
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 1a. User enters invalid tag."
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 1a1. System displays invalid tag message and returns to original screen."
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "+"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC17: Import timetable"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User is redirected to IVLE login for app to access IVLE data."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". Toast indicating successful import."
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User is redirected to timetable page on the app."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "User case ends."
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* 2a. Incorrect login procedure is handled by IVLE."
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* 2b. System detects a clash with the user\u0027s schedule."
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2b1. System displays error message showing a clash."
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2b2. System asks if user wants to add the event anyway."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** 2b3. System adds the event (or not)."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** If user does not want to add the event, use case ends."
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** Else, use case resumes from step 3."
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC18: Message multiple users"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User requests to send emails to a particular project group."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System goes to email page and puts all contacts in the email recipient list."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". User sends email."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". System returns to original screen."
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* 3a. User exits email screen without sending email."
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 3a1. System returns to original screen."
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "+"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC19: Generate possible event location based on people tagged to event"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "_Note: this builds on the existing functionality of Use Case 8._"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User selects the event (using date and event index) that he/she wants to find an event location for."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System generates a meeting location based on the people tagged to it (i.e. it finds a convenient meeting location for all)."
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System displays this location to the user in location display tab using Google Maps Embed API."
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User considers the location and deems it to be acceptable or not."
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System indicates in status message what course of action to take from here."
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* 5a. User accepts the generated location."
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 5a1. User uses the editEventLocation command (as indicated in the status message) to edit event location with the one generated."
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 5a2. Handling of the editing of event location is taken care of by editEventLocation command."
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 5a3. If user does not like the generated location, user does not have to do anything and continues using the application according to what he/she wants to do."
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d UC20: Generate possible meeting timing based on people in a group"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User selects the group that he/she wants to find a common meeting timing for."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System generates a common meeting timing where everyone is free based on the schedule\u0027s of the people in the group."
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System displays this timing in the status message."
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". User considers the timing and deems it to be acceptable or not."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". System also indicates in status message what course of action to take from here."
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* 5a. User accepts the generated timing."
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 5a1. User creates an event for the group based on the timing generated (as indicated in the status message)."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 5a2. Handling of the event creation is done by a separate command (to be developed)."
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** 5a3. If user does not like the generated timing, user does not have to do anything and continues using the application according to what he/she wants to do."
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "////"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os, mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".  The system should be able to work on 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".  The system should respond to the user’s input command within 5 seconds."
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".  The system is not required to handle conflicts between group members’ schedules which are not stored in any online platform (recorded only in a paper diary, etc.)"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  The UI should display the information such that the user can see them clearly i.e. colour, font, layout, pictorial-wise."
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".  The basic usage of the application should be easy for a new user to pick up so as to ensure that the application continues to be used in the long term."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".  Privacy of user groups should be ensured - developers should not be able to view the contacts or groups or events of the user."
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  Each user should be able to have up to 50 \u003c\u003cgroup, groups\u003e\u003e that the user can be in at any one point in time."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".  User activities should be logged in a separate file."
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[contact]] Contact::"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A person in the address book."
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[group]] Group::"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A collection of contacts who come together for ad-hoc, short-term events such as projects."
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[tag]] Tag::"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The item used to organize contacts based on personal or work relationships, or events of a specific type in the address book."
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "For example, for contacts, tags can exist for family, friends, work colleagues, etc."
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "For events, tags can exist for meetings, appointments, etc."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[faculty]] Faculty::"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The faculty of study that the student belongs to."
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The application will launch in full screen."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Resize the window to a size of your preference. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) +"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Showing a person\u0027s faculty"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". Showing a person\u0027s faculty visually while all persons are listed"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Test case: `showLocation 1` +"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "   Expected: First contact\u0027s faculty location is displayed visually. Status message indicates that selected person\u0027s faculty location is being displayed."
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Test case: `showLocation 0` +"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "   Expected: No contact\u0027s location is displayed. Status message indicates that command is incorrect and shows proper usage."
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Other incorrect faculty location display commands: `showLocation`, `showLocation x` (where x is larger than the list size)."
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Generating a possible meeting location"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ". Generating a possible meeting location for an event"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Prerequisites: Event must already exist inside the current list of events stored."
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Test case: `generateLocation d/2018-04-01 i/1` +"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "   Expected: A random meeting location (Kent Ridge MRT, YIH, Coffee Roasters, Humble Origins, i3, The Deck or The Terrace) is generated and displayed."
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "   Status message indicates that meeting location is being generated and what to do if meeting location is acceptable."
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Test case: `generateLocation d/2018-04-01` +"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "   Expected: No possible meeting location is displayed. Status message indicates that command is incorrect and shows proper usage."
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Test case: `generateLocation i/0` +"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "   Expected: No possible meeting location is displayed. Status message indicates that index is not a valid one and shows what are acceptable."
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ".. Other incorrect faculty location display commands: `generateLocation`, `generateLocation i/1`"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Adding an Event"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Adding an event"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Successful test cases"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "... Prerequisites: Events to be added must not be a duplicate event and must not clash with any existing events in EventsPlus+."
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Add the event tag `meeting` using the `addEventTag` command."
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "... Test case: `addEvent n/Meeting d/2018-05-01 st/1400 et/1600 a/NUS SOC` +"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Expected: A new event with the specified details is created and displayed in EventsPlus+."
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Status message indicates that the event has been added into EventsPlus+ successfully."
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "... Test case: `addEvent n/Meeting d/2018-05-01 st/1600 et/1800 a/NUS SOC t/meeting` +"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Expected: A new event with the specified details, tagged as `meeting` is added and displayed in EventsPlus+."
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Status message indicates that the event has been added into EventsPlus+ successfully."
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "... Test case: `addEvent n/Meeting d/2018-05-01 st/1800 et/1900 a/NUS SOC t/meeting i/1` +"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Expected: A new event with the specified details, tagged as `meeting`, with the first contact is added and displayed in EventsPlus+."
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Status message indicates that the event has been added into EventsPlus+ successfully."
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Failing test cases"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "... Prerequisites: `addEvent n/Meeting d/2018-05-01 st/1400 et/1600 a/NUS SOC` has been successfully executed,"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and the event tag `presentation` does not exist in EventsPlus+"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "... Test case: `addEvent n/Meeting d/2018-05-01 st/1430 et/1500 a/NUS SOC t/meeting` +"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "   Expected: Error details indicating an event clash with an existing event in the system."
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "   Event is not added into EventsPlus+."
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "   Status bar remains the same."
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "... Test case: `addEvent n/Meeting d/2018-05-01 st/1600 et/1800 a/NUS SOC t/presentation` +"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "   Expected: Error details showing that the event tag does not exist in the system."
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "   Event is not added into EventsPlus+."
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "   Status bar remains the same."
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Deleting an Event"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Deleting an event"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Prerequisites: List all events using the `list` command. Multiple events in the list for 2018-04-01."
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `deleteEvent d/2018-04-01 i/1` +"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: First event on 2018-04-01 is deleted from the event list."
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Details of the deleted event shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `deleteEvent d/2018-04-01 i/0` +"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: No event is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Other incorrect deleteEvent commands to try: `deleteEvent`, `delete d/invalid_date i/x`"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "(where date input and x do not refer to any events in the system) +"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Listing all events"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Listing all events"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Prerequisites: Multiple events existing in EventsPlus+"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `listEvent` +"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: All events in EventsPlus+ shown. Status bar remains the same."
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Finding all events with specific tags"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Finding all events with specific tags"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Prerequisites: List all events using the `list` command."
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Multiple events in the list tagged with `meeting` and `appointment`."
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "No events tagged with `class`."
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `findEvent meeting` +"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: All events tagged with `meeting` shown. Status bar remains the same."
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `findEvent meeting appointment` +"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: All events tagged with `meeting` and `appointment` shown. Status bar remains the same."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `findEvent class` +"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: No events shown. Status bar remains the same."
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Adding an event tag"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Adding an event tag"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Prerequisites: Event tag `meeting` exists in EventsPlus+ but not `class` and `lecture`."
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `addEventTag t/class t/lecture` +"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Event tags `class` and `lecture` added into the system."
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `addEventTag t/meeting` +"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Error details indicating that event tag already exists is shown in the status message."
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Event tags `class` and `lecture` not added into the system."
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Status bar remains the same."
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Editing an event\u0027s address"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Editing an event\u0027s address"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Prerequisites: Event to be edited (with address `NUS i3`) exists in EventsPlus+."
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `editEventAddress d/2018-04-01 i/1 a/updated address` +"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Specified event\u0027s address is updated to `updated address`."
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Status message indicates that the event\u0027s address has been updated to the new value."
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `editEventAddress d/2018-04-01 i/1 a/NUS` +"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Specified event\u0027s address stays as `NUS i3`."
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Status message indicates that the event\u0027s address has been updated to the new value (which is the same as the old value)."
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `editEventAddress d/2018-04-01 i/1 a/` +"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Error details indicating invalid input for address field."
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Status bar remains the same."
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Viewing an event\u0027s contacts"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ". Viewing an event\u0027s contacts"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Prerequisites: List all events using the `list` command. Multiple events in the list for 2018-04-01."
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "First event for 2018-04-01 has an event contact existing in the current person list. Each of the test"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "cases to be separately executed, without carrying forward the result from the previous test case in the list."
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `seeEventContacts d/2018-04-01 i/1` +"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Event\u0027s contacts of the event shown."
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Status bar remains the same."
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `edit 1 p/12345678` +"
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " `seeEventContacts d/2018-04-01 i/1` +"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Updated event contact (edited person) of the same event shown."
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Timestamp in the status bar is updated when `edit` command was executed."
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: `edit 1 n/Alex Lim` +"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " `seeEventContacts d/2018-04-01 i/1` +"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: No persons shown."
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Timestamp in the status bar is updated when `edit` command was executed."
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: (Note: Do execute the `undo` command after previous test had been executed to undo the effects of the `edit` command) +"
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`seeEventContacts d/2018-04-01 i/1` +"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: No persons shown."
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Timestamp in the status bar is updated when `delete` command was executed."
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Command auto-completion"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".Command auto-completion"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Test case: Type `addE` in the command box. Press the `Tab` key. +"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Expected: Command is auto-completed to `addEvent`."
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".. Non-existent event tags"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If there is at least one event tag that is included in the events, which are not found in the list of event tags"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "in the XML file, the data file will not be successfully loaded into EventsPlus+, and a clean address book is"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "shown upon application startup instead. +"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To resolve the issue, manually add the missing event tags into the XML file."
      }
    ],
    "authorContributionMap": {
      "pratyayj": 251,
      "ryantanwk": 117,
      "kaitingpeck": 746,
      "-": 683,
      "cjiefeng": 24
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "﻿\u003d EventsPlus+ - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "By: `Team W13-2`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "EventsPlus+ is for the busy university student who *prefer to use a desktop app for managing contacts and planning ad-hoc events*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "EventsPlus+ aims to simplify some of the more time-consuming administrative tasks such as coordinating location and date of ad-hoc events"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "using a *Command Line Interface* (CLI)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".  Download the latest `eventsPlus+.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 f/SDE` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Command words are case-sensitive e.g. `addEvent` is a valid command word, but `addevent` is not."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`p/PHONE_NUMBER...` can be used as `p/98765432`, `p/98765432 p/88888888` etc. (i.e. 1 or many times)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Items in curly brackets are considered to be an entity. The rules outside the curly brackets apply to the entity as a whole."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. `{group/GROUP_NAME i/1 INDEX}...` can be used as `group/CS2103_Group1 i/1 group/CS2013_Group2 i/3`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::autoComplete[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Auto-completion of commands: `TAB` key"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To auto-complete any command words, press the `TAB` key. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "For example, if `ad` is typed, `add` will be displayed in the command box upon pressing the `TAB` key. +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Note that only command words will be auto-completed, and the auto-completion will only be successful if there"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "are any valid command words (including command aliases) containing the current input as a prefix. The"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "auto-completed is the nearest word containing the current input as a prefix."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::autoComplete[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`, alias `h`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// tag::toggle[]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Toggling UI tabs : `toggle`, alias `t`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Format: `toggle`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Undo/Redo commands will not undo/redo the toggle command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// end::toggle[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`, alias `a`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER... e/EMAIL a/ADDRESS [t/TAG] f/FACULTY`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* A person can have 1 or many phone numbers"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* A person\u0027s tags will be converted to lowercase regardless of the input (upper or lower case)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* A person can have no faculty using \u0027-\u0027, else faculty names are based on NUS naming conventions (i.e. SOC, FOC, YSTCOM, YLLSOM, FOE, BIZ, SDE, FOD, FOL)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* `add n/John Doe p/98765432 p/88888888 e/johnd@example.com a/John street, block 123, #01-01 f/-`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* `a n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal f/SOC`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[listPersons]]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`, alias `ls`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `list` or `ls`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`, alias `e`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` or `e 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `edit 2 n/Betsy Crower t/` or `e 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`, alias `f`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `find John` or `f John` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `find Betsy Tim John` or `f Betsy Tim John` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`, alias `d`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`delete 2` or `d 2` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`delete 1` or `d 1` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`, alias `s`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the displayed person list. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`select 2` or `s 2` +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`select 1` or `s 1` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`, alias `hs`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `history` or `h`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`, alias `u`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`, alias `r`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`redo` or `r` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`redo` or `r` +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`undo` or `u` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`redo` or `r` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`redo` or `r` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "////"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Add contacts to an existing group : `addToGroup`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Adds a specified list of contacts to a specified group, based on the user\u0027s last-viewed listing. +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Any number of contacts can be added to the group (including 0)."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yap666y"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yap666y"
        },
        "content": "If the INDEX field is empty, no contacts will be added to the group. +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The group must be an existing group in EventsPlus+. +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `addToGroup group/GROUP_NAME [i/INDEX]...`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `addToGroup group/CS2103Group`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "No contacts added to the group."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yap666y"
        },
        "content": "`addToGroup group/CS2103Group i/1` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yap666y"
        },
        "content": "The `addToGroup` command adds the first person returned from `list`."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yap666y"
        },
        "content": "`addToGroup group/CS2103Group i/1 i/2 i/3` +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yap666y"
        },
        "content": "The `addToGroup` command adds the first(Betsy), second(Tim) and Third(John) person returned from `list`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Create group : `createGroup`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Creates a group."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yap666y"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yap666y"
        },
        "content": "If the group already exists, an error message is displayed accordingly to indicate that this command cannot be parsed."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `createGroup group/GROUP_NAME`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `createGroup group/CS2103Group`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "////"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// tag::showFacultyLocation[]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Show Faculty Location : `showLocation`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Shows the location of the person\u0027s (identified by index number) faculty in the the location display panel."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Format: `showLocation INDEX`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* `showLocation 5`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// end::showFacultyLocation[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// tag::suggestedMeetingLocation[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Suggested Meeting Location : `generateLocation`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Creates a randomly suggested location in NUS to meet up for an event"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(uniquely identified by date and event\u0027s index number)."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Format: `generateLocation d/EVENT_DATE i/EVENT_INDEX`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* `generateLocation d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// end::suggestedMeetingLocation[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::addEvent[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Adding an event: `addEvent`, alias `ae`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Adds an event in the system with information specified by the user."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `addEvent n/EVENT_NAME dsc/EVENT_DESCRIPTION d/DATE(YYYY-MM-DD) st/START_TIME(HHMM) et/END_TIME(HHMM) a/EVENT_ADDRESS [i/CONTACT_INDEX]... [t/EVENT_TAG]...`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::addEvent[]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The user can input values for the following fields when adding an event: +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event name +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event description +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event date +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event start time +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event end time +"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event address +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Contact Index / Indices +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event Type(s) +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Note that each of these fields, except for address, contact indices and event type, are mandatory, and has to be supplied by the user"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "before the event can be successfully added into the system."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "In addition, note the following constraints for the input values."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::addEvent2[]"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event names and descriptions should only contain alphanumeric characters"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and should not have any special characters e.g. *, \u0026, etc."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event dates should be in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event times (start or end time) should be in the 24-hour format HHMM"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Start and end times for a given event can be the same. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. `addEvent n/Doctor Appointment dsc/Consultation d/2018-10-14 st/1030 et/1030 a/123, Clementi Rd, 1234665` is a valid command"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Contact indices should be based on the latest displayed person list."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event type has to be one of the existing tags in the EventsPlus+. If an event tag does not exist"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "in EventsPlus+, it has to be added in before creating the event with the new event tag."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* If no event address is supplied by the user, \"TBD\" will be set in place of the address."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Without contacts and event tags +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`addEvent n/Doctor Appointment dsc/Consultation d/2018-10-14 st/1030 et/1200 a/123, Clementi Rd, 1234665` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* With a single contact +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " `list` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`addEvent n/Doctor Appointment dsc/Consultation d/2018-10-14 st/1030 et/1200 a/123, Clementi Rd, 1234665 i/1`"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* With multiple contacts +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`Find Betsy Tim John` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`addEvent n/Meeting  dsc/Project meeting d/2018-10-14 st/1030 et/1200 a/123, Clementi Rd, 1234665 i/1 i/2 i/3`"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* With contact indices and event tags +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`addEventTag t/Meeting t/Appointment` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`addEvent n/Doctor Appointment dsc/Consultation d/2018-10-14 st/1030 et/1200 a/123, Clementi Rd, 1234665 i/1 t/Meeting t/Appointment` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "In EventsPlus+, the events can be found in the Events tab,"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and are displayed according to their date, in decreasing date order."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Within each date, the events are ordered from earliest to latest. +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::addEvent2[]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "After the user executes the command `addEvent n/Doctor Appointment dsc/Consultation d/2018-10-14 st/1030 et/1200 a/123, Clementi Rd, 1234665 i/1 t/Meeting t/Appointment`,"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "a message indicating successful execution of the command will be displayed."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The user will be automatically directed to the Events tab,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "where the newly added event (as highlighted in green below) will be shown in the tab."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event_new-event.PNG[Adding an event, width\u003d\"790\"]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "If no address is supplied, \"TBD\" will be set in place of the address field. For instance, upon execution of the command"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "`addEvent n/Doctor Appointment dsc/Consultation d/2018-10-14 st/1030 et/1200`, the newly added event is as highlighted below."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The address field is set to \"TBD\"."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event-no-address.PNG[Adding an event without an address, width\u003d\"790\"]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[seeEventContacts]]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::seeEventContacts[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Viewing an event\u0027s contacts: `seeEventContacts`, alias `sec`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Shows an event\u0027s contacts in the persons list. The information displayed in aligned with that in the UI"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "when hovering over the event contact."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `seeEventContacts d/DATE(YYYY-MM-DD) i/EVENT_INDEX`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* To view all persons again after this command, use the \u003c\u003clistPersons, list\u003e\u003e command."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event dates should be in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event index is based on the displayed index of each event **within each date** in the displayed list (see example below). +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. In the screenshot below, the event named \"Meeting\" is the 1st event on the date 2018-04-01,"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "hence the command `seeEventContacts d/2018-04-01 i/1` will refer to this event. +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The event named \"Lecture\" is the 2nd event on the date 2018-10-18,"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "hence the command `seeEventContacts d/2018-10-18 i/2` will refer to this event."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* When a person is deleted or no longer exists in the system, he/she will not appear in the displayed persons list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "When hovering over the event contact in the UI, a message indicating this person no longer exists in EventsPlus+ is displayed."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* If a person has been edited but still has the same identity as the original person added as an event contact,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "the updated details (latest information of the edited person) is shown, both in the persons list"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and when hovering over the event contact."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `seeEventContacts d/2018-04-01 i/1` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To view all persons again after this command, use the `list` command."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::seeEventContacts[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::see-event-contacts-1.PNG[Event contact display, width\u003d\"790\"]"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `edit 1 p/12345678` +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " `seeEventContacts d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " The phone number of the person is edited, but is still the same person as the originally-added event contact."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " Hence, the system will show the edited event contact."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " To view all persons again after this command, use the `list` command."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::see-event-contacts-2.PNG[Event contact display after edit, width\u003d\"790\"]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `edit 1 n/Alex Lim` +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " `seeEventContacts d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " The edited is a different person from the originally-added event contact."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " There is no existing person in the system who is the same as the originally-added event contact."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " No persons are shown."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " To view all persons again after this command, use the `list` command."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::see-event-contacts-3.PNG[Event contact display after edit, width\u003d\"790\"]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " `seeEventContacts d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "As `Alex` has been deleted, no persons are shown."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "To view all persons again after this command, use the `list` command."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::see-event-contacts-4.PNG[Event contact display after delete, width\u003d\"790\"]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[[addEventTag]]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::addEventTag[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Adding an event tag: `addEventTag`, alias `aet`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Adds an event tag specified by the user into the system."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `addEventTag t/EVENT_TAG [t/EVENT_TAG...]`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event tags are case-insensitive, and will always be converted into lowercase."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "i.e. `MEETING` and `meeting` are considered the same tag,"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and only `meeting` will be shown in EventsPlus+"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Executing `addEventTag t/MEETING t/meeting` will only result in the first tag being added."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Executing `addEventTag t/MEETING` again will not be successful, as the tag already exists in the system."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event tags should only be alphanumeric (A-Z, a-z, 0-9) and hence should exclude any spaces, special characters or symbols such as \u0027%\u0027, \u0027*\u0027, \u0027~\u0027"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::addEventTag[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `addEventTag t/Lecture t/Dinner` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Adds the event tags into the system, if they do not already exist in the system."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The newly added tags are highlighted in green below."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::add-event-tag_new-event-tag.PNG[Adding an event tag, width\u003d\"790\"]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::deleteEvent[]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Deleting an event: `deleteEvent`, alias `de`"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Adds an event in the system with information specified by the user."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `deleteEvent d/DATE(YYYY-MM-DD) i/EVENT_INDEX`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Each of the fields are mandatory, and has to be supplied by the user"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "before the event can be successfully deleted from the system."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event dates should be in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event index is based on the displayed index of each event **within each date** in the displayed list (see example below). +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. In the screenshot below, the event named \"Meeting\" is the 1st event on the date 2018-04-01,"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "hence the command `deleteEvent d/2018-04-01 i/1` will delete this event. +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The event named \"Lecture\" is the 2nd event on the date 2018-10-18,"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "hence the command `deleteEvent d/2018-10-18 i/2` will delete this event."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::deleteEvent[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `deleteEvent d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "**Before Deletion**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::delete-event-before.PNG[Deleting an event, width\u003d\"790\"]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "**After Deletion**"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::delete-event-after.PNG[Deleting an event, width\u003d\"790\"]"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//tag::editEvent[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Edit event address: `editEventAddress`, alias `eea`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Edits the address of the specified event in the address book."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `editEventAddress d/DATE(YYYY-MM-DD) i/EVENT_INDEX a/EVENT_ADDRESS`"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event dates should be in the format YYYY-MM-DD"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* Event index is based on the displayed index of each event **within each date** in the displayed list (see example below). +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "e.g. In the screenshot below, the event named \"Meeting\" is the 1st event on the date 2018-04-01,"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "hence the command `deleteEvent d/2018-04-01 i/1` will delete this event. +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The event named \"Lecture\" is the 2nd event on the date 2018-10-18,"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "hence the command `deleteEvent d/2018-10-18 i/2` will delete this event."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* the EVENT_ADDRESS field is mandatory"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//end::editEvent[]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `editEventAddress d/2018-04-01 i/1 a/NUS SoC`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "**Before command execution**"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::edit-address-before.PNG[Editing an event address, width\u003d\"790\"]"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "**After command execution**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::edit-address-after.PNG[Editing an event address, width\u003d\"790\"]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::listEvent[]"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d List all events: `listEvent`, alias `lse`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Shows a list of all events in the address book. +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `listEvent`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::listEvent[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// tag::findEvent[]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Find events by event tags: `findEvent`, alias `fe`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Shows a list of all events in the address book which are tagged as the specified tags in the command."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Event tags are case-insensitive, as described in the \u003c\u003caddEventTag, addEventTag\u003e\u003e section. +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "i.e. `MEETING` and `meeting` are regarded as the same tag."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `findEvent EVENT_TAG [EVENT_TAG...]`"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// end::findEvent[]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "**Before `findEvent` Execution**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::find-event-before.PNG[Finding an event, width\u003d\"790\"]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "**After `findEvent` Execution**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `findEvent LECTURE` +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Shows all the events tagged as `lecture`"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::find-event-lecture.PNG[Finding an event, width\u003d\"790\"]"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `findEvent Class lecture` +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Shows all the events tagged as `lecture` or `class`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "image::find-event-lecture-class.PNG[Finding an event, width\u003d\"790\"]"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "// tag::importContacts[]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "\u003d\u003d\u003d Import Contacts: `importContacts`, alias `ic`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "Import contacts from a specified csv file. +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "CSV file has to be exported from google contacts as Google CSV. +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "image::import-contacts-as-google-csv.PNG[Adding an event]"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* Ensure that First Name, Email, Phone Number, Address and Company (Faculty) is filled with valid input"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* Any missing field or invalid input will result in failure in importing contacts"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* Exported csv file should be named as google.csv"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "Format: `importContacts file/ABSOLUTE_FILEPATH`"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* `importContacts file/~/Downloads/google.csv` +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "  Imports all contacts from root/Downloads/google.csv into application address book"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "// end::importContacts[]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "//@@author ryantanwk"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// tag::notification[]"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Notifications: `notification`, alias `n`"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Allow users to enable/disable notifications which appears upon application statrup. Notification is enabled by default."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Format: `notification enable/disable`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `notification disable`"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// end::notification[]"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// tag::favourite[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "\u003d\u003d\u003d Favourite: `favourite`, alias `fv`"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Allow users to favourite a upcoming events based on most recently displayed events list. Favourite is null by default."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Format: `favourite d/DATE i/EVENT_INDEX`"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* `favourite d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "// end::favourite[]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`, alias `cls`"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `clear` or `cls`"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`, alias `q`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `exit` or `q`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Features coming up in V2.0"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d Add group event: `addGroupEvent`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Adds an event in the system with the specified information, for the specified group(s)."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "At least one group has to be included in the user input."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A notification will be sent to the user and contacts in the group 24 hours before the event."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "(refer to \u003c\u003cNotification, notification\u003e\u003e feature)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `addGroupEvent n/EVENT_NAME dsc/DESCRIPTION d/DATE(DD-MM-YY) t/TIME(HHMM) a/ADDRESS group/GROUP_NAME...`"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `addGroupEvent n/Project Meeting dsc/First Meeting d/12-09-18 t/1200 a/123, Clementi Rd, 1234665 group/CS2103_Group`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `addGroupEvent n/Project Meeting dsc/First Meeting d/12-09-18 t/1200 a/123, Clementi Rd, 1234665 group/CS2103_Group group/CS2103_otherGroup`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d\u003d List group events: `listGroupEvent`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Lists all group events in the system."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `listGroupEvent`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* `listGroupEvent`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Rename groups : `renameGroup`"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Renames a specified group, if it exists."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "yap666y"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "yap666y"
        },
        "content": "If the group does not exist, an error message is displayed accordingly to indicate that this command cannot be parsed."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `renameGroup group/ORIGINAL_NAME n/NEW_GROUP_NAME`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `renameGroup group/CS2103Group n/HelloWorld`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Merge groups : `mergeGroup`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Merges a list of groups together. Any number of groups can be merged together. +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "yap666y"
        },
        "content": "When groups are merged, a new group will be created containing all the contacts in the listed groups. +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "yap666y"
        },
        "content": "At least one group must be listed. If only one group is listed, no changes will take place."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "yap666y"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* Events that were created in the individual groups prior to merging will not affected by this command. +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* Future events created from this merged group will be under the merged group."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `mergeGroup n/NEW_GROUP_NAME group/GROUP_NAME...`"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `mergeGroup n/CS2103_MERGED group/CS2103_Group1 group/CS2103_Group2 group/CS2103_Group3` +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "A new group called `CS2103_MERGED` is created containing all contacts from `CS2103_Group1`, `CS2103_Group2` and `CS2103_Group3`."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Split groups : `splitGroup`"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Splits a group through a series of commands."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Firstly, `splitGroup` command will inform the system that the user wishes to split a group. +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "yap666y"
        },
        "content": "The system will then display all contacts in this group and a message to inicate that it is awaiting user input. +"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "yap666y"
        },
        "content": "To create new group, input the new group names and the indexes of the contacts. Each of the newly created groups must contain at least one contact."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "yap666y"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "yap666y"
        },
        "content": "The original group will not be deleted as a result of any of the above commands. However, the split groups will contain an indicator showing that it was created from splitting the original group."
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `splitGroup group/GROUP_NAME {n/NEW_GROUP_NAME i/INDEX...}...`"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `splitGroup group/CS2103_MERGE` +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "yap666y"
        },
        "content": "`n/CS2103_Group1 i/1 i/2 i/3 i/4 i/5`"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d View team members who belong to a group : `viewGroup`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Shows the information of each team members in a particular group"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `viewGroup/GROUP_NAME`"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `viewGroup/CS2103Group`"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d View other contacts in the same group as a specific contact : `commonGroupContacts`"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Shows other contacts who may be in the same group with the contact that the user is currently viewing."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `commonGroupContacts n/CONTACT_NAME`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `commonGroupContacts n/James Bond`"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Remove a contact from a group : `remove`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Removes a specific contact from a group"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `remove n/CONTACT_NAME group/GROUP_NAME`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `remove n/James Bond group/CS2103Group`"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Delete an entire group : `deleteGroup`"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Delete inactive groups or groups who you are not going to work with in the future without affecting contact list."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `deleteGroup group/GROUP_NAME`"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `deleteGroup group/CS2103Group`"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Import user\u0027s timetable : `importCalendar`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Allows the user to import timetable from an external source to load into the app. +"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "yap666y"
        },
        "content": "This allows app to prevent any possible clash with events in groups."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `importCalendar SOURCE`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* `importCalendar Google` +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "App will redirect to the source (For example, Google) to handle majority of the importing process - e.g. logging in, calendar to import, etc.)"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Share multiple contacts with my peers : `share`"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Send selected contacts in EventsPlus+ to one other contact in EventsPlus+."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "At least one contact to be sent must be indicated, and only one recipient can be specified."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Format: `share i/INDEX... t/INDEX`"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "yap666y"
        },
        "content": "`share i/2 i/3 i/4 t/1` +"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Sends the 2nd, 3rd and 4th person to 1st person in the (same) list."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Archive groups : `archive`"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Archive groups to unclutter the list of visible group without losing the group\u0027s information"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `archive group/GROUP_NAME`"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `archive group/CS2103Group`"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "yap666y"
        },
        "content": "\u003d\u003d\u003d Unarchive old groups : `unarchive`"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Unarchive group to retrieve previously-archived group information and make group visible again."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Format: `unarchive group/GROUP_NAME`"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "yap666y"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "yap666y"
        },
        "content": "* `unarchive group/CS2103Group`"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "yap666y"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// tag::pratyayVersionTwo[]"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Generate timing for a group\u0027s event/meeting : `generateTiming`"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Generates a possible meeting timing for a group\u0027s event/meeting based on all member\u0027s schedule and availability."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Format: `generateTiming group/GROUP_NAME`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* `generateTiming group/CS2103Group`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* This command only works with groups and will not work for a user alone (for obvious reasons)."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* If the group does not exist, an error message is displayed accordingly to indicate that this command cannot be parsed."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Generate convenient location for an event/meeting : `generateConvenientLocation`"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "This command builds on the existing generateLocation command, however, instead of generating a random location it will"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "generate a location based on the people attending the event (i.e. members in the group or people tagged to the event)."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Thus this can be used within the context of a group\u0027s"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "events or the user\u0027s own personal events."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Format: `generateConvenientLocation group/GROUP_NAME d/EVENT_DATE i/EVENT_INDEX` (for group events) or +"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        `generateConvenientLocation d/EVENT_DATE i/EVENT_INDEX` (for user\u0027s personal events)"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* `generateConvenientLocation group/CS2103Group d/2018-09-30 i/1`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* `generateConvenientLocation d/2018-09-30 i/1`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* This command works with both group events and user\u0027s own personal events."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "// end::pratyayVersionTwo[]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "[width\u003d\"70%\",cols\u003d\"14%,\u003c25%,\u003c25%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|Command |Format |Example"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Add Person* | `add n/NAME p/PHONE_NUMBER... e/EMAIL a/ADDRESS [t/TAG] f/FACULTY` | `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague f/FOS`"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Clear Address Book* | `clear` |"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Delete Person* | `delete INDEX` | `delete 3`"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Edit Person* | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` | `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Find Persons* | `find KEYWORD [MORE_KEYWORDS]` | `find James Jake`"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *List Persons* | `list` |"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Select Person* | `select INDEX` | `select 2`"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// * *Create Group *: `createGroup group/GROUP_NAME` +"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// e.g. `createGroup group/CS2103Group`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// * *Add Contacts to Group* : `addToGroup group/GROUP_NAME [i/INDEX]...` +"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "// e.g. `addToGroup group/CS2103Group i/1 i/2 i/3`"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "| *Show Faculty location visually* | `showLocation INDEX` | `showLocation 5`"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "| *Suggest Location* | `generateLocation d/EVENT_DATE i/EVENT_INDEX` | `generateLocation d/2018-01-14 i/1`"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Add Event* | `addEvent n/EVENT_NAME dsc/EVENT_DESCRIPTION d/DATE(YYYY-MM-DD) st/START_TIME(HHMM) et/END_TIME(HHMM) [a/EVENT_ADDRESS] [i/CONTACT_INDEX]... [t/EVENT_TAG]...` +"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| `addEvent n/Doctor Appointment dsc/Consultation d/2018-10-14 st/1030 et/1200 a/123, Clementi Rd, 1234665 i/1 t/Meeting t/Appointment`"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *View an Event\u0027s Contacts* | `seeEventContacts d/DATE(YYYY-MM-DD) i/EVENT_INDEX` | `seeEventContacts d/2018-10-18 i/1`"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Delete Event* | `deleteEvent d/DATE(YYYY-MM-DD) i/EVENT_INDEX` | `deleteEvent d/2018-10-18 i/1`"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Edit Event Address* | `editEventAddress d/DATE(YYYY-MM-DD) i/EVENT_INDEX a/EVENT_ADDRESS`"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| `editEventAddress d/2018-04-01 i/1 a/NUS SoC`"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Add Event Tag* | `addEventTag EVENT_TAG [t/EVENT_TAG...]` | `addEventTag t/Lecture t/Dinner`"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *List Events* | `listEvent` |"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Find Events by Event Tag(s)* | `findEvent EVENT_TAG [EVENT_TAG...]` | `findEvent Class lecture`"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Import Contacts* | `importContacts file/FILEPATH` | `importContacts file/~/Downloads/contacts1.csv`"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Disable and Enable Notification* | `notification enable/disable` | `notification disable`"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Favourite Event* | `favourite d/EVENT_DATE i/EVENT_INDEX` | `favourite d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Help* | `help` |"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *History* | `history` |"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Undo* | `undo` |"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "| *Redo* | `redo` |"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "yap666y": 168,
      "pratyayj": 61,
      "ryantanwk": 37,
      "kaitingpeck": 404,
      "-": 196,
      "cjiefeng": 21
    }
  },
  {
    "path": "docs/team/cjiefeng.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "\u003d Chai Jie Feng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "EventsPlus+ is a Command Line Interface (CLI) desktop address book application catered for busy university students to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "manage their contacts, events, project meetings and ad-hoc events efficiently."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "It aims to simplify some of the more time-consuming administrative tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "such as coordinating location and date of ad-hoc events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has more than 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dcjiefeng[RepoSense]]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "* *Major enhancement*: added *import contacts function*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "** What it does: Allows the user to import contacts from external source (link:https://contacts.google.com/[google contacts]) into EventsPlus+."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "** Justification: Users should be able to easily import contacts from external source without having to go through the trouble of adding in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "contacts 1 by 1."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "** Highlights: Users will be notified with the number of successful imported contacts. Failure of importing should be the caused by"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "bad formatting or missing mandatory fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "*** Managed releases `v1.3` on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "*** Updated documentation for the enhancements as above: (Pull requests  https://github.com/CS2103-AY1819S1-W13-2/main/pull/101[#101],"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/185[#185],"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/187[#187])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "*** Updated User Guide with initial planned features (Pull requests https://github.com/CS2103-AY1819S1-W13-2/main/pull/4[#4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "*** Updated author name for reposense (Pull requests https://github.com/CS2103-AY1819S1-W13-2/main/pull/123[#123])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-W13-2/main/pull/5[#5],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/9[#9],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/130[#130],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/172[#172]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103-AY1819S1-W12-4/main/issues/124[1],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W12-4/main/issues/115[2],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W12-4/main/issues/114[3])"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "include::../UserGuide.adoc[tag\u003dimportContacts]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dimportContacts]"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 32,
      "cjiefeng": 30
    }
  },
  {
    "path": "docs/team/kaitingpeck.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d Peck Kai Ting - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "EventsPlus+ is a Command Line Interface (CLI) desktop address book application catered for busy university students to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "manage their contacts, events, project meetings and ad-hoc events efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "It aims to simplify some of the more time-consuming administrative tasks"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "such as coordinating location and date of ad-hoc events."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has more than 10 kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dkaitingpeck[RepoSense]]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Major enhancement*: added the *Events feature*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** What it does: Allows the user to manage events with event tags and reference to existing contacts in EventsPlus+."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Justification: Users should be able to use the application to manage his/her events, and should be able to incorporate"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "contacts in EventsPlus+ into events, since both are features of the application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Highlights: Users are able to view the crucial person information from events by hovering over the contact in the event,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "without searching for the person directly. Event tags are standardized based on a list of event tags displayed, which can"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "be modified by the user. This feature sets the foundation for the inclusion of more event-related functionalities in future."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//~"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other enhancements*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** added *the command auto-completion feature*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** What it does: Allows user to use the `Tab` key to auto-complete command words."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Justification: Saves time on typing commands and reduces effort of remembering full commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "//~"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Set up Travis, Appveyor and auto-publishing of documentation"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Managed releases `v1.2` and `v1.4.1` on GitHub"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Added the add event/delete event/view event contacts/edit event address functionalities and tests (Pull requests https://github.com/CS2103-AY1819S1-W13-2/main/pull/60[#60],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/83[#83],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/88[#88],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/95[#95],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/119[#119],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/120[#120],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/121[#121],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/130[#130],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/138[#138],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/177[#177])"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Added the add event tag/find event/command auto-completion functionalities and tests (Pull requests https://github.com/CS2103-AY1819S1-W13-2/main/pull/138[#138],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/175[#175], https://github.com/CS2103-AY1819S1-W13-2/main/pull/174[#174])"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Re-organized `BrowserPanel` to be grouped under a `TabPanel` (Pull request https://github.com/CS2103-AY1819S1-W13-2/main/pull/88[#88])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Updated documentation for the enhancements as above (Pull requests https://github.com/CS2103-AY1819S1-W13-2/main/pull/38[#38],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/73[#73],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/99[#99],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/102[#102],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/141[#141],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/178[#178])"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Created initial UI Mockup of the product (Pull requests https://github.com/CS2103-AY1819S1-W13-2/main/pull/38[#38])"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Contributed to forum discussions (https://github.com/nus-cs2103-AY1819S1/forum/issues/116[#116])"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (https://github.com/CS2103-AY1819S1-W17-3/main/issues/177[1],"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/179[2],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/181[3],"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/182[4],"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/183[5],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/184[6],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/185[7],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/186[8])"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are some excerpts of the sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddEvent]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddEvent2]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dseeEventContacts]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddEventTag]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeleteEvent]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003deditEvent]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlistEvent]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfindEvent]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are some excerpts of the sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddEventsHeader]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deventDiagram]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddEvents]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "More details can be found in the \u003c\u003c../DeveloperGuide.adoc#AddDeleteEvents, Developer Guide\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003daddEvents2]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dseeEventContacts]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dseeEventContacts2]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "General steps are as follows. Detailed diagrams can be found in the \u003c\u003c../DeveloperGuide.adoc#seeEventContacts, Developer Guide\u003e\u003e. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. User enters command to see an event\u0027s contacts. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `AddressBookParser` calls `SeeEventContactsCommandParser`, which generates a SeeEventContactsCommand` with an `EventDate` and `Index` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `SeeEventContactsCommand` gets the event. +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. A `ExistingPersonInEventPredicate` is created based on the event\u0027s contacts from the event retrieved in Step 3. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 5. `SeeEventContactsCommand` calls `Model#updateFilteredEventList` to filter the displayed list using the `Predicate` object generated in step 4. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditEventAddress]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditEventAddress2]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "General steps are as follows. Detailed diagrams can be found in the \u003c\u003c../DeveloperGuide.adoc#EditEventAddress, Developer Guide\u003e\u003e. +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 1. User enters command to edit an event\u0027s address based on the event date and index (as displayed in the UI) +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 2. `AddressBookParser` calls `EditEventAddressCommandParser`, which generates an `EditEventAddressCommand` with an `EventDate`, `Index`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and the updated `EventAddress`. +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 3. `EditEventAddressCommand` gets the event."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 4. A new event with all details (except `EventAddress`) duplicated from the old event in step 3 is created. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The `EventAddress` attribute of this new event is set to the updated `EventAddress` passed in to `EditEventAddressCommand` in step 2. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "Step 5. The old event is replaced with the new one in the system from the `Model` component, through the execution of `Model#updateEvent`."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditEventAddress3]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deventTags]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deventTags2]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "General steps are as follows. Detailed diagrams can be found in the \u003c\u003c../DeveloperGuide.adoc#EventTags, Developer Guide\u003e\u003e. +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deventTags3]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfilterEvents]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfilterEvents2]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "General steps are as follows. Detailed diagrams can be found in the \u003c\u003c../DeveloperGuide.adoc#filteringEvents, Developer Guide\u003e\u003e. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfilterEvents3]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "The implementation of the \u003c\u003c../DeveloperGuide.adoc#listEvent, listEvent\u003e\u003e feature is similar to the above,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "and more details can be found in \u003c\u003c../DeveloperGuide.adoc#listEvent, Developer Guide\u003e\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 135
    }
  },
  {
    "path": "docs/team/pratyayj.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d Pratyay Jaidev - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "EventsPlus+ is a desktop address book application catered for busy university students to manage their contacts, events, project meetings and ad-hoc events efficiently."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "EventsPlus+ aims to simplify some of the more time-consuming administrative tasks such as coordinating location and date of ad-hoc events"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "using a Command Line Interface (CLI). The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dpratyayj[RepoSense]]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* *Major enhancement*: added *location-related functionality*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** What it does: The two features added provide the following: 1. the ability to visually display the faculty location of a contact on a map and 2. the ability to generate a (random) meeting location"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "for events or meetings and display this location on a map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** Justification: Events cannot take place without a location set in place. Adding location-related functionality with respect to a contact\u0027s faculty and events"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "improves the user experience significantly by providing the user one-stop location functionality without having to exit the application at all."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** Highlights: A Faculty field is added to the Person class which is crucial given that this application is primarily targeted toward university students and thus such a field is necessary."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Selecting which particular Google Maps API to be integrated into the application required careful consideration (the Embed API was eventually chosen for its flexibility with the JavaFX web browser)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "In the long run, the implementation of this foundational functionality allows for further development of other location-related features such as generating"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "directions or generating convenient meeting locations (based on faculty locations) which is one of the features to be done in V2.0."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** Credits: Google Maps Embed API was used for the map display."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** Minor enhancements:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Added a separate Location Display tab to display location-related information instead of using pre-existing Webpage tab:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-W13-2/main/pull/134[#134])"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Application opens maximized at launch:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-W13-2/main/pull/176[#176])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Added simple default landing pages (when application is first launched) for Location Display tab and Webpage tab:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-W13-2/main/pull/134[134])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Wrote and modified tests to increase coverage by 4.4%:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(Pull request https://github.com/CS2103-AY1819S1-W13-2/main/pull/191[191])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Managed releases `v1.3.1` and `v1.4` on GitHub"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Managed issue tracker and helped close issues upon completion: (examples: https://github.com/CS2103-AY1819S1-W13-2/main/issues/50[50],"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " https://github.com/CS2103-AY1819S1-W13-2/main/issues/146[146],"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " https://github.com/CS2103-AY1819S1-W13-2/main/issues/152[152],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " https://github.com/CS2103-AY1819S1-W13-2/main/issues/160[160],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " https://github.com/CS2103-AY1819S1-W13-2/main/issues/170[170], amongst many others)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Added non-functional requirements to Developer Guide:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(Pull request: https://github.com/CS2103-AY1819S1-W13-2/main/pull/69[#69])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Edited and formatted use cases in Developer Guide:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(Pull request: https://github.com/CS2103-AY1819S1-W13-2/main/pull/172[#172], https://github.com/CS2103-AY1819S1-W13-2/main/pull/190[#190])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/CS2103-AY1819S1-W13-2/main/pull/177[#177], https://github.com/CS2103-AY1819S1-W13-2/main/pull/183[#183]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(examples:  https://github.com/CS2103-AY1819S1-T13-1/main/issues/134[134], https://github.com/CS2103-AY1819S1-T13-1/main/issues/142[142],"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " https://github.com/CS2103-AY1819S1-T13-1/main/issues/144[144], https://github.com/CS2103-AY1819S1-T13-1/main/issues/159[159])"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*** Integrated Google Maps API into the project: (Pull request: https://github.com/CS2103-AY1819S1-W13-2/main/pull/134[#134])"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "include::../UserGuide.adoc[tag\u003dshowFacultyLocation]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Suggested Meeting Location : `generateLocation`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Creates a randomly suggested location in NUS to meet up for an event"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "(uniquely identified by date and event\u0027s index number)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Format: `generateLocation d/EVENT_DATE i/EVENT_INDEX`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* `generateLocation d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Features coming up in future *V2.0*:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpratyayVersionTwo]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dshowFacultyLocationDisplay]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dgenerateMeetingLocation]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pratyayj": 65,
      "kaitingpeck": 37
    }
  },
  {
    "path": "docs/team/ryantanwk.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d Ryan Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "EventsPlus+ is a Command Line Interface (CLI) desktop address book application catered for busy university students to"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "manage their contacts, events, project meetings and ad-hoc events efficiently."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "It aims to simplify some of the more time-consuming administrative tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "such as coordinating location and date of ad-hoc events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has more than 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1819s1.github.io/cs2103-dashboard/#\u003dundefined\u0026search\u003dryantanwk[RepoSense]]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "* *Major enhancement*: added the *Notification/Favourite feature*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** What it does: Allows the user to enable/disable a welcome notification upon application startup."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "Moreoever, users can favourite an event so that the welcome message will display details of the event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Justification: Busy users should have a convenient means to remind themselves of an upcoming event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Highlights: If a favourite event is deleted, and notification is enabled,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "the welcome notification will display a default welcome message instead of the events of a deleted event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "//~"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** added *the toggle command*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "*** What it does: CLI command which allows user to switch UI tabs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "*** Justification: Allow proficient users to navigate the UI solely using CLI."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "*** Setup \"About Us\" documentation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "*** Managed releases `v1.3` on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "*** Added the notification / favourite / toggle functionalities and tests. (Pull requests https://github.com/CS2103-AY1819S1-W13-2/main/pull/89[#89],"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/90[#90],"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/103[#103],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/115[#115],"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/128[#128],"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/135[#135],"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/194[#194]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "*** Updated documentation for the enhancements as above: (Pull requests https://github.com/CS2103-AY1819S1-W13-2/main/pull/103[#103],"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/115[#115],"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/128[#128],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/135[#135],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W13-2/main/pull/194[#194],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (https://github.com/CS2103-AY1819S1-W17-3/main/issues/101[1],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W16-1/main/issues/103[2],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/105[3],"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/112[4],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/118[5],"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "  https://github.com/CS2103-AY1819S1-W17-3/main/issues/122[6]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "include::../UserGuide.adoc[tag\u003dnotification]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Favourite: `favourite`, alias `fv`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Allow users to favourite a upcoming events based on most recently displayed events list. Favourite is null by default."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Format: `favourite d/DATE i/EVENT_INDEX`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "* `favourite d/2018-04-01 i/1`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d Toggling UI tabs : `toggle`, alias `t`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Format: `toggle`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "Undo/Redo commands will not undo/redo the toggle command."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnotification]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfavourite]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtoggle]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pratyayj": 19,
      "ryantanwk": 43,
      "kaitingpeck": 35
    }
  },
  {
    "path": "docs/team/yap666y.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: EventsPlus+"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "---"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing EventsPlus+ ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs, model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample address book\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty address book\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty address book\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty address book\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(\"Starting EventsPlus+ \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping EventsPlus+ ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "ryantanwk": 1,
      "kaitingpeck": 7,
      "-": 199
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String appTitle \u003d \"EventsPlus+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowWidth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Double windowHeight;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Point windowCoordinates;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private Boolean notificationIsEnabled;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private String favouriteEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        notificationIsEnabled \u003d true; // default value is true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        favouriteEvent \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public GuiSettings(Double windowWidth, Double windowHeight, int xPosition, int yPosition,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                       boolean notificationIsEnabled, String favouriteEvent) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        this.notificationIsEnabled \u003d notificationIsEnabled;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        this.favouriteEvent \u003d favouriteEvent;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public Boolean getNotificationIsEnabled() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return notificationIsEnabled;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String getFavouriteEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return favouriteEvent;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(windowWidth, o.windowWidth)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowHeight, o.windowHeight)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.x, o.windowCoordinates.x)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates.y, o.windowCoordinates.y)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                \u0026\u0026 Objects.equals(notificationIsEnabled, o.notificationIsEnabled)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                \u0026\u0026 Objects.equals(favouriteEvent, o.favouriteEvent);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates, notificationIsEnabled, favouriteEvent);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates + \"\\n\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        sb.append(\"Notification : \" + notificationIsEnabled + \"\\n\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        sb.append(\"Favourite : \" + favouriteEvent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 6,
      "ryantanwk": 17,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_INDEX \u003d \"The event index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_INVALID_EVENT_DISPLAYED_DATE \u003d \"The event date provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_EVENTS_LISTED_OVERVIEW \u003d \"%1$d events listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_TAG \u003d \"Event tag %1$s does not exist in the address book\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String MESSAGE_FILE_READER_INVALID_FORMAT \u003d \"Wrong file format or wrong header format! \\n%1$s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 4,
      "-": 12,
      "cjiefeng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String getIndexString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return Integer.toString(zeroBasedIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 3,
      "ryantanwk": 1,
      "kaitingpeck": 5,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return \"number of persons \" + data.getPersonList().size()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + \"\\n number of events \" + data.getEventList().size()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + \"\\n number of event tags \" + data.getEventTagList().size();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookEventChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/** Indicates the list of events in the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddressBookEventChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final ObservableList\u003cEvent\u003e data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddressBookEventChangedEvent(ObservableList\u003cEvent\u003e data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return \"number of events \" + data.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookEventTagChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/** Indicates the list of event tags in the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddressBookEventTagChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final ObservableList\u003cTag\u003e data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddressBookEventTagChangedEvent(ObservableList\u003cTag\u003e data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return \"number of event tags \" + data.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/EventPanelDisplayChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an attempt to make a display change in the Event List Panel under Tab Panel, even if there is no"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * visible difference in the displayed event information in the Event List Panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventPanelDisplayChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventPanelDisplayChangedEvent() {}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/FacultyLocationDisplayChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Represents a change in the Faculty location of a Person being displayed in the Location Display panel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class FacultyLocationDisplayChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final Person selectedPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public FacultyLocationDisplayChangedEvent(Person newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        this.selectedPerson \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public Person getSelectedPerson() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return selectedPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/RandomMeetingLocationGeneratedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Represents a request for a random meeting location to be generated."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class RandomMeetingLocationGeneratedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final String meetingPlaceId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public RandomMeetingLocationGeneratedEvent(String placeId) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        this.meetingPlaceId \u003d placeId;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String getMeetingPlaceId() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return meetingPlaceId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TabPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Represents a selection change in the Tab Panel using the toggle command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class TabPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public TabPanelSelectionChangedEvent() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/EmbedGoogleMaps.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import java.util.concurrent.ThreadLocalRandom;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Stores the logic related to the Embedded Google Maps API."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class EmbedGoogleMaps {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * The following variables are the Google Maps Place IDs of locations used in the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String socPlaceId \u003d \"ChIJW-fkx_ga2jERSjkkKeJjaUM\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String fosPlaceId \u003d \"ChIJSfKZ6VYa2jERnuNsDKZ8moU\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String yllsomPlaceId \u003d \"ChIJx_aDLFEa2jERvhbP1ACc2t8\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String fodPlaceId \u003d \"ChIJcUayaFEa2jERVJ-bhaQxjmk\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String bizPlaceId \u003d \"ChIJk315cv8a2jERyoLIHsKS40Y\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String sdePlaceId \u003d \"ChIJrY4IlPka2jERhqeUbnzFVKY\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String foePlaceId \u003d \"ChIJQ91DPvca2jERARhJO1i77Cg\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String folPlaceId \u003d \"ChIJfyddcgMa2jER6C0WKzLdP6w\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String ystcomPlaceId \u003d \"ChIJSejKW_Ya2jER9bHfrr9sA-c\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String fassPlaceId \u003d \"ChIJadpVLvka2jERHq8cT_xdGVQ\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String yihPlaceId \u003d \"ChIJcWXf-_ca2jERnQ81RhxHf5o\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String krPlaceId \u003d \"ChIJOdueMVIa2jERhE4TnhWtNpo\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String icubePlaceId \u003d \"ChIJtX3gi1Ua2jERefFjXXzP-xk\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String terracePlaceId \u003d \"ChIJAQAAsPga2jERULZADcNLT7w\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String deckPlaceId \u003d \"ChIJVVVVJfka2jERZRl7AeJV__s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String humbleoriginsPlaceId \u003d \"ChIJA0UG2fka2jERCO0F5YbGzaE\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String coffeeroastersPlaceId \u003d \"ChIJJ1vrQxMZ2jERIWEJYEK-dnM\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * This method returns the faculty location\u0027s Google Place ID."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param faculty The faculty that the person is from."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @return Google\u0027s PlaceId of the faculty location."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static String getPlaceId(String faculty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String placeId \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (faculty.equals(\"SOC\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d socPlaceId;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"FOS\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d fosPlaceId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"YLLSOM\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d yllsomPlaceId;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"FOD\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d fodPlaceId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"BIZ\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d bizPlaceId;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"SDE\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d sdePlaceId;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"FOE\")) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d foePlaceId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"FOL\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d folPlaceId;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"YSTCOM\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d ystcomPlaceId;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (faculty.equals(\"FASS\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d fassPlaceId;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return placeId;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * This method randomly generates a meeting location and returns its Google Maps Place ID."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @return The place ID string of the meeting location."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static String getMeetingPlaceId() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        int randomNum \u003d ThreadLocalRandom.current().nextInt(1, 8);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String placeId \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (randomNum \u003d\u003d 1) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d yihPlaceId;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (randomNum \u003d\u003d 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d krPlaceId;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (randomNum \u003d\u003d 3) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d icubePlaceId;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (randomNum \u003d\u003d 4) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d terracePlaceId;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (randomNum \u003d\u003d 5) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d deckPlaceId;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (randomNum \u003d\u003d 6) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d humbleoriginsPlaceId;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else if (randomNum \u003d\u003d 7) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            placeId \u003d coffeeroastersPlaceId;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return placeId;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view the unfiltered list of persons */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cPerson\u003e getUnfilteredPersonList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of events by date */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the list of event tags */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cTag\u003e getEventTagList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 16,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return model.getUnfilteredPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return model.getFilteredEventList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return model.getFilteredEventListByDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cTag\u003e getEventTagList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return model.getEventTagList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 23,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Adds a person to \" + \"the address book. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + PREFIX_FACULTY + \"FACULTY \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + PREFIX_TAG + \"owesMoney \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + PREFIX_FACULTY + \"SOC \\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"Note that valid faculties are stated in the following format: \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"SOC, FOS, YLLSOM, FOD, BIZ, SDE, FOE, FOL, YSTCOM, FASS.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 7,
      "kaitingpeck": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Adds an event to the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addEvent\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"ae\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. Input date and \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"time values with respect to a single day only. For events occurring over two days, add them into the \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"address book separately.\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_NAME + \"EVENT NAME \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_EVENT_DESCRIPTION + \"EVENT DESCRIPTION \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_START_TIME + \"START TIME \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_END_TIME + \"END TIME \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"[\" + PREFIX_INDEX + \"CONTACT INDEX]...\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"EVENT TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_NAME + \"Doctor appointment \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_EVENT_DESCRIPTION + \"consultation \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"2018-09-18 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_START_TIME + \"1030 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_END_TIME + \"1230 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_ADDRESS + \"123, Clementi Rd, 1234665 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_TAG + \"Appointment\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"This event already exists in the address book\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_CLASHING_EVENT \u003d \"This event clashes with another event in the address book\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_TAG \u003d \"Event tag %1$s does not exist in the address book\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Event toAdd;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Set\u003cIndex\u003e contactIndicesToAdd;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Creates an AddEventCommand to add the specified Event {@code Event}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The {@code event} should not be a null object, and {@code indices} should not be null or contain any nulls."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddEventCommand(Event event, Set\u003cIndex\u003e indices) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(indices);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        toAdd \u003d event;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactIndicesToAdd \u003d indices;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory commandHistory) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkForDuplicateEvent(model);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkForClashingEvent(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkForTagValidity(model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setEventContacts(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.addEvent(toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Checks if there is a duplicate event with {@code toAdd} in the address book"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if there is a duplicate event already existing in the address book"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void checkForDuplicateEvent(Model model) throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (model.hasEvent(toAdd)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Checks if there is a clashing event with {@code toAdd} in the address book"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if there is a clashing event already existing in the address book"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void checkForClashingEvent(Model model) throws CommandException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (model.hasClashingEvent(toAdd)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(MESSAGE_CLASHING_EVENT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Checks if all the event tags in {@code toAdd} is valid i.e. it exists in the list of event tags in the address"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * book based on {@code model}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if one or more of the tags are not valid."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void checkForTagValidity(Model model) throws CommandException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check if tags are existing in the address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e nonExistingTags \u003d toAdd.getEventTags().stream()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .filter(tag -\u003e !model.hasEventTag(tag))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!nonExistingTags.isEmpty()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NONEXISTENT_TAG, nonExistingTags));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the event contacts for {@code toAdd} based on retrieved contacts from the address book, using"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code contactIndicesToAdd}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if one or more of the indices in {@code contactIndicesToAdd} cannot be matched to"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * a corresponding contact in the displayed person list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void setEventContacts(Model model) throws CommandException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // set the list of Person objects as the eventContacts of the event to be added"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cPerson\u003e lastShownPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (contactIndicesToAdd.stream()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .anyMatch(targetIndex -\u003e targetIndex.getZeroBased() \u003e\u003d lastShownPersonList.size())) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e contactsToAdd \u003d IntStream.range(0, lastShownPersonList.size())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .filter(index -\u003e contactIndicesToAdd.contains(Index.fromZeroBased(index)))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .mapToObj(lastShownPersonList::get)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        toAdd.setEventContacts(contactsToAdd);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd)); // state check"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 156
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventTagCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Adds an event tag to the address book, if it does not already exist in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventTagCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addEventTag\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"aet\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event tag to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_TAG + \"EVENT TAG \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"EVENT TAG]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_TAG + \"Meeting\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New event tags added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"The event tag(s) %1$s already exists in the address book\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Set\u003cTag\u003e toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddEventTagCommand(Set\u003cTag\u003e eventTags) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(eventTags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        toAdd \u003d eventTags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e duplicateTags \u003d toAdd.stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .filter(model::hasEventTag)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!duplicateTags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_DUPLICATE_TAG, duplicateTags));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Tag eventTag : toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            model.addEventTag(eventTag);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof AddEventTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddEventTagCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"cls\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 2,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Deletes an event identified using its displayed date and index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteEvent\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"de\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Deletes the event identified by the date and index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"2018-09-18 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted Event: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDate targetDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public DeleteEventCommand(EventDate targetDate, Index targetIndex) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e lastShownList \u003d model.getFilteredEventListByDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e targetDateList \u003d getTargetDateList(lastShownList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToDelete \u003d getEventFromDateList(targetDateList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // reset favourite to null if deleted event is the favourite"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (model.isFavourite(eventToDelete)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            model.updateFavourite((String) null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the {@code Event} object from {@code eventList}, based on"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code targetIndex}, if it exists"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if such an event based on {@code targetIndex} does not exist in"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code eventList}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Event getEventFromDateList(List\u003cEvent\u003e eventList) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d eventList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the event list for the required date based on {@code targetDate}, if such a list exists for"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * the given {@code targetDate}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if no such list exists for {@code targetDate}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private List\u003cEvent\u003e getTargetDateList(List\u003cList\u003cEvent\u003e\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check if date exists in events in lastShownList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (lastShownList.isEmpty() || lastShownList.stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .noneMatch(list -\u003e list.get(0).getEventDate().equals(targetDate))) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e targetDateList \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                lastShownList.stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .filter(list -\u003e list.get(0).getEventDate().equals(targetDate))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // lastShownList should only have one list matching a given specific EventDate"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert(targetDateList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return targetDateList.get(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 targetDate.equals(((DeleteEventCommand) other).targetDate)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteEventCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 6,
      "kaitingpeck": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Faculty updatedFaculty \u003d editPersonDescriptor.getFaculty().orElse(personToEdit.getFaculty());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedFaculty);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        private Faculty faculty;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            setFaculty(toCopy.faculty);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        public void setFaculty(Faculty faculty) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        public Optional\u003cFaculty\u003e getFaculty() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            return Optional.ofNullable(faculty);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                    \u0026\u0026 getFaculty().equals(e.getFaculty());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 15,
      "kaitingpeck": 3,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditEventAddressCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Edits the address of an existing event in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EditEventAddressCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editEventAddress\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"eea\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Edits the address of the event identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"by the date and corresponding index number used in the displayed event list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"2018-09-18 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_INDEX + \"1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_ADDRESS + \"NUS\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_ADDRESS_SUCCESS \u003d \"Edited %1$s with new address: %2$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDate targetDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventAddress newAddress;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param targetDate of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param targetIndex of the event in the filtered event list to edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param newAddress to update the event\u0027s address with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EditEventAddressCommand(EventDate targetDate, Index targetIndex, EventAddress newAddress) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(targetDate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(newAddress);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.newAddress \u003d newAddress;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e lastShownList \u003d model.getFilteredEventListByDate();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e targetDateList \u003d getTargetDateList(lastShownList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToEdit \u003d getEventFromDateList(targetDateList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedEvent \u003d createEditedEvent(eventToEdit, newAddress);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        /* It is ok for editedEvent to be the same event as eventToEdit, but"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        * editedEvent should not be an existing event in the address book,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        * unless it is the same event as eventToEdit. Date and time is not edited"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        * in this command, so there should not be any existing event with same date/time"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        * in the address book, else there is a clashing event."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        * Also, as clashing events are not allowed, by Event#isSameEvent, we will also never have the case"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        * whereby editedEvent is the same event as both eventToEdit AND another event in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert (!(!eventToEdit.isSameEvent(editedEvent) \u0026\u0026 model.hasEvent(editedEvent)));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EVENT_ADDRESS_SUCCESS, eventToEdit.getEventName(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                editedEvent.getEventAddress()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the {@code Event} object from {@code eventList}, based on"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code targetIndex}, if it exists"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if such an event based on {@code targetIndex} does not exist in"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code eventList}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Event getEventFromDateList(List\u003cEvent\u003e eventList) throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d eventList.size()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the event list for the required date based on {@code targetDate}, if such a list exists for"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * the given {@code targetDate}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if no such list exists for {@code targetDate}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public List\u003cEvent\u003e getTargetDateList(List\u003cList\u003cEvent\u003e\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check if date exists in events in lastShownList"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (lastShownList.isEmpty() || lastShownList.stream()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .noneMatch(list -\u003e list.get(0).getEventDate().equals(targetDate))) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e targetDateList \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                lastShownList.stream()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .filter(list -\u003e list.get(0).getEventDate().equals(targetDate))"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // lastShownList should only have one list matching a given specific EventDate"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert(targetDateList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return targetDateList.get(0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Creates and returns an {@code Event} with the details of {@code eventToEdit}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * edited with {@code updatedAddress}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static Event createEditedEvent(Event eventToEdit, EventAddress updatedAddress) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert eventToEdit !\u003d null;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert updatedAddress !\u003d null;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventName eventName \u003d eventToEdit.getEventName();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDescription eventDescription \u003d eventToEdit.getEventDescription();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate eventDate \u003d eventToEdit.getEventDate();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime eventStartTime \u003d eventToEdit.getEventStartTime();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime eventEndTime \u003d eventToEdit.getEventEndTime();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e eventContacts \u003d eventToEdit.getEventContacts();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e eventTags \u003d eventToEdit.getEventTags();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new Event(eventName, eventDescription, eventDate, eventStartTime, eventEndTime, updatedAddress,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                eventContacts, eventTags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof EditEventAddressCommand)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand e \u003d (EditEventAddressCommand) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return targetDate.equals(e.targetDate)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 newAddress.equals(e.newAddress);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"q\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FavouriteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Favourite an event for it to show up as a notification on startup"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * To do : documentation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class FavouriteCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"favourite\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"fv\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \": Favourites the event identified by the date and index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + PREFIX_DATE + \"2018-09-18 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String MESSAGE_FAVOURITE_EVENT_SUCCESS \u003d \"Favorite Event: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private final EventDate targetDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public FavouriteCommand(EventDate targetDate, Index targetIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e lastShownList \u003d model.getFilteredEventListByDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // check if date exists in events in lastShownList"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (lastShownList.isEmpty() || lastShownList.stream()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                .noneMatch(list -\u003e list.get(0).getEventDate().equals(targetDate))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e targetDateList \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                lastShownList.stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                        .filter(list -\u003e list.get(0).getEventDate().equals(targetDate))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // lastShownList should only have one list matching a given specific EventDate"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assert(targetDateList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cEvent\u003e listToFavouriteFrom \u003d targetDateList.get(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d listToFavouriteFrom.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Event favouriteEvent \u003d listToFavouriteFrom.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.updateFavourite(favouriteEvent);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FAVOURITE_EVENT_SUCCESS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + favouriteEvent.getEventName() + \" on \" + favouriteEvent.getEventDate()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                || (other instanceof FavouriteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                \u0026\u0026 targetDate.equals(((FavouriteCommand) other).targetDate)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((FavouriteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 89,
      "kaitingpeck": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTagMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Finds and lists all events in address book whose event tag matches any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class FindEventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findEvent\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"fe\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Finds all events whose event tags matches \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"the specified event tags (case-insensitive) and displays them as in the Event tab\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" meeting appointment\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventTagMatchesKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public FindEventCommand(EventTagMatchesKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(Messages.MESSAGE_EVENTS_LISTED_OVERVIEW, model.getFilteredEventList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof FindEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindEventCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GenerateLocationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.RandomMeetingLocationGeneratedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.EmbedGoogleMaps;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " *  Generates a location for a particular meeting."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class GenerateLocationCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generateLocation\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"gl\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \": Generates a location for a specific meeting. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + PREFIX_DATE + \"EVENT_DATE \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + PREFIX_INDEX + \"EVENT_INDEX \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + PREFIX_DATE + \"2018-04-01 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String MESSAGE_EVENT_DOES_NOT_EXIST \u003d \"This event does not exist!\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Meeting location generated for \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final EventDate meetingLocationEventDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final Index meetingLocationEventIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private EventName meetingLocationEventName \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public GenerateLocationCommand(EventDate eventDate, Index eventIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        requireNonNull(eventIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        meetingLocationEventDate \u003d eventDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        meetingLocationEventIndex \u003d eventIndex;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e listOfEventListByDate \u003d model.getFilteredEventListByDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        boolean isEventFound \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        isEventFound \u003d doesEventExist(listOfEventListByDate, isEventFound);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (!isEventFound) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            logger.info(\"Event was not found. GenerateLocationCommand will not be created.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            throw new CommandException(MESSAGE_EVENT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        logger.info(\"Event has been found. GenerateLocationCommand to be created.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String meetingPlaceId \u003d EmbedGoogleMaps.getMeetingPlaceId();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        EventsCenter.getInstance().post(new RandomMeetingLocationGeneratedEvent(meetingPlaceId));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return new CommandResult(createFinalSuccessMessage(meetingLocationEventName.toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * This method tests if the event for which the location is going to be generated is found in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param listToCheck The list of list of events (by date) to be checked."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param isEventFound Boolean value that represents if the event has been found."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @return Boolean value that indicates if the event has been found in the list of list of events."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private boolean doesEventExist(List\u003cList\u003cEvent\u003e\u003e listToCheck, boolean isEventFound) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (listToCheck.isEmpty() || listToCheck.stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                .noneMatch(list -\u003e list.get(0).getEventDate().equals(meetingLocationEventDate))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            return isEventFound;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        List\u003cEvent\u003e specificDateEventList \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                listToCheck.stream()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                        .filter(list -\u003e list.get(0).getEventDate().equals(meetingLocationEventDate))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                        .get(0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (meetingLocationEventIndex.getZeroBased() \u003e\u003d specificDateEventList.size()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            return isEventFound;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        meetingLocationEventName \u003d specificDateEventList.get(meetingLocationEventIndex.getZeroBased()).getEventName();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        isEventFound \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return isEventFound;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                || (other instanceof GenerateLocationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 meetingLocationEventDate.equals(((GenerateLocationCommand) other).meetingLocationEventDate)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 meetingLocationEventIndex.equals(((GenerateLocationCommand) other).meetingLocationEventIndex));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * This method creates the final message on successful completion of the command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param eventName The name of the event whose location is to be displayed"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String createFinalSuccessMessage(String eventName) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return MESSAGE_SUCCESS + eventName"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + \"! Use editEventLocation command to change the location of your event if you are happy with this :)\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"hs\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportContactsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * Import contacts to the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class ImportContactsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"importContacts\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"ic\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports all contacts from a contact list to \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + PREFIX_FILE + \"FILEPATH\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + PREFIX_FILE + \"~/Downloads/contacts1.csv \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String MESSAGE_WRONG_FILE_FORMAT \u003d \"Ensure file is exported directly from Google Contacts \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"as google csv and have all 5 mandatory fields filled with valid values.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"Please refer to import contacts user guide. \\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"File must contain:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"\u0027\" + FileReader.CSV_HEADER_NAME + \"\u0027 as header for contact name,\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"\u0027\" + FileReader.CSV_HEADER_PHONE + \"\u0027 as header for contact number,\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"\u0027\" + FileReader.CSV_HEADER_ADDRESS + \"\u0027 as header for contact address,\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"\u0027\" + FileReader.CSV_HEADER_EMAIL + \"\u0027 as header for contact email and\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            + \"\u0027\" + FileReader.CSV_HEADER_FACULTY + \"\u0027 as header for contact faculty.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%s contacts successfully imported!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private final FileReader toImport;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Creates an ImportContactsCommand to add the specified {@code String}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public ImportContactsCommand(FileReader fileReader) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        requireNonNull(fileReader);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        toImport \u003d fileReader;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        model.importContacts(toImport);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toImport.getAddContactStatus()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                || (other instanceof ImportContactsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                \u0026\u0026 toImport.equals(((ImportContactsCommand) other).toImport));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjiefeng": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"ls\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Lists all events in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class ListEventCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listEvent\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"lse\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all events\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotificationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Enable / disable notifications"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * To do : command exception"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class NotificationCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notification\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \": Enable / Disable notification in \" + \"the address book. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \"Parameters: enable/disable\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" enable\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String MESSAGE_NOTIFICATION_ENABLED_SUCCESS \u003d \"Notification: Enabled\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String MESSAGE_NOTIFICATION_DISABLED_SUCCESS \u003d \"Notification: Disabled\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private final boolean set;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public NotificationCommand(boolean set) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.set \u003d set;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.updateNotificationPref(set);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (set) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NOTIFICATION_ENABLED_SUCCESS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NOTIFICATION_DISABLED_SUCCESS));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                || ((other instanceof NotificationCommand)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                \u0026\u0026 (this.set \u003d\u003d ((NotificationCommand) other).set));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 45,
      "kaitingpeck": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SeeEventContactsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.ExistingPersonInEventPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Finds and lists all persons in address book who are event contacts of a specified event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class SeeEventContactsCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"seeEventContacts\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"sec\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \": Shows the event contacts of the \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"event identified by the date and index number used in the displayed event list.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_INDEX + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_DATE + \"2018-04-01 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + PREFIX_INDEX + \"1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_CONTACTS_LISTED_OVERVIEW \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Displaying valid event contacts of event: %1$s. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    + \"Only contacts which are currently existing in EventsPlus+ are displayed.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDate targetDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public SeeEventContactsCommand(EventDate targetDate, Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.targetDate \u003d targetDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e lastShownList \u003d model.getFilteredEventListByDate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e targetDateList \u003d getTargetDateList(lastShownList);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d getEventFromDateList(targetDateList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate predicate \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new ExistingPersonInEventPredicate(event.getEventContacts());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CONTACTS_LISTED_OVERVIEW, event.getEventName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the {@code Event} object from {@code eventList}, based on"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code targetIndex}, if it exists"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if such an event based on {@code targetIndex} does not exist in"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code eventList}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Event getEventFromDateList(List\u003cEvent\u003e eventList) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d eventList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the event list for the required date based on {@code targetDate}, if such a list exists for"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * the given {@code targetDate}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws CommandException if no such list exists for {@code targetDate}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private List\u003cEvent\u003e getTargetDateList(List\u003cList\u003cEvent\u003e\u003e lastShownList) throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check if date exists in events in lastShownList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (lastShownList.isEmpty() || lastShownList.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .noneMatch(list -\u003e list.get(0).getEventDate().equals(targetDate))) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e targetDateList \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                lastShownList.stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .filter(list -\u003e list.get(0).getEventDate().equals(targetDate))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // lastShownList should only have one list matching a given specific EventDate"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert(targetDateList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return targetDateList.get(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof SeeEventContactsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 targetDate.equals(((SeeEventContactsCommand) other).targetDate)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SeeEventContactsCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 2,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ShowLocationCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.FacultyLocationDisplayChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Shows the location of a selected person in the embedded Google Maps."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class ShowLocationCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"showLocation\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"sl\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \": Shows the location of person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s. Faculty location successfully \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"displayed.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public ShowLocationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        List\u003cPerson\u003e filteredPersonList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredPersonList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            logger.info(\"Selected person does not exist (out of list\u0027s size).\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                    + \" ShowLocationCommand will not be created.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        logger.info(\"Selected person exists. ShowLocationCommand to be created.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Person selectedPerson \u003d filteredPersonList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        EventsCenter.getInstance().post(new FacultyLocationDisplayChangedEvent(selectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                || (other instanceof ShowLocationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((ShowLocationCommand) other).targetIndex));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ToggleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.events.ui.TabPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Toggles between the various GUI tabs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class ToggleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"toggle\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"t\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"(alias: \" + COMMAND_WORD_ALIAS + \")\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \": Toggles to the adjacent GUI tab.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \"Parameters: None\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String MESSAGE_TOGGLE_SUCCESS \u003d \"Toggled\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public ToggleCommand () {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        new TabPanelSelectionChangedEvent();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.indicateTabPanelSelectionChangedEvent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TOGGLE_SUCCESS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String COMMAND_WORD_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        //model.updateNotificationPref(ModelManager.getNotificationPref());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        //model.updateFavouriteEvent(AddressBook.getFavouriteEvent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 2,
      "kaitingpeck": 3,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                        PREFIX_FACULTY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_FACULTY)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Faculty faculty \u003d ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList, faculty);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 7,
      "kaitingpeck": 1,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_INVALID_START_END_TIME \u003d \"Invalid start and end time! %1$s %2$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_ADDRESS, PREFIX_INDEX, PREFIX_TAG);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check for mandatory fields, and that no other data is entered between the command and first argument prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_EVENT_DESCRIPTION, PREFIX_DATE, PREFIX_START_TIME,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                PREFIX_END_TIME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDescription eventDesc \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ParserUtil.parseEventDescription(argMultimap.getValue(PREFIX_EVENT_DESCRIPTION).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime eventStartTime \u003d ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime eventEndTime \u003d ParserUtil.parseEventTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventAddress eventAddress \u003d ParserUtil.parseEventAddress(argMultimap.getValue(PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .orElse(\"TBD\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e contactIndexList \u003d ParserUtil.parseIndices(argMultimap.getAllValues(PREFIX_INDEX));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e eventTagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventEndTime.compareTo(eventStartTime) \u003c 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_START_END_TIME, eventStartTime.toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    eventEndTime.toString()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event newEvent \u003d new Event(eventName, eventDesc, eventDate, eventStartTime, eventEndTime,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                eventAddress, eventTagList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new AddEventCommand(newEvent, contactIndexList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventTagCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventTagCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Parses input arguments and creates a new AddEventTagCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventTagCommandParser implements Parser\u003cAddEventTagCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and returns an AddEventTagCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddEventTagCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    AddEventTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e eventTagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new AddEventTagCommand(eventTagList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventTagCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.EditEventAddressCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.commands.GenerateLocationCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.commands.ImportContactsCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.NotificationCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.SeeEventContactsCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.commands.ShowLocationCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.ToggleCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case AddCommand.COMMAND_WORD_ALIAS: // test case for command alias"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case EditCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case SelectCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        case ShowLocationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        case ShowLocationCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            return new ShowLocationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case DeleteCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case ClearCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case FindCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case FindEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case FindEventCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new FindEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case ListCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case AddEventCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case SeeEventContactsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case SeeEventContactsCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new SeeEventContactsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case EditEventAddressCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case EditEventAddressCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new EditEventAddressCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case AddEventTagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case AddEventTagCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new AddEventTagCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case HistoryCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case ExitCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case HelpCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case UndoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case RedoCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        case ImportContactsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        case ImportContactsCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            return new ImportContactsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        case NotificationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        case NotificationCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return new NotificationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        case FavouriteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        case FavouriteCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return new FavouriteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case ListEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case ListEventCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new ListEventCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        case GenerateLocationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        case GenerateLocationCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            return new GenerateLocationCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        case ToggleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        case ToggleCommand.COMMAND_WORD_ALIAS:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return new ToggleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 11,
      "ryantanwk": 14,
      "kaitingpeck": 47,
      "-": 92,
      "cjiefeng": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"file/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_EVENT_DESCRIPTION \u003d new Prefix(\"dsc/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final Prefix PREFIX_NOTIFICATION \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "ryantanwk": 1,
      "kaitingpeck": 5,
      "-": 14,
      "cjiefeng": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and returns an DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check for mandatory fields, and that no other data is entered between the command and first argument prefix"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_INDEX)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index eventIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new DeleteEventCommand(eventDate, eventIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                        PREFIX_FACULTY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (argMultimap.getValue(PREFIX_FACULTY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            editPersonDescriptor.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 6,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditEventAddressCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.EditEventAddressCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Parses input arguments and creates a new EditEventAddressCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EditEventAddressCommandParser implements Parser\u003cEditEventAddressCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventAddressCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and returns an EditEventAddressCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EditEventAddressCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_INDEX, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check for mandatory fields, and that no other data is entered between the command and first argument prefix"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_INDEX, PREFIX_ADDRESS)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EditEventAddressCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index eventIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventAddress eventAddress \u003d ParserUtil.parseEventAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new EditEventAddressCommand(eventDate, eventIndex, eventAddress);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FavouriteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Parses input arguments and creates a new FavouriteCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class FavouriteCommandParser implements Parser\u003cFavouriteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FavouriteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * and returns an FavouriteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public FavouriteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // check for mandatory fields, and that no other data is entered between the command and first argument prefix"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_INDEX)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Index eventIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return new FavouriteCommand(eventDate, eventIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 38,
      "kaitingpeck": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTagMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Parses input arguments and creates a new FindEventCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class FindEventCommandParser implements Parser\u003cFindEventCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindEventCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and returns an FindEventCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public FindEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new FindEventCommand(new EventTagMatchesKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GenerateLocationCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.commands.GenerateLocationCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Parses input arguments and creates a new GenerateLocationCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class GenerateLocationCommandParser implements Parser\u003cGenerateLocationCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GenerateLocationCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * and returns an GenerateLocationCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public GenerateLocationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_INDEX)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                    GenerateLocationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Index eventIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return new GenerateLocationCommand(eventDate, eventIndex);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 36,
      "kaitingpeck": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportContactsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_READER_INVALID_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.commands.ImportContactsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FilePath;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * Parses input arguments and creates a new ImportContactsCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class ImportContactsCommandParser implements Parser\u003cImportContactsCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportContactsCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * and returns an ImportContactsCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public ImportContactsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FILE)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    ImportContactsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FilePath filePath \u003d ParserUtil.parseFilePath(argMultimap.getValue(PREFIX_FILE).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FileReader fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        if (!fileReader.isValidFile()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_FILE_READER_INVALID_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    ImportContactsCommand.MESSAGE_WRONG_FILE_FORMAT));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return new ImportContactsCommand(fileReader);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "cjiefeng": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NotificationCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.NotificationCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Parses input arguments and creates a new NotificationCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class NotificationCommandParser implements Parser\u003cNotificationCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotificationCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * and returns a Notification object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public NotificationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        args \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (!args.equals(\"enable\") \u0026\u0026 !args.equals(\"disable\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotificationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } else if (args.equals(\"enable\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return new NotificationCommand(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return new NotificationCommand(false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 32,
      "kaitingpeck": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FilePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /*public static Set parseSet(String set) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        requireNonNull(set);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        String trimmedSet \u003d set.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (!Set.isValidSet(trimmedSet)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_SET_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return new Set(trimmedSet);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Parses {@code String filePath} into a {@code file}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static FilePath parseFilePath(String filePath) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        String trimmedFilePath \u003d filePath.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        if (!FilePath.isValidPath(trimmedFilePath)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new ParseException(FilePath.MESSAGE_FILEPATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return new FilePath(trimmedFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses a {@code String eventName} into a {@code EventName}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the given {@code eventName} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static EventName parseEventName(String eventName) throws ParseException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String trimmedName \u003d eventName.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(EventName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new EventName(trimmedName);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses a {@code String eventDescription} into a {@code EventDescription}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the given {@code eventDescription} is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static EventDescription parseEventDescription(String eventDescription) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventDescription);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String trimmedDescription \u003d eventDescription.trim();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventDescription.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(EventDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new EventDescription(trimmedDescription);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses a {@code String eventDate} into a {@code EventDate}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the given {@code eventDate} is invalid."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static EventDate parseEventDate(String eventDate) throws ParseException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String trimmedDate \u003d eventDate.trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new EventDate(trimmedDate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses a {@code String eventTime} into a {@code EventTime}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the given {@code eventTime} is invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static EventTime parseEventTime(String eventTime) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventTime);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String trimmedTime \u003d eventTime.trim();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventTime.isValidTime(trimmedTime)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new EventTime(trimmedTime);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses a {@code String eventAddress} into an {@code EventAddress}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the given {@code eventAddress} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static EventAddress parseEventAddress(String eventAddress) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventAddress);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String trimmedAddress \u003d eventAddress.trim();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventAddress.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(EventAddress.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new EventAddress(trimmedAddress);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses a {@code Collection\u003cString\u003e indices} into a {@code Set\u003cIndex\u003e}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static Set\u003cIndex\u003e parseIndices(Collection\u003cString\u003e indices) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(indices);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final Set\u003cIndex\u003e indexSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (String index : indices) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            indexSet.add(parseIndex(index));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return indexSet;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Parses a {@code String faculty} into an {@code Faculty}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @throws ParseException if the given {@code faculty} is invalid."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static Faculty parseFaculty(String faculty) throws ParseException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String trimmedFaculty \u003d faculty.trim();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (!Faculty.isValidFaculty(faculty)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            throw new ParseException(Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return new Faculty(trimmedFaculty);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 16,
      "ryantanwk": 9,
      "kaitingpeck": 91,
      "-": 124,
      "cjiefeng": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SeeEventContactsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ArgumentMultimap.arePrefixesPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.SeeEventContactsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Parses input arguments and creates a new SeeEventContactsCommandParser object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class SeeEventContactsCommandParser implements Parser\u003cSeeEventContactsCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SeeEventContactsCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and returns an SeeEventContactsCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public SeeEventContactsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_INDEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check for mandatory fields, and that no other data is entered between the command and first argument prefix"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_INDEX)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    SeeEventContactsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate eventDate \u003d ParserUtil.parseEventDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index eventIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_INDEX).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new SeeEventContactsCommand(eventDate, eventIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ShowLocationCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.commands.ShowLocationCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Parses input arguments and creates a new ShowLocationCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class ShowLocationCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ShowLocation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * and returns an ShowLocationCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public ShowLocationCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            return new ShowLocationCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ShowLocationCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ToggleCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.ToggleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Parses input arguments and creates a new ToggleCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class ToggleCommandParser implements Parser\u003cToggleCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ToggleCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * and returns a ToggleCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public ToggleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (args.equals(\"\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return new ToggleCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ToggleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.UniqueEventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final UniqueEventList events;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final UniqueTagList eventTags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private boolean notificationPref;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private String favourite;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        notificationPref \u003d true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        favourite \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the contents of the event list with {@code events}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the contents of the event tag list with {@code eventTags}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code eventTags} must not contain duplicate event tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEventTags(List\u003cTag\u003e eventTags) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventTags.setTags(eventTags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Updates the notification preference."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void setNotificationPref(boolean set) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        this.notificationPref \u003d set;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setEvents(newData.getEventList());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setEventTags(newData.getEventTagList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        setNotificationPref(newData.getNotificationPref());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        updateFavourite(newData.getFavourite());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Removes {@code key} from the person list in this {@code AddressBook}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //// event-level operations"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return events.contains(event);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a clashing event with {@code event} exists in the address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return events.containsClashingEvent(event);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Removes {@code key} from the events list in this {@code AddressBook}."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void removeEvent(Event key) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events.remove(key);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds an event to the address book."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event must not already exist in the address book, and must not clash any of the existing events in the"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * address book. All event tags must be existing in the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert !hasEvent(event);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert !hasClashingEvent(event);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Tag eventTag : event.getEventTags()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            assert hasEventTag(eventTag);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the given event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(editedEvent);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events.setEvent(target, editedEvent);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Reads contacts info in the given file reader."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void importContacts(FileReader fileReader) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        ArrayList\u003cString\u003e contacts \u003d fileReader.getContacts();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        for (String s : contacts) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            String[] parts \u003d s.split(\",\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            String nameString \u003d parts[fileReader.getNameIndex()];"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            String phoneString \u003d parts[fileReader.getPhoneIndex()].replaceAll(\"[^\\\\d]\", \"\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            String addressString \u003d parts[fileReader.getAddressIndex()];"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            String emailString \u003d parts[fileReader.getEmailIndex()];"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            String facultyString \u003d parts[fileReader.getFacultyIndex()];"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            if (!(Name.isValidName(nameString) \u0026\u0026 Phone.isValidPhone(phoneString)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    \u0026\u0026 Address.isValidAddress(addressString) \u0026\u0026 Email.isValidEmail(emailString))"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    \u0026\u0026 Faculty.isValidFaculty(facultyString)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                Name name \u003d ParserUtil.parseName(nameString);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                Phone phone \u003d ParserUtil.parsePhone(phoneString);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                Email email \u003d ParserUtil.parseEmail(emailString);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                Address address \u003d ParserUtil.parseAddress(addressString);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                Faculty faculty \u003d ParserUtil.parseFaculty(facultyString);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                Person person \u003d new Person(name, phone, email, address, tagList, faculty);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                if (!persons.contains(person)) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    persons.add(person);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    fileReader.incrementAddCounter();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                // invalid values in contact entry, skip entry"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if an event tag with the same identity as {@code tag} exists in the address book."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasEventTag(Tag tag) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventTags.contains(tag);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds an event tag to the address book."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event tag must not be already existing in the address book."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addEventTag(Tag tag) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert !hasEventTag(tag);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags.add(tag);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + \"\\n\" + events.asUnmodifiableObservableList().size() + \" events\";"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return events.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cTag\u003e getEventTagList() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventTags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public boolean getNotificationPref() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return notificationPref;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void updateNotificationPref(boolean set) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        this.notificationPref \u003d set;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public String getFavourite() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return favourite;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void updateFavourite(String favourite) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        this.favourite \u003d favourite;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 events.equals(((AddressBook) other).events))"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventTags.equals(((AddressBook) other).eventTags);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Returns true if the current event is the favourite event."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Formats event details into a String to be checked against \"favourite\" in versionedAddressBook."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public boolean isFavourite(Event event) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (favourite !\u003d null \u0026\u0026 favourite.equals(\"Event Name: \" + event.getEventName()"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + \"\\nEvent Date: \" + event.getEventDate() + \", \" + event.getEventDay()"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + \"\\nEvent Time: \" + event.getEventStartTime() + \" - \" + event.getEventEndTime()"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + \"\\nEvent Details: \" + event.getEventDescription())) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return persons.hashCode() + events.hashCode() + eventTags.hashCode();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 49,
      "kaitingpeck": 112,
      "-": 119,
      "cjiefeng": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    Predicate\u003cEvent\u003e PREDICATE_SHOW_ALL_EVENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if an event with the same identity as {@code event} exists in the address book."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    boolean hasEvent(Event event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a clashing event with {@code event} exists in the address book."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    boolean hasClashingEvent(Event event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the given event {@code target} with {@code editedEvent}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the address book."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    void updateEvent(Event target, Event editedEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Deletes the given event."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event must exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    void deleteEvent(Event target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds the given event into the address book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code event} must not already exist in the address book and must not clash with any of the existing events in"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    void addEvent(Event event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Reads contacts info in the given file reader."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * {@code fileReader} must be have a valid file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    void importContacts(FileReader fileReader);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if an event tag with the same identity as {@code eventTag} exists in the address book."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    boolean hasEventTag(Tag eventTag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds the given event tag into the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code eventTag} must not already exist in the address book."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    void addEventTag(Tag eventTag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the unfiltered person list */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cPerson\u003e getUnfilteredPersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the filtered event list */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cEvent\u003e getFilteredEventList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Updates the filter of the filtered event list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    void updateFilteredEventList(Predicate\u003cEvent\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of lists of events (grouped by date) */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Returns an unmodifiable view of the unfiltered event tag list */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cTag\u003e getEventTagList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Updates the notification preference."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    void updateNotificationPref(boolean set);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Updates the favourite event."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    void updateFavourite(String favourite);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    void updateFavourite(Event favourite);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Returns notification preference."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    boolean getNotificationPref();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Returns favourite event String."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    String getFavourite();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Checks if the event is the favourite."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    boolean isFavourite(Event event);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    void indicateTabPanelSelectionChangedEvent();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 29,
      "kaitingpeck": 64,
      "-": 78,
      "cjiefeng": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.model.AddressBookEventChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.model.AddressBookEventTagChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.ui.EventPanelDisplayChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.events.ui.TabPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final FilteredList\u003cEvent\u003e filteredEvents;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private final ObservableList\u003cTag\u003e eventTags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEvents \u003d new FilteredList\u003c\u003e(versionedAddressBook.getEventList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        eventTags \u003d versionedAddressBook.getEventTagList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addListenerToBaseEventList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        addListenerToEventTagList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public boolean getNotificationPref() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return versionedAddressBook.getNotificationPref();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void updateNotificationPref(boolean set) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        versionedAddressBook.setNotificationPref(set);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public String getFavourite() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return versionedAddressBook.getFavourite();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void updateFavourite(String favourite) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        versionedAddressBook.updateFavourite(favourite);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Formats event details into a String to be saved as \"favourite\" in versionedAddressBook."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void updateFavourite(Event favouriteEvent) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        versionedAddressBook.updateFavourite(\"Event Name: \" + favouriteEvent.getEventName()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + \"\\nEvent Date: \" + favouriteEvent.getEventDate() + \", \" + favouriteEvent.getEventDay()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + \"\\nEvent Time: \" + favouriteEvent.getEventStartTime() + \" - \" + favouriteEvent.getEventEndTime()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + \"\\nEvent Details: \" + favouriteEvent.getEventDescription());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Raises an event to indicate the events list in the model has changed */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void indicateAddressBookEventChanged() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        raise(new AddressBookEventChangedEvent(filteredEvents));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /** Raises an event to indicate the event tags list in the model has changes */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private void indicateAddressBookEventTagChanged() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        raise(new AddressBookEventTagChangedEvent(eventTags));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /** Raises an event to indicate an action to change the display has been made, even if there are no changes to"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * the filtered event list. This is the slight difference between this method and indicateAddressBookEventChanged."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void indicateEventPanelDisplayChanged() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        raise(new EventPanelDisplayChangedEvent());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void indicateTabPanelSelectionChangedEvent() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        raise (new TabPanelSelectionChangedEvent());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return versionedAddressBook.hasEvent(event);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(event);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return versionedAddressBook.hasClashingEvent(event);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        versionedAddressBook.removeEvent(target);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addEvent(Event event) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        versionedAddressBook.addEvent(event);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        versionedAddressBook.updateEvent(target, editedEvent);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d File Reader methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void importContacts(FileReader fileReader) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        versionedAddressBook.importContacts(fileReader);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event tag methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean hasEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventTag);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return versionedAddressBook.hasEventTag(eventTag);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        versionedAddressBook.addEventTag(eventTag);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the unfiltered list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code versionedAddressBook}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Event} backed by the internal list of"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEvents);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEvents.setPredicate(predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // indicate a change in display, even though displayed data does not change"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        indicateEventPanelDisplayChanged();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds a listener on the base event list {@code filteredEvents} to detect changes in the base list"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and indicate the change to the address book."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addListenerToBaseEventList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEvents.addListener((ListChangeListener.Change\u003c? extends Event\u003e change) -\u003e {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (change.next()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                indicateAddressBookEventChanged();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                indicateEventPanelDisplayChanged();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        });"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the list of lists of {@code Event} (grouped by date)  backed by the internal"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * list of"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Map\u003cEventDate, List\u003cEvent\u003e\u003e filteredEventsByDateMap \u003d filteredEvents.stream()"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.groupingBy(Event::getEventDate));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (List\u003cEvent\u003e eventList : filteredEventsByDateMap.values()) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            eventList.sort(Comparator.comparing(Event::getEventStartTime));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // convert the map to a FilteredList"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ObservableList\u003cList\u003cEvent\u003e\u003e filteredEventsByDateList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEventsByDateList.addAll(filteredEventsByDateMap.values());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Comparator\u003cList\u003cEvent\u003e\u003e eventListComparator \u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Comparator.comparing(eventList -\u003e eventList.get(0).getEventDate());"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        filteredEventsByDateList.sort(eventListComparator.reversed());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FilteredList\u003cList\u003cEvent\u003e\u003e filteredEventsByDate \u003d new FilteredList\u003c\u003e(filteredEventsByDateList);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredEventsByDate);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Event Tag List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Tag} backed by the internal list of"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cTag\u003e getEventTagList() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(eventTags);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds a listener on the event tag list {@code eventTagList} to detect changes in the list"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * and indicate the change to the address book."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void addListenerToEventTagList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags.addListener((ListChangeListener.Change\u003c? extends Tag\u003e change) -\u003e {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (change.next()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                indicateAddressBookEventTagChanged();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        });"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 filteredEvents.equals(other.filteredEvents);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public boolean isFavourite(Event event) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        return versionedAddressBook.isFavourite(event);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 47,
      "kaitingpeck": 170,
      "-": 149,
      "cjiefeng": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the events list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * This list will not contain any duplicate events."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cEvent\u003e getEventList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an unmodifiable view of the event tags list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * This list will not contain any duplicate event tags."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    ObservableList\u003cTag\u003e getEventTagList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Returns notification preference."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    boolean getNotificationPref();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Updates notification preference."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    void updateNotificationPref(boolean set);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Updates favourite."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    void updateFavourite(String favourite);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Returns favourite String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    String getFavourite();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Checks if the event is the currently favourite event"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    boolean isFavourite(Event event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 25,
      "kaitingpeck": 13,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"eventsPlus+.xml\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        setGuiSettings(500, 500, 0, 0, true, null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y, boolean set,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                               String favouriteEvent) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y, set, favouriteEvent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 4,
      "kaitingpeck": 1,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/Event.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventName eventName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDescription eventDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDate eventDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventDay eventDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventTime eventStartTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventTime eventEndTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final EventAddress eventAddress;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // data fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Set\u003cPerson\u003e eventContacts;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Set\u003cTag\u003e eventTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Every field must be present and not null. End time must be later than start time."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Event(EventName eventName, EventDescription eventDescription, EventDate eventDate, EventTime eventStartTime,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                 EventTime eventEndTime, EventAddress eventAddress, Set\u003cTag\u003e eventTags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(eventName, eventDescription, eventDate, eventStartTime, eventAddress, eventTags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d eventDescription;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDay \u003d new EventDay(eventDate.getEventDay());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventEndTime \u003d eventEndTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d eventAddress;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventContacts \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventTags.addAll(eventTags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Every field must be present and not null. End time must be later than start time."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * This constructor allows for direct creation of an event with a non-empty {@code eventContacts}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Event(EventName eventName, EventDescription eventDescription, EventDate eventDate, EventTime eventStartTime,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                 EventTime eventEndTime, EventAddress eventAddress, Set\u003cPerson\u003e eventContacts, Set\u003cTag\u003e eventTags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(eventName, eventDescription, eventDate, eventStartTime, eventAddress);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(eventContacts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d eventDescription;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDay \u003d new EventDay(eventDate.getEventDay());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventEndTime \u003d eventEndTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d eventAddress;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventContacts \u003d eventContacts;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventTags \u003d eventTags;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the eventContacts of this event to {@code eventContacts}. The input must not contain any null values,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * i.e. each element of {@code eventContacts} should be a valid Person object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEventContacts(Set\u003cPerson\u003e eventContacts) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(eventContacts);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventContacts \u003d eventContacts;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventName getEventName() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDescription getEventDescription() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDescription;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDate getEventDate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventTime getEventStartTime() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventStartTime;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventTime getEventEndTime() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventEndTime;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventAddress getEventAddress() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventAddress;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDay getEventDay() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDay;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an immutable {@code Person} set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Set\u003cPerson\u003e getEventContacts() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Collections.unmodifiableSet(eventContacts);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an immutable event {@code Tag} set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Set\u003cTag\u003e getEventTags() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Collections.unmodifiableSet(eventTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if the two events clash"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean isClashingEvent(Event event) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.equals(event.eventDate)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventEndTime.compareTo(event.eventStartTime) \u003e 0"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventStartTime.compareTo(event.eventEndTime) \u003c 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if both events are equal"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDescription().equals(getEventDescription())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventStartTime().equals(getEventStartTime())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventEndTime().equals(getEventEndTime())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventAddress().equals(getEventAddress());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if both events have the same identity and data fields."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof Event)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event otherEvent \u003d (Event) other;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return otherEvent.getEventName().equals(getEventName())"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDescription().equals(getEventDescription())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventDate().equals(getEventDate())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventStartTime().equals(getEventStartTime())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventEndTime().equals(getEventEndTime())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventAddress().equals(getEventAddress())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventContacts().equals(getEventContacts())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 otherEvent.getEventTags().equals(getEventTags());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Objects.hash(eventName, eventDescription, eventDate, eventStartTime, eventEndTime,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                eventAddress, eventContacts, eventTags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        builder.append(getEventName())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event description: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventDescription())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event date: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventDate())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event day: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventDay())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event start time: \")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventStartTime())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event end time: \")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventEndTime())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event address: \")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventAddress())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(\" Event tags: \")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .append(getEventTags());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        getEventContacts().forEach(builder::append);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventAddress.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents a Event\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventAddress {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The first character of the event address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * so that \" \" (a blank string) is considered an invalid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final String eventAddress;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs an {@code EventAddress}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventAddress A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventAddress(String eventAddress) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventAddress);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidAddress(eventAddress), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d eventAddress;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid event address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventAddress;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventAddress // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventAddress.equals(((EventAddress) other).eventAddress)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventAddress.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s date in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDate implements Comparable\u003cEventDate\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Dates should be in the format YYYY-MM-DD, should be a valid date in the calendar, \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A blank string \" \" is considered invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Format must be in YYYY-MM-DD, using only - as the separator."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"^[0-9]{4}-\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"(((0[13578]|(10|12))-(0[1-9]|[1-2][0-9]|3[0-1]))|\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"(02-(0[1-9]|[1-2][0-9]))|\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"((0[469]|11)-(0[1-9]|[1-2][0-9]|30)))$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final LocalDate eventDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs a {@code EventDate}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventDate A valid date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDate(String eventDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidDate(eventDate), MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d LocalDate.parse(eventDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public DayOfWeek getEventDay() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.getDayOfWeek();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidDate(String test) throws DateTimeParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // includes checks for leap years"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            LocalDate.parse(test);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } catch (DateTimeParseException dte) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventDate // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventDate.equals(((EventDate) other).eventDate)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int compareTo(EventDate other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.compareTo(other.eventDate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDate.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s day in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; and is based on the Enum class {@link DayOfWeek}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDay {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final DayOfWeek day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDay(DayOfWeek day) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return day.toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventDay // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 day.equals(((EventDay) other).day)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return day.hashCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventDescription.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s description in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DESCRIPTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Event descriptions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The first character of the event name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * so that \" \" (a blank string) is considered an invalid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DESCRIPTION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\s]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final String eventDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs a {@code EventDescription}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventDescription A valid description."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventDescription(String eventDescription) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventDescription);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidDescription(eventDescription), MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d eventDescription;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return test.matches(DESCRIPTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDescription;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventDescription.equals(((EventDescription) other).eventDescription)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventDescription.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Event names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The first character of the event name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * so that \" \" (a blank string) is considered an invalid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\s]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final String eventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs a {@code EventName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventName A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventName(String eventName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidName(eventName), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid event name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventName // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventName.equals(((EventName) other).eventName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Tests that an {@code Event}\u0027s {@code EventName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventNameContainsKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(event.getEventName().eventName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 keywords.equals(((EventNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventTagMatchesKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Tests that an {@code Event}\u0027s {@code EventTag} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventTagMatchesKeywordsPredicate implements Predicate\u003cEvent\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventTagMatchesKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean test(Event event) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cString\u003e eventTags \u003d event.getEventTags().stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .map(eventTag -\u003e eventTag.tagName)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .anyMatch(keyword -\u003e eventTags.stream().anyMatch(keyword::equalsIgnoreCase));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventTagMatchesKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 keywords.equals(((EventTagMatchesKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/EventTime.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Represents an Event\u0027s time in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTime(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventTime implements Comparable\u003cEventTime\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"Times should be in the 24-hour format HHMM, should be in the range 0000 to 2359, \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A blank string \" \" is considered invalid."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Format must be in HHMM, without any separators."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String TIME_VALIDATION_REGEX \u003d \"^(20|21|22|23|[01]\\\\d)\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"(([0-5]\\\\d){1})$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final LocalTime eventTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs a {@code EventTime}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventTime A valid time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventTime(String eventTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(eventTime);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        checkArgument(isValidTime(eventTime), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventTime \u003d LocalTime.parse(getHour(eventTime) + \":\" + getMinute(eventTime));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getHour(String time) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return time.substring(0, 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getMinute(String time) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return time.substring(2, 4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if a given string is a valid time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static boolean isValidTime(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!test.matches(TIME_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            LocalTime.parse(getHour(test) + \":\" + getMinute(test));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } catch (DateTimeParseException dte) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Compares this event time and {@code eventTime} in the same way as is done in {@link LocalTime}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param eventTime"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @return a negative integer if this is earlier than eventTime, 0 if this is the same as eventTime and a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * positive integer if this is later than eventTime."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int compareTo(EventTime eventTime) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this.eventTime.compareTo(eventTime.eventTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @return String representation of time in HH:MM"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventTime.toString().replace(\":\", \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof EventTime // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventTime.equals(((EventTime) other).eventTime)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventTime.hashCode();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/UniqueEventList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.EventClashException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A list of events that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * unique in terms of identity in the UniqueEventList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * @see Event#isSameEvent(Event)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class UniqueEventList implements Iterable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if the list contains an equivalent event as the given argument."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if the list contains a clashing event as defined in {@code Event#isClashingEvent(Event)}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean containsClashingEvent(Event toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isClashingEvent);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds an {@code Event} to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event must not already exist in the list and must not clash with any existing events in the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (containsClashingEvent(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new EventClashException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the event {@code target} in the list with {@code editedEvent}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event identity of {@code editedEvent} must not be the same as another existing event in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(target, editedEvent);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!target.isSameEvent(editedEvent) \u0026\u0026 contains(editedEvent)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // captures the case where editedEvent is the same event as both target AND another event in internalList"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (target.isSameEvent(editedEvent)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (internalList.stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .anyMatch(event -\u003e !event.equals(target) \u0026\u0026 event.isSameEvent(editedEvent))) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                throw new DuplicateEventException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.set(index, editedEvent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Removes the equivalent event from the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The event must exist in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents(UniqueEventList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the contents of this list with {@code events}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code events} must not contain duplicate events."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(events);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new DuplicateEventException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!eventsDoNotClash(events)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new EventClashException();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.setAll(events);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof UniqueEventList // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if {@code events} contains only unique events."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                if (events.get(i).isSameEvent(events.get(j))) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if {@code events} does not contain any events with clashes."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private boolean eventsDoNotClash(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                if (events.get(i).isClashingEvent(events.get(j))) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/DuplicateEventException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Signals that the operation will result in duplicate {@code Event} (Events are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * identity as defined in {@code Event#isSameEvent(Event)})."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class DuplicateEventException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public DuplicateEventException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(\"Operation would result in duplicate events\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventClashException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Signals that the operation will result in two clashing {@code Event}s (Events are considered clashing events if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * they clash, as defined in {@code Event#isClashingEvent(Event)})."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventClashException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventClashException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(\"Operation would result in clash events\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/event/exceptions/EventNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Signals that the operation is unable to find the specified event."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/filereader/FilePath.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.model.filereader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * Represents a file path."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPath(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class FilePath {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String MESSAGE_FILEPATH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            \"File not found, path should be the absolute path of a csv file, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public final String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Constructs a {@code FilePath}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * @param filePath A valid file path."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public FilePath(String filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        checkArgument(isValidPath(filePath), MESSAGE_FILEPATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static boolean isValidPath(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        File contactsFile \u003d new File(test);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return contactsFile.isAbsolute() \u0026\u0026 contactsFile.isFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                || (other instanceof FilePath // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                \u0026\u0026 filePath.equals(((FilePath) other).filePath)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return filePath.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjiefeng": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/filereader/FileReader.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.model.filereader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * Represents a FileReader."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * Guarantees: file path is present and not null, validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class FileReader {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String CSV_HEADER_NAME \u003d \"Given Name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String CSV_HEADER_PHONE \u003d \"Phone 1 - Value\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String CSV_HEADER_ADDRESS \u003d \"Address 1 - Street\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String CSV_HEADER_EMAIL \u003d \"E-mail 1 - Value\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String CSV_HEADER_FACULTY \u003d \"Organization 1 - Name\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private final File csvFile;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private final FilePath csvFilePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private boolean isValidFile \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private int nameIndex \u003d -1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private int phoneIndex \u003d -1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private int addressIndex \u003d -1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private int emailIndex \u003d -1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private int facultyIndex \u003d -1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private ArrayList\u003cString\u003e contacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private int addCounter \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private int maxIndex \u003d -1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public FileReader(FilePath csvFilePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        requireAllNonNull(csvFilePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        this.csvFilePath \u003d csvFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        this.csvFile \u003d new File(csvFilePath.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        readImportContactsFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public FilePath getCsvFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return csvFilePath;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public boolean isValidFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return isValidFile;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public int getNameIndex() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return nameIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public int getPhoneIndex() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return phoneIndex;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public int getAddressIndex() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return addressIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public int getEmailIndex() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return emailIndex;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public int getFacultyIndex() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return facultyIndex;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public ArrayList\u003cString\u003e getContacts() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return contacts;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void incrementAddCounter() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        this.addCounter++;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public String getAddContactStatus() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return addCounter + \"/\" + contacts.size();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Reads contact information from given csv file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void readImportContactsFile() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            Scanner sc \u003d new Scanner(csvFile);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            if (!sc.hasNextLine()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                sc.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            String header \u003d sc.nextLine();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            String[] parts \u003d header.split(\",\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            isValidFile \u003d setIndex(parts);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            if (!isValidFile) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                sc.close();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            while (sc.hasNextLine()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                String nextLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                String[] contentParts \u003d nextLine.split(\",\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                // if there is a break line in an entry, merge with next line"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                if (contentParts.length \u003c maxIndex) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    nextLine +\u003d \" \" + sc.nextLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                contacts.add(nextLine);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            sc.close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            // will never happen, toImport is validated by parser"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private boolean setIndex(String[] parts) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        for (int i \u003d 0; i \u003c parts.length; i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            if (parts[i].equals(CSV_HEADER_NAME)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                nameIndex \u003d i;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                if (i \u003e maxIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    maxIndex \u003d i;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            if (parts[i].equals(CSV_HEADER_PHONE)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                phoneIndex \u003d i;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                if (i \u003e maxIndex) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    maxIndex \u003d i;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            if (parts[i].equals(CSV_HEADER_ADDRESS)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                addressIndex \u003d i;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                if (i \u003e maxIndex) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    maxIndex \u003d i;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            if (parts[i].equals(CSV_HEADER_EMAIL)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                emailIndex \u003d i;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                if (i \u003e maxIndex) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    maxIndex \u003d i;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            if (parts[i].equals(CSV_HEADER_FACULTY)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                facultyIndex \u003d i;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                if (i \u003e maxIndex) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                    maxIndex \u003d i;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // return true if nameIndex, phoneIndex, addressIndex, emailIndex and facultyIndex is valid"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return nameIndex !\u003d -1 \u0026\u0026 phoneIndex !\u003d -1 \u0026\u0026 addressIndex !\u003d -1 \u0026\u0026 emailIndex !\u003d -1 \u0026\u0026 facultyIndex !\u003d -1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        if (!(other instanceof FileReader)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FileReader otherFileReader \u003d (FileReader) other;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return otherFileReader.getCsvFilePath().equals(getCsvFilePath())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                \u0026\u0026 otherFileReader.getNameIndex() \u003d\u003d getNameIndex()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                \u0026\u0026 otherFileReader.getPhoneIndex() \u003d\u003d getPhoneIndex()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                \u0026\u0026 otherFileReader.getEmailIndex() \u003d\u003d getEmailIndex()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                \u0026\u0026 otherFileReader.getAddressIndex() \u003d\u003d getAddressIndex()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                \u0026\u0026 otherFileReader.getFacultyIndex() \u003d\u003d getFacultyIndex();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return Objects.hash(csvFilePath, nameIndex, phoneIndex, emailIndex, addressIndex, facultyIndex);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return csvFilePath.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjiefeng": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ExistingPersonInEventPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Tests that a {@code Person} matches any of the {@code Person} found in {@contacts}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class ExistingPersonInEventPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Set\u003cPerson\u003e contacts;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExistingPersonInEventPredicate(Set\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contacts \u003d persons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return contacts.stream().anyMatch(contact -\u003e person.isSamePerson(contact));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof ExistingPersonInEventPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 contacts.equals(((ExistingPersonInEventPredicate) other).contacts)); // state check"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Faculty.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Represents a Person\u0027s faculty in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidFaculty(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class Faculty {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * The Faculties that are allowed to be used as a valid input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    enum Faculties {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        SOC, FOS, YLLSOM, FOD, BIZ, SDE, FOE, FOL, YSTCOM, FASS"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String MESSAGE_FACULTY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            \"Faculty name should be standardized with what NUS uses. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                    + \"Contacts with no faculty should have the field set to \u0027-\u0027.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * The first character of the faculty must not be a whitespace,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String FACULTY_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Constructs an {@code Faculty}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param faculty A valid faculty."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public Faculty(String faculty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        requireNonNull(faculty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        checkArgument(isValidFaculty(faculty), MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        value \u003d faculty.toUpperCase();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static boolean isValidFaculty(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (test.equals(\"-\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            return test.matches(FACULTY_VALIDATION_REGEX) \u0026\u0026 isInEnum(test, Faculties.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * This method checks whether the Faculty value that has been passed in is valid or not by comparing to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * list of Faculties in the Faculties enum."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param value The value to be checked."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param enumClass The enum class that the value will be compared to."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param \u003cFaculties\u003e The Faculties enum containing all valid faculties."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @return true if the Faculty is valid (found in the Faculties enum)."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static \u003cFaculties extends Enum\u003cFaculties\u003e\u003e boolean isInEnum(String value, Class\u003cFaculties\u003e enumClass) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        for (Faculties e : enumClass.getEnumConstants()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            if (e.name().equalsIgnoreCase(value)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                || (other instanceof Faculty // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 value.equals(((Faculty) other).value)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final Faculty faculty;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, Faculty faculty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public Faculty getFaculty() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return faculty;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 otherPerson.getFaculty().equals(getFaculty());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags, faculty);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        builder.append(\" \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                .append(\"Faculty: \")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                .append(getFaculty());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 13,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric (A-Z, a-z, 0-9), and \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            + \"should exclude any spaces, symbols or special characters, such as \u0027%\u0027, \u0027*\u0027, \u0027~\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public String getLowerCaseTagName() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return tagName.toLowerCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if the two tags have the same {@code tagName} (case-insensitive)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean isSameTag(Tag otherTag) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (otherTag \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return otherTag !\u003d null \u0026\u0026 otherTag.tagName.equalsIgnoreCase(tagName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 17,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#isSameTag(Tag)}. As such, adding of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * tags uses Tag#isSameTag(Tag) for equality so as to ensure that the tag being added or updated is"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * unique in terms of identity in the UniqueTagList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * @see Tag#isSameTag(Tag)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds a tag to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * The tag must not already exist in the list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/DuplicateTagException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Signals that the operation will result in duplicate Tags (Tags are considered duplicates if they have the same tag"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * values (case-insensitive))."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                getTagSet(\"friends\"), new Faculty(\"FOS\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\"), new Faculty(\"FASS\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                getTagSet(\"neighbours\"), new Faculty(\"SOC\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                getTagSet(\"family\"), new Faculty((\"SOC\"))),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                getTagSet(\"classmates\"), new Faculty(\"FOE\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                getTagSet(\"colleagues\"), new Faculty(\"SDE\"))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static Event[] getSampleEvents() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person alex \u003d new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                getTagSet(\"friends\"), new Faculty(\"FOS\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag meetingTag \u003d new Tag(\"Meeting\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new Event[] {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new Event(new EventName(\"Meeting\"), new EventDescription(\"test events description\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventDate(\"2018-04-01\"), new EventTime(\"1400\"), new EventTime(\"1500\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    new EventAddress(\"3 Kent Ridge Drive\"), new HashSet\u003c\u003e(Arrays.asList(alex)),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    new HashSet\u003c\u003e(Arrays.asList(meetingTag)))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static Tag[] getSampleEventTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag appointmentTag \u003d new Tag(\"Appointment\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag meetingTag \u003d new Tag(\"Meeting\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new Tag[] {appointmentTag, meetingTag};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Tag sampleEventTag : getSampleEventTags()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            sampleAb.addEventTag(sampleEventTag);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Event sampleEvent : getSampleEvents()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            sampleAb.addEvent(sampleEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns a person set containing the list of persons given."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static Set\u003cPerson\u003e getEventContactSet(Person... persons) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Arrays.stream(persons)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 7,
      "kaitingpeck": 45,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.AddEventCommandParser.MESSAGE_INVALID_START_END_TIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * JAXB-friendly version of the Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class XmlAdaptedEvent {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventDescription;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventStartTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventEndTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String eventAddress;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // eventContacts in XML format should be an ordered list"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e eventContacts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e eventTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs an XmlAdaptedEvent."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public XmlAdaptedEvent() {}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Constructs an {@code XmlAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public XmlAdaptedEvent(String eventName, String eventDescription, String eventDate, String eventStartTime,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                           String eventEndTime, String eventAddress, List\u003cXmlAdaptedPerson\u003e eventContacts,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                           List\u003cXmlAdaptedTag\u003e eventTags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d eventName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d eventDescription;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventStartTime \u003d eventStartTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventEndTime \u003d eventEndTime;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d eventAddress;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventContacts !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            this.eventContacts \u003d new ArrayList\u003c\u003e(eventContacts);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventTags !\u003d null) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            this.eventTags \u003d new ArrayList\u003c\u003e(eventTags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Converts a given Event into this class for JAXB use."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedEvent"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public XmlAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventName \u003d source.getEventName().eventName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDescription \u003d source.getEventDescription().eventDescription;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDate \u003d source.getEventDate().toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventStartTime \u003d source.getEventStartTime().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventEndTime \u003d source.getEventEndTime().toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventAddress \u003d source.getEventAddress().eventAddress;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventContacts \u003d source.getEventContacts().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .map(XmlAdaptedPerson::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags \u003d source.getEventTags().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Converts this jaxb-friendly adapted event object into the model\u0027s Event object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final List\u003cPerson\u003e personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (XmlAdaptedPerson person : eventContacts) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            personList.add(person.toModelType());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final List\u003cTag\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (XmlAdaptedTag tag : eventTags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            tagList.add(tag.toModelType());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventName \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EventName.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventName.isValidName(eventName)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventName modelName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EventDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventDescription.isValidDescription(eventDescription)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventDescription modelDescription \u003d new EventDescription(eventDescription);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EventDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventDate.isValidDate(eventDate)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventDate modelDate \u003d new EventDate(eventDate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventStartTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    \"Start\" + EventTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventTime.isValidTime(eventStartTime)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventTime modelStartTime \u003d new EventTime(eventStartTime);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventEndTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    \"End\" + EventTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventTime.isValidTime(eventEndTime)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventTime modelEndTime \u003d new EventTime(eventEndTime);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check for logical start and end time"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (modelEndTime.compareTo(modelStartTime) \u003c 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MESSAGE_INVALID_START_END_TIME, modelStartTime,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    modelEndTime));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (eventAddress \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    EventAddress.class.getSimpleName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!EventAddress.isValidAddress(eventAddress)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new IllegalValueException(EventAddress.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final EventAddress modelAddress \u003d new EventAddress(eventAddress);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final Set\u003cPerson\u003e modelContacts \u003d new HashSet\u003c\u003e(personList);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(tagList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new Event(modelName, modelDescription, modelDate, modelStartTime, modelEndTime,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                modelAddress, modelContacts, modelTags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof XmlAdaptedEvent)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent otherEvent \u003d (XmlAdaptedEvent) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Objects.equals(eventName, otherEvent.eventName)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventDescription, otherEvent.eventDescription)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventDate, otherEvent.eventDate)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventStartTime, otherEvent.eventStartTime)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventEndTime, otherEvent.eventEndTime)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 Objects.equals(eventAddress, otherEvent.eventAddress)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventContacts.equals(otherEvent.eventContacts)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventTags.equals(otherEvent.eventTags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 200
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                            String faculty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (faculty !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            this.faculty \u003d faculty;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        faculty \u003d source.getFaculty().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (faculty \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (!Faculty.isValidFaculty(faculty)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            throw new IllegalValueException(Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        final Faculty modelFaculty \u003d new Faculty(faculty);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelFaculty);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 Objects.equals(faculty, otherPerson.faculty);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 20,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            logger.info(\"EventsPlus+ file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_CLASHING_EVENT \u003d \"Events list contains clashing event(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"Event tags list contains duplicate event tag(s).\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_TAG \u003d \"One or more event tag(s) does not exist in the address book.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private List\u003cXmlAdaptedEvent\u003e events;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e eventTags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        events.addAll(src.getEventList().stream().map(XmlAdaptedEvent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags.addAll(src.getEventTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * {@code XmlAdaptedPerson} or in the {@code XmlAdaptedEvent}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedPerson p : persons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d p.toModelType();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (XmlAdaptedTag t : eventTags) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Tag tag \u003d t.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (addressBook.hasEventTag(tag)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            addressBook.addEventTag(tag);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (XmlAdaptedEvent e : events) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Event event \u003d e.toModelType();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (addressBook.hasEvent(event)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            } else if (addressBook.hasClashingEvent(event)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                throw new IllegalValueException(MESSAGE_CLASHING_EVENT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            } else if (!event.getEventTags().stream().allMatch(addressBook::hasEventTag)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                throw new IllegalValueException(MESSAGE_NONEXISTENT_TAG);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            addressBook.addEvent(event);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return persons.equals(((XmlSerializableAddressBook) other).persons)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 events.equals(((XmlSerializableAddressBook) other).events)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 eventTags.equals(((XmlSerializableAddressBook) other).eventTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 39,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Loads a default HTML file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventTagCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.EditEventAddressCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.GenerateLocationCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.ImportContactsCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.NotificationCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.SeeEventContactsCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.ShowLocationCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final List\u003cString\u003e ALL_COMMAND_WORDS \u003d new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            AddCommand.COMMAND_WORD, AddCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            AddEventCommand.COMMAND_WORD, AddEventCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            AddEventTagCommand.COMMAND_WORD, AddEventTagCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ClearCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            DeleteCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            DeleteEventCommand.COMMAND_WORD, DeleteEventCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            EditCommand.COMMAND_WORD, EditCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ExitCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            FavouriteCommand.COMMAND_WORD, FavouriteCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            FindCommand.COMMAND_WORD, FindCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            FindEventCommand.COMMAND_WORD, FindEventCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            GenerateLocationCommand.COMMAND_WORD, GenerateLocationCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            HelpCommand.COMMAND_WORD, HelpCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            HistoryCommand.COMMAND_WORD, HistoryCommand.COMMAND_WORD_ALIAS, ImportContactsCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ListCommand.COMMAND_WORD, ListCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ListEventCommand.COMMAND_WORD, ListEventCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            NotificationCommand.COMMAND_WORD, NotificationCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            RedoCommand.COMMAND_WORD, RedoCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            SelectCommand.COMMAND_WORD, SelectCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ShowLocationCommand.COMMAND_WORD, ShowLocationCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            UndoCommand.COMMAND_WORD, UndoCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            EditEventAddressCommand.COMMAND_WORD, EditEventAddressCommand.COMMAND_WORD_ALIAS,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            SeeEventContactsCommand.COMMAND_WORD, SeeEventContactsCommand.COMMAND_WORD_ALIAS)).stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .sorted()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            autocompleteCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the displayed text in {@code CommandBox}\u0027s text field to the nearest valid command word"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * from the current text in {@code CommandBox}\u0027s text field, if such a command word can be found."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Else, does nothing."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void autocompleteCommand() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Optional\u003cString\u003e nearestCommandWord \u003d getNearestCommandWord(commandTextField.getText());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // required as commandTextField loses focus between start of execution of this method and this step"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (nearestCommandWord.isPresent()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            replaceText(nearestCommandWord.get());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        commandTextField.end();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the nearest VALID command word to {@code text}, if exists."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Else, return an empty Optional."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Optional\u003cString\u003e getNearestCommandWord(String text) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String nearestCommandWord \u003d null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (String commandWord : ALL_COMMAND_WORDS) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (commandWord.startsWith(text)) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                nearestCommandWord \u003d commandWord;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                break; // prevent checking longer words which could also contain text as a prefix"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return Optional.ofNullable(nearestCommandWord);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 90,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.model.AddressBookEventTagChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A UI component that displays information of a single {@code Event}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String FXML \u003d \"EventCard.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String PERSON_DELETED_MESSAGE \u003d \"This person no longer exists in EventsPlus+.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final Event event;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final List\u003cPerson\u003e personList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label endTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private FlowPane contacts;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private FlowPane eventTags;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventCard(Event event, int displayedIndex, List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert event !\u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.personList \u003d personList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setEventCardAttributes(event, displayedIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Person contact : event.getEventContacts()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Label contactLabel \u003d new Label(contact.getName().fullName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            setLabelUserData(contact, contactLabel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            setToolTip(contact, contactLabel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            contacts.getChildren().add(contactLabel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void setLabelUserData(Person contact, Label contactLabel) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // never changed, to retain data integrity since Events are designed to be immutable"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactLabel.setUserData(contact);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void setToolTip(Person contact, Label contactLabel) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String contactDisplayText \u003d getTooltipDisplayText(contact);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tooltip contactDisplayTooltip \u003d new Tooltip(contactDisplayText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setToolTipPreferences(contactDisplayTooltip);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactLabel.setTooltip(contactDisplayTooltip);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String getTooltipDisplayText(Person contact) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cPerson\u003e existingMatchingContacts \u003d personList.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .filter(person -\u003e person.isSamePerson(contact))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (existingMatchingContacts.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            // person no longer exists in the person list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return PERSON_DELETED_MESSAGE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // there should only be one matching contact in the address book person list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert existingMatchingContacts.size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // use the latest information for matching person in address book"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return getContactDisplayText(existingMatchingContacts.get(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void setToolTipPreferences(Tooltip contactDisplay) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactDisplay.setShowDelay(Duration.ONE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactDisplay.setShowDuration(Duration.INDEFINITE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactDisplay.setHideDelay(Duration.ONE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void setEventCardAttributes(Event event, int displayedIndex) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        id.setText(\"[\" + displayedIndex + \"] \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // use time representation with colon from LocalTime"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        startTime.setText(event.getEventStartTime().eventTime.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        endTime.setText(event.getEventEndTime().eventTime.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        name.setText(event.getEventName().eventName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        address.setText(event.getEventAddress().eventAddress);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        description.setText(event.getEventDescription().eventDescription);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        event.getEventTags().forEach(eventTag -\u003e eventTags.getChildren()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .add(new Label(eventTag.getLowerCaseTagName())));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private String getContactDisplayText(Person contact) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return contact.getName() + \"\\n\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + contact.getPhone() + \"\\n\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + contact.getEmail() + \"\\n\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + contact.getAddress();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventCard card \u003d (EventCard) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u0026\u0026 event.equals(card.event);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Updates the event card with updated {@code Person} information when the address book"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * person data changes, if any."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param addressBookChangedEvent"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handleAddressBookChangedEvent(AddressBookChangedEvent addressBookChangedEvent) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Node node : contacts.getChildren()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            assert node instanceof Label;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            assert node.getUserData() instanceof Person;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Label contactLabel \u003d (Label) node;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Person contact \u003d (Person) contactLabel.getUserData();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            String contactDisplayText \u003d getTooltipDisplayText(contact);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            contactLabel.getTooltip().setText(contactDisplayText);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Updates the event card with updated Event {@code Tag} information when the address book"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * event tag data changes, if any. This is required to keep the event tags synced with the"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * updated event tag list in the address book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @param addressBookEventTagChangedEvent"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handleAddressBookEventTagChangedEvent(AddressBookEventTagChangedEvent"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                                                                   addressBookEventTagChangedEvent) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cTag\u003e updatedEventTagList \u003d addressBookEventTagChangedEvent.data;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Node node : eventTags.getChildren()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            assert node instanceof Label;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Label eventTag \u003d (Label) node;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            // use Tag#isSameTag for comparison"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (updatedEventTagList.stream().noneMatch(tag -\u003e tag.isSameTag(new Tag(eventTag.getText())))) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                eventTags.getChildren().remove(eventTag);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 188
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A UI component that displays information of a list of {@code Event} for a particular {@code EventDate}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String FXML \u003d \"EventListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public final List\u003cEvent\u003e eventList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private VBox events;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventListCard(List\u003cEvent\u003e eventList, List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assert !eventList.isEmpty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event firstEvent \u003d eventList.get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        day.setText(firstEvent.getEventDay().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        date.setText(firstEvent.getEventDate().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (int eventIdx \u003d 0; eventIdx \u003c eventList.size(); eventIdx++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (eventList.get(eventIdx) !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                events.getChildren().add("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventCard(eventList.get(eventIdx), eventIdx + 1, personList)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        if (!(other instanceof EventListCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventListCard card \u003d (EventListCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventList.equals(card.eventList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/EventListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.model.AddressBookEventTagChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Panel containing the list of events."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String FXML \u003d \"EventListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final ObservableList\u003cTag\u003e eventTagList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private FlowPane allEventTags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private ListView\u003cList\u003cEvent\u003e\u003e eventListView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public EventListPanel(ObservableList\u003cList\u003cEvent\u003e\u003e eventList, ObservableList\u003cPerson\u003e personList,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                          ObservableList\u003cTag\u003e eventTagList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventTagList \u003d eventTagList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        setConnections(eventList, personList, eventTagList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void setConnections(ObservableList\u003cList\u003cEvent\u003e\u003e eventList, ObservableList\u003cPerson\u003e personList,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                                ObservableList\u003cTag\u003e eventTagList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTagList.forEach(eventTag -\u003e allEventTags.getChildren().add(new Label(eventTag.getLowerCaseTagName())));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventListView.setItems(eventList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventListView.setCellFactory(listView -\u003e new EventListViewCell(personList));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handleAddressBookEventTagChangedEvent(AddressBookEventTagChangedEvent event) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // manually reset eventTags (FlowPane) display"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        allEventTags.getChildren().removeAll(allEventTags.getChildren());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTagList.forEach(eventTag -\u003e allEventTags.getChildren().add(new Label(eventTag.getLowerCaseTagName())));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code List\u003cEvent\u003e} using a {@code EventListCard}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    class EventListViewCell extends ListCell\u003cList\u003cEvent\u003e\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        private List\u003cPerson\u003e personList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public EventListViewCell(List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            super();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            this.personList \u003d personList;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        protected void updateItem(List\u003cEvent\u003e eventListByDate, boolean empty) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            super.updateItem(eventListByDate, empty);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            if (empty || eventListByDate.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                setGraphic(new EventListCard(eventListByDate, personList).getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/LocationDisplayPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.FacultyLocationDisplayChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.RandomMeetingLocationGeneratedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.EmbedGoogleMaps;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "public class LocationDisplayPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"locationLanding.html\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String API_KEY \u003d \"AIzaSyAUAMhSz-X72KN47J2YdyCE5VtDtcSmvmU\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String DEFAULT_UHALL_PLACE_ID \u003d \"ChIJA1jFpVca2jERs1NXg5xbqbA\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * First part of the location iframe content. The content is split into two so that the location to be displayed\u0027s"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Google Maps Place ID can be inserted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static String locationContentA \u003d \"\u003ciframe width\u003d\\\"1150\\\" height\u003d\\\"550\\\" frameborder\u003d\\\"0\\\"\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"style\u003d\\\"border:0\\\" src\u003d\\\"\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"https://www.google.com/maps/embed/v1/place?q\u003dplace_id:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Second part of the lccation iframe content."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static String locationContentB \u003d \"\u0026key\u003d\" + API_KEY + \"\\\" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            + \"allowfullscreen\u003e\u003c/iframe\u003e\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String FXML \u003d \"LocationDisplayPanel.fxml\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private WebView locationBrowser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public LocationDisplayPanel() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void loadPersonLocation(Person person) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        loadIframe(prepareLocationContent(person));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void loadRandomMeetingLocation(String placeId) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        loadIframe(prepareLocationContent(placeId));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Platform.runLater(() -\u003e locationBrowser.getEngine().load(url));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Prepares the final iframe location content string with the Faculty of the Person."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param person The person whose {@code Faculty} location is to be displayed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @return The final iframe location content."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String prepareLocationContent(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String faculty \u003d person.getFaculty().toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String finalLocationContent \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        if (faculty.equals(\"-\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            finalLocationContent \u003d locationContentA + DEFAULT_UHALL_PLACE_ID + locationContentB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            String placeId \u003d EmbedGoogleMaps.getPlaceId(faculty);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            finalLocationContent \u003d locationContentA + placeId + locationContentB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return finalLocationContent;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Overloaded method that prepares the final iframe location content string using placeId directly instead."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @param placeId The Google Maps Place ID of  location to be displayed."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * @return The final iframe location content."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String prepareLocationContent(String placeId) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String finalLocationContent \u003d locationContentA + placeId + locationContentB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return finalLocationContent;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void loadIframe(String iframeContent) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        locationBrowser.getEngine().loadContent(iframeContent);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Loads a default HTML file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        locationBrowser \u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        loadPersonLocation(event.getNewSelection());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void handleShowFacultyLocationSelectionEvent (FacultyLocationDisplayChangedEvent event) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        loadPersonLocation(event.getSelectedPerson());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void handleRandomMeetingLocationGeneratedEvent(RandomMeetingLocationGeneratedEvent event) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        loadRandomMeetingLocation(event.getMeetingPlaceId());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 138
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.events.model.AddressBookEventChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String NOTIFICATION_DEFAULT_TITLE \u003d \"Welcome\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String NOTIFICATION_DEFAULT_TEXT \u003d \"Welcome to EventsPlus+\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String NOTIFICATION_FAVOURITE_TITLE \u003d \"Favourite Event\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private StackPane tabsPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic, Model model) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        setNotification(prefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Configure notification based on existing user preferences in preferences.json"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private void setNotification(UserPrefs prefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.updateNotificationPref(prefs.getGuiSettings().getNotificationIsEnabled());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.updateFavourite(prefs.getGuiSettings().getFavouriteEvent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        if (model.getNotificationPref()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            if (model.getFavourite() !\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                NotificationWindow.display(NOTIFICATION_FAVOURITE_TITLE, model.getFavourite());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                NotificationWindow.display(NOTIFICATION_DEFAULT_TITLE, NOTIFICATION_DEFAULT_TEXT);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        //@@author kaitingpeck"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabPanel \u003d new TabPanel(logic.getFilteredEventListByDate(), logic.getUnfilteredPersonList(),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                logic.getEventTagList());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabsPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                model.getNotificationPref(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                model.getFavourite());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //@@author kaitingpeck"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void refreshTabPanel() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabPanel \u003d new TabPanel(logic.getFilteredEventListByDate(),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                logic.getUnfilteredPersonList(), logic.getEventTagList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabsPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        tabPanel.freeResources();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //@@author kaitingpeck"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handleAddressBookEventChangedEvent(AddressBookEventChangedEvent event) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        refreshTabPanel();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 2,
      "ryantanwk": 31,
      "kaitingpeck": 22,
      "-": 199
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotificationWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Controller for notifications"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class NotificationWindow {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     * Creates and displays a notification"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static void display(String title, String message) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Stage window \u003d new Stage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        window.initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        window.setTitle(title);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        window.setX(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        window.setY(0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        window.setWidth(200);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        window.setHeight(100);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Label label \u003d new Label();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        label.setText(message);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        VBox layout \u003d new VBox(10);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        layout.getChildren().addAll(label);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        layout.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        //Display window and wait for it to be closed before returning"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Scene scene \u003d new Scene(layout);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        window.setScene(scene);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        window.show();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        window.setAlwaysOnTop(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        PauseTransition delay \u003d new PauseTransition(Duration.seconds(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        delay.setOnFinished(event -\u003e window.close());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        delay.play();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "ryantanwk": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private Label faculty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        faculty.setText(person.getFaculty().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 3,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.ui.EventPanelDisplayChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.FacultyLocationDisplayChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.RandomMeetingLocationGeneratedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.events.ui.TabPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Panel containing two tabs: {@code BrowserPanel} and {@code EventListPanel} and {@code LocationDisplayPanel}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * Each panel is initialized as {@code BrowserPanel} and {@code EventListPanel} and {@code LocationDisplayPanel}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": " * objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventListPanel eventListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private LocationDisplayPanel locationDisplayPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private List\u003cTab\u003e tabList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private SingleSelectionModel\u003cTab\u003e selectionModel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Tab webpageTab;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Tab eventsTab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private Tab locationDisplayTab;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public TabPanel(ObservableList\u003cList\u003cseedu.address.model.event.Event\u003e\u003e eventList,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    ObservableList\u003cPerson\u003e personList, ObservableList\u003cTag\u003e eventTagList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        webpageTab.setContent(browserPanel.getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventListPanel \u003d new EventListPanel(eventList, personList, eventTagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventsTab.setContent(eventListPanel.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        locationDisplayPanel \u003d new LocationDisplayPanel();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        locationDisplayTab.setContent(locationDisplayPanel.getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // set default tab"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        selectionModel.select(eventsTab);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        tabList \u003d tabPane.getTabs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public TabPane getTabPane() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return tabPane;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Tab getWebpageTab() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return webpageTab;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Tab getEventsTab() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return eventsTab;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public Tab getLocationTab() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return locationDisplayTab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Frees resources allocated to the tab"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        webpageTab \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventsTab \u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        locationDisplayTab \u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        //@@author kaitingpeck"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // switch active tab"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        selectionModel.select(webpageTab);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void handleFacultyLocationDisplayChangedEvent(FacultyLocationDisplayChangedEvent event) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // switch active tab"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        selectionModel.select(locationDisplayTab);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void handleRandomMeetingLocationGeneratedEvent(RandomMeetingLocationGeneratedEvent event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // switch active tab"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        selectionModel.select(locationDisplayTab);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private void handleTabPanelSelectionChangedEvent(TabPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        //switch active tab"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Tab curr \u003d tabPane.getSelectionModel().getSelectedItem();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // select adjacent tab"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        for (int i \u003d 0; i \u003c tabList.size(); i++) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            if (tabList.get(i) \u003d\u003d curr) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                Tab newTab \u003d tabList.get((i + 1) % tabList.size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                selectionModel.select(newTab);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void handleEventPanelDisplayChangedEvent(EventPanelDisplayChangedEvent event) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // switch active tab"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        selectionModel.select(eventsTab);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 32,
      "ryantanwk": 22,
      "kaitingpeck": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/events_plus.png\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs, Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic, model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "ryantanwk": 5,
      "-": 117
    }
  },
  {
    "path": "src/main/resources/view/BrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cWebView fx:id\u003d\"browser\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "h1, h2, h3, h4, h5 {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    color: white;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    font-family: \u0027Quicksand\u0027, sans-serif;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 5,
      "-": 351
    }
  },
  {
    "path": "src/main/resources/view/EventCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" stylesheets\u003d\"@EventListView.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"50\" GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cInsets bottom\u003d\"5.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_small_label_event\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"startTime\" styleClass\u003d\"cell_time_label_event\" text\u003d\"\\$startTime\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"–\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cLabel fx:id\u003d\"endTime\" styleClass\u003d\"cell_time_label_event\" text\u003d\"\\$endTime\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_name_label_event\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cLabel styleClass\u003d\"cell_small_label_event\" text\u003d\"\\@\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_address_label_event\" text\u003d\"\\\\$address\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label_event\" text\u003d\"\\$description\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "               \u003cInsets left\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"contacts\" hgap\u003d\"5.0\" styleClass\u003d\"cell_small_label_event\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "               \u003cInsets left\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"eventTags\" hgap\u003d\"5.0\" styleClass\u003d\"cell_small_label_event\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "               \u003cInsets left\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 49
    }
  },
  {
    "path": "src/main/resources/view/EventListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" stylesheets\u003d\"@EventListView.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"day\" minWidth\u003d\"-Infinity\" styleClass\u003d\"cell_big_label_day\" text\u003d\"\\$day\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_big_label_date\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cVBox fx:id\u003d\"events\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 31
    }
  },
  {
    "path": "src/main/resources/view/EventListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cVBox stylesheets\u003d\"@EventListView.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "   \u003cHBox styleClass\u003d\"event_tag_header\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cLabel text\u003d\"Event Tags\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "               \u003cInsets right\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "         \u003cFlowPane fx:id\u003d\"allEventTags\" hgap\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003cListView fx:id\u003d\"eventListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 22
    }
  },
  {
    "path": "src/main/resources/view/EventListView.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 8 0 0 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #D6EAF8;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #AED6F1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #7FB3D5;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-border-color: #7FB3D5;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #5D6D7E;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_big_label_day {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_big_label_date {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #2C3E50;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_time_label_event {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_name_label_event {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #163571;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_address_label_event {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".list-cell .cell_small_label_event {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "#contacts .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #1ABC9C;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "#eventTags .label {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #13459C;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "#allEventTags .label {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #13459C;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-size: 13;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".event_tag_header {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #383838;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 103
    }
  },
  {
    "path": "src/main/resources/view/LocationDisplayPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "  \u003cWebView fx:id\u003d\"locationBrowser\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "          \u003cStackPane fx:id\u003d\"tabsPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "      \u003cLabel fx:id\u003d\"faculty\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$faculty\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/TabDisplay.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #FFFFFF00;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0 0 8 0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 0 0 0 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-min-width: 200px;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-insets: 0 5 0 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane .tab:selected {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #778899;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-pane .tab:hover {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #778899;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-padding: 2 30 2 30;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab-label {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-alignment: center;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ".tab:hover .tab-label {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 45
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003cTabPane fx:id\u003d\"tabPane\" stylesheets\u003d\"@TabDisplay.css\" tabClosingPolicy\u003d\"UNAVAILABLE\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  \u003ctabs\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cTab fx:id\u003d\"webpageTab\" text\u003d\"WEBPAGE\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cAnchorPane /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cTab fx:id\u003d\"eventsTab\" text\u003d\"EVENTS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cAnchorPane /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003cTab fx:id\u003d\"locationDisplayTab\" text\u003d\"LOCATION DISPLAY\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "      \u003ccontent\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cAnchorPane /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "      \u003c/content\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "  \u003c/tabs\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/TabPane\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 5,
      "kaitingpeck": 20
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003clink href\u003d\"https://fonts.googleapis.com/css?family\u003dQuicksand\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003ch1\u003eThings will be shown here. Eventually.\u003c/h1\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/resources/view/locationLanding.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003clink href\u003d\"https://fonts.googleapis.com/css?family\u003dQuicksand\" rel\u003d\"stylesheet\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003ch1\u003eLocation related information will be displayed in this tab.\u003c/h1\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 11
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/clashingEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Valid Event --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1300\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Clashing Event --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003eanother lecture\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1100\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1400\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c/events\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 21
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Valid Event --\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventContacts\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cname\u003eAlex Yeoh\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cphone\u003e87438807\u003c/phone\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cemail\u003ealexyeoh@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003caddress\u003eBlk 30 Geylang Street 29, #06-40\u003c/address\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cfaculty\u003eSCI\u003c/faculty\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/eventContacts\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Event with invalid start and end time field --\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1310\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Valid event tag --\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Invalid event tag --\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003ceventTags\u003e#Appointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 48
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Valid Event --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventContacts\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003cname\u003eAlex Yeoh\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003cphone\u003e87438807\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003cemail\u003ealexyeoh@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003caddress\u003eBlk 30 Geylang Street 29, #06-40\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003cfaculty\u003eSCI\u003c/faculty\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003c/eventContacts\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Event with invalid start and end time field --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1110\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 31
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidEventTagAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Valid Event tag--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Invalid Event tag --\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003ceventTags\u003e#Appointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 7
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Event with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eCl@ss\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 12
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidEventTagAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Invalid event tag --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003ceventTags\u003e#Appointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/clashingEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Valid Event --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1300\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c!-- Clashing Event --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003eanother lecture\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1100\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1400\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c/events\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 21
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventContacts\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003cname\u003eAlex Yeoh\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003cphone\u003e87438807\u003c/phone\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003cemail\u003ealexyeoh@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003caddress\u003eBlk 30 Geylang Street 29, #06-40\u003c/address\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\t\u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "\t\t\t\u003cfaculty\u003eFOS\u003c/faculty\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003c/eventContacts\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Event with same identity as Class --\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "kaitingpeck": 32
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateEventTagAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003ceventTags\u003eAPPOINTMENT\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 7
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicatePersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003epauline@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 2,
      "-": 20
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidEventAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Event with invalid start and end time field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eClass\u003c/eventName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003electure\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-01-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1200\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventEndTime\u003e1110\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eabc road\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 12
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidEventTagAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c!-- Invalid tag --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003ceventTags\u003e#friends\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person and Event values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventName\u003eDoctor appointment\u003c/eventName\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003eConsultation\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-09-01\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e1400\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventEndTime\u003e1500\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eBlk 312, Amy Street 1\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventContacts\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/eventContacts\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c/events\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003cevents\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventName\u003eMeeting\u003c/eventName\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDescription\u003eGroup meeting desc\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventDate\u003e2018-09-09\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventStartTime\u003e0900\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventEndTime\u003e1200\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\t\u003ceventAddress\u003eBlock 123, Bobby Street 3\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventContacts\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003c/eventContacts\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventTags\u003eMeeting\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "\t\u003c/events\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003cevents\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventName\u003eDinner appointment\u003c/eventName\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventDescription\u003ewith Ann\u003c/eventDescription\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventDate\u003e2018-09-09\u003c/eventDate\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventStartTime\u003e1800\u003c/eventStartTime\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventEndTime\u003e2015\u003c/eventEndTime\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        \u003ceventAddress\u003eNUS\u003c/eventAddress\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003c/events\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003ceventTags\u003eAppointment\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    \u003ceventTags\u003eMeeting\u003c/eventTags\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 7,
      "kaitingpeck": 46,
      "-": 49
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 9,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    \u003cfaculty\u003eSOC\u003c/faculty\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 10000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 118
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String FACULTY_FIELD_ID \u003d \"#faculty\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private final Label facultyLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        facultyLabel \u003d getChildNode(FACULTY_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public String getFaculty() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return facultyLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                \u0026\u0026 getFaculty().equals(person.getFaculty().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 8,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y, true, null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 1,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : EventsPlus+\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"validPerson.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String VALID_FACULTY \u003d \"SOC\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_FACULTY);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_FACULTY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_FACULTY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).build());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 4,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/EmbedGoogleMapsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "class EmbedGoogleMapsTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    void invalidFacultyLocation_getPlaceId() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(null, EmbedGoogleMaps.getPlaceId(\"arts\")); // not a conventional faculty name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(null, EmbedGoogleMaps.getPlaceId(\"soc\")); // lowercases should not be accepted"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(null, EmbedGoogleMaps.getPlaceId(\"-\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(null, EmbedGoogleMaps.getPlaceId(\"FOS+\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    void validFacultyLocation_getPlaceId() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJrY4IlPka2jERhqeUbnzFVKY\", EmbedGoogleMaps.getPlaceId(\"SDE\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJfyddcgMa2jER6C0WKzLdP6w\", EmbedGoogleMaps.getPlaceId(\"FOL\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJSejKW_Ya2jER9bHfrr9sA-c\", EmbedGoogleMaps.getPlaceId(\"YSTCOM\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJx_aDLFEa2jERvhbP1ACc2t8\", EmbedGoogleMaps.getPlaceId(\"YLLSOM\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJW-fkx_ga2jERSjkkKeJjaUM\", EmbedGoogleMaps.getPlaceId(\"SOC\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJSfKZ6VYa2jERnuNsDKZ8moU\", EmbedGoogleMaps.getPlaceId(\"FOS\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJQ91DPvca2jERARhJO1i77Cg\", EmbedGoogleMaps.getPlaceId(\"FOE\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJk315cv8a2jERyoLIHsKS40Y\", EmbedGoogleMaps.getPlaceId(\"BIZ\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJadpVLvka2jERHq8cT_xdGVQ\", EmbedGoogleMaps.getPlaceId(\"FASS\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"ChIJcUayaFEa2jERVJ-bhaQxjmk\", EmbedGoogleMaps.getPlaceId(\"FOD\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    void getMeetingPlaceId() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertNotEquals(null, EmbedGoogleMaps.getMeetingPlaceId()); // a null value should never be returned"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.APPOINTMENT_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_validCommandAlias_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD_ALIAS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getUnfilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logic.getUnfilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logic.getFilteredEventList().add(new ScheduledEventBuilder().build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getEventTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        logic.getEventTagList().add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 27,
      "-": 124
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void importContacts(FileReader fileReader) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cTag\u003e getEventTagList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateNotificationPref(boolean set) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(String favourite) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(Event favourite) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean getNotificationPref() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public String getFavourite() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean isFavourite(Event event) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void indicateTabPanelSelectionChangedEvent() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 35,
      "kaitingpeck": 64,
      "-": 208,
      "cjiefeng": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CONTACT_INDEX_1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts(ALICE).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.addEvent(validEvent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new AddEventCommand(validEvent, new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1))))), model, commandHistory,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventInList \u003d model.getAddressBook().getEventList().get(0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new AddEventCommand(eventInList, new HashSet\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1))))), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NONEXISTENT_EVENT_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CONTACT_INDEX_1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CONTACT_INDEX_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.APPOINTMENT_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MEETING_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) for adding events including"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * persons in address book, and unit tests for"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * {@code AddEventCommand}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        new AddEventCommand(null, null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_eventAcceptedByModelNoContacts_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e contactIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent, contactIndices)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_eventAcceptedByModelWithContacts_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts(ALICE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e contactIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactIndices.add(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1)));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent, contactIndices)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_eventAcceptedByModelWithMultipleContacts_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts(ALICE, BOB).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e contactIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactIndices.add(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactIndices.add(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_2)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent, contactIndices)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_eventAcceptedByModelWithTag_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventTags(VALID_TAG_APPOINTMENT).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e contactIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent, contactIndices)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_eventAcceptedByModelWithMultipleTags_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventTags(VALID_TAG_APPOINTMENT, VALID_TAG_MEETING).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e contactIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        CommandResult commandResult \u003d new AddEventCommand(validEvent, contactIndices)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_contactsValidIndexUnfilteredList_addSuccessful() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person eventContact \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToAdd \u003d new ScheduledEventBuilder().withEventContacts(eventContact).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts().build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON)));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, eventToAdd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.addEvent(eventToAdd);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(addEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_contactsInvalidIndexUnfilteredList_addSuccessful() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(outOfBoundIndex)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(addEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_contactsValidIndexFilteredList_addSuccessful() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person eventContact \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToAdd \u003d new ScheduledEventBuilder().withEventContacts(eventContact).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts().build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(AddEventCommand.MESSAGE_SUCCESS, eventToAdd);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.addEvent(eventToAdd);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showPersonAtIndex(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(addEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_nonExistentTag_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventAdded modelStub \u003d new ModelStubAcceptingEventAdded();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventTags(NONEXISTENT_EVENT_TAG).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e contactIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent, contactIndices);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(addEventCommand, model, commandHistory, String.format(Messages.MESSAGE_NONEXISTENT_TAG,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(new Tag(NONEXISTENT_EVENT_TAG)))));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_contactsInvalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts().build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(outOfBoundIndex)));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(addEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_duplicateEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(AddEventCommand.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addEventCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_clashingEvent_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEvent(validEvent);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1210\")"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1410\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(clashingEvent, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(AddEventCommand.MESSAGE_CLASHING_EVENT);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addEventCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_contactValidIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person eventContact \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToAdd \u003d new ScheduledEventBuilder().withEventContacts(eventContact).build();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts().build();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON)));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.addEvent(eventToAdd);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addEventCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts().build();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(outOfBoundIndex)));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(addEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 1. Add an event with a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 2. Undo the addition of event."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 3. Show the unfiltered list."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previous person added in the event in"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * the unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 4. Redo the addition. This ensures {@code RedoCommand} adds the same person object as an event contact,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * regardless of indexing."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEventAdded() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event validEvent \u003d new ScheduledEventBuilder().withEventContacts().build();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addEventCommand \u003d new AddEventCommand(validEvent,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(INDEX_FIRST_PERSON)));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // adds the second person as an eventContact"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person eventContact \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToAdd \u003d new ScheduledEventBuilder().withEventContacts(eventContact).build();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.addEvent(eventToAdd);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // addEventCommand -\u003e adds an event with the second person in unfiltered person list / first person in"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // filtered person list as an eventContact"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addEventCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventContact, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e adds an event with the same second person in unfiltered person list"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event firstEvent \u003d new ScheduledEventBuilder().withEventName(\"event\").build();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event secondEvent \u003d new ScheduledEventBuilder().withEventName(\"a different event\").build();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addFirstEventCommand \u003d new AddEventCommand(firstEvent,"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1)))));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addSecondEventCommand \u003d new AddEventCommand(secondEvent,"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1)))));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addFirstEventCommand.equals(addFirstEventCommand));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand addFirstEventCommandCopy \u003d new AddEventCommand(firstEvent,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1)))));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addFirstEventCommand.equals(addFirstEventCommandCopy));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addFirstEventCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addFirstEventCommand.equals(null));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addFirstEventCommand.equals(addSecondEventCommand));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void importContacts(FileReader fileReader) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cTag\u003e getEventTagList() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateNotificationPref(boolean set) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean getNotificationPref() {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(String favourite) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(Event favourite) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean isFavourite(Event event) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public String getFavourite() {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void indicateTabPanelSelectionChangedEvent() {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStubWithEvent extends ModelStub {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        private final Event event;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubWithEvent(Event event) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            this.event \u003d event;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return this.event.isSameEvent(event);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return this.event.isClashingEvent(event);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStubAcceptingEventAdded extends ModelStub {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e(Arrays.asList(ALICE, BOB));"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final ArrayList\u003cTag\u003e eventTagsAdded \u003d new ArrayList\u003c\u003e(Arrays.asList(APPOINTMENT_TAG, MEETING_TAG));"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isSameEvent);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEventTag(Tag tag) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return eventTagsAdded.stream().anyMatch(tag::isSameTag);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return eventsAdded.stream().anyMatch(event::isClashingEvent);"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ObservableList\u003cPerson\u003e personObservableList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            personObservableList.addAll(personsAdded);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return personObservableList;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(event);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            eventsAdded.add(event);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            // called by {@code AddEventCommand#execute()}"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 35,
      "kaitingpeck": 567,
      "cjiefeng": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddEventTagCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.APPOINTMENT_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Contains unit tests for {@code AddEventTagCommand}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventTagCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_nullEventTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        new AddEventTagCommand(null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_eventTagAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventTagAdded modelStub \u003d new ModelStubAcceptingEventTagAdded();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e validEventTags \u003d new HashSet\u003c\u003e(Arrays.asList(APPOINTMENT_TAG));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        CommandResult commandResult \u003d new AddEventTagCommand(validEventTags).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(String.format(AddEventTagCommand.MESSAGE_SUCCESS, validEventTags), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(validEventTags), modelStub.eventTagsAdded);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_duplicateEventTags_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e validTags \u003d new HashSet\u003c\u003e(Arrays.asList(APPOINTMENT_TAG));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventTagCommand addEventTagCommand \u003d new AddEventTagCommand(validTags);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithEventTag(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(String.format(AddEventTagCommand.MESSAGE_DUPLICATE_TAG,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(APPOINTMENT_TAG))));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addEventTagCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_emptyEventTags_success() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubAcceptingEventTagAdded modelStub \u003d new ModelStubAcceptingEventTagAdded();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e validEventTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        CommandResult commandResult \u003d new AddEventTagCommand(validEventTags).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(String.format(AddEventTagCommand.MESSAGE_SUCCESS, validEventTags), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(validEventTags), modelStub.eventTagsAdded);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag appointmentTag \u003d new Tag(VALID_TAG_APPOINTMENT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag meetingTag \u003d new Tag(VALID_TAG_MEETING);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventTagCommand addAppointmentTagCommand \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventTagCommand(new HashSet\u003c\u003e(Arrays.asList(appointmentTag)));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventTagCommand addMeetingTagCommand \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventTagCommand(new HashSet\u003c\u003e(Arrays.asList(meetingTag)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addAppointmentTagCommand.equals(addAppointmentTagCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventTagCommand addAppointmentagCommandCopy \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventTagCommand(new HashSet\u003c\u003e(Arrays.asList(appointmentTag)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addAppointmentTagCommand.equals(addAppointmentagCommandCopy));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addAppointmentagCommandCopy.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addAppointmentagCommandCopy.equals(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addAppointmentagCommandCopy.equals(addMeetingTagCommand));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void importContacts(FileReader fileReader) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cTag\u003e getEventTagList() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateNotificationPref(boolean set) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(String favourite) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(Event favourite) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean getNotificationPref() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public String getFavourite() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean isFavourite(Event event) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void indicateTabPanelSelectionChangedEvent() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A Model stub that contains a single event tag."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStubWithEventTag extends AddEventTagCommandTest.ModelStub {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        private final Tag tag;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelStubWithEventTag(Tag tag) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEventTag(Tag tag) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return this.tag.isSameTag(tag);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A Model stub that always accept the event tag being added."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private class ModelStubAcceptingEventTagAdded extends AddEventTagCommandTest.ModelStub {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final ArrayList\u003cTag\u003e eventTagsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public boolean hasEventTag(Tag tag) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return eventTagsAdded.stream().anyMatch(tag::isSameTag);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void addEventTag(Tag tag) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            eventTagsAdded.add(tag);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            // called by {@code AddEventTagCommand#execute()}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 35,
      "kaitingpeck": 294,
      "cjiefeng": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String VALID_FACULTY \u003d \"SOC\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String FACULTY_DESC \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String INVALID_FACULTY_DESC \u003d \" \" + PREFIX_FACULTY + \"law\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // Events"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String CLASHING_EVENT_START_TIME_DOCTORAPPT \u003d \"1410\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String CLASHING_EVENT_END_TIME_DOCTORAPPT \u003d \"1440\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_NAME_DOCTORAPPT \u003d \"Doctor appointment\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_NAME_MEETING \u003d \"Meeting\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_DESC_DOCTORAPPT \u003d \"Consultation\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_DESC_MEETING \u003d \"Group meeting desc\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_DATE_DOCTORAPPT \u003d \"2018-09-01\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_DATE_MEETING \u003d \"2018-09-09\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_START_TIME_DOCTORAPPT \u003d \"1400\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_START_TIME_MEETING \u003d \"0900\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_END_TIME_DOCTORAPPT \u003d \"1500\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_END_TIME_MEETING \u003d \"1200\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_ADDRESS_DOCTORAPPT \u003d \"Blk 312, Amy Street 1\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_ADDRESS_MEETING \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_CONTACT_INDEX_1 \u003d \"1\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_EVENT_CONTACT_INDEX_2 \u003d \"2\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_END_TIME_TOO_EARLY_DOCTORAPPT \u003d \"0800\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_TAG_APPOINTMENT \u003d \"Appointment\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String VALID_TAG_MEETING \u003d \"Meeting\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String TAG_DESC_APPOINTMENT \u003d \" \" + PREFIX_TAG + VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String TAG_DESC_MEETING \u003d \" \" + PREFIX_TAG + VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_NAME_DESC_DOCTORAPPT \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_DOCTORAPPT;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_NAME_DESC_MEETING \u003d \" \" + PREFIX_NAME + VALID_EVENT_NAME_MEETING;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_DESC_DESC_DOCTORAPPT \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_EVENT_DESCRIPTION + VALID_EVENT_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_DESC_DESC_MEETING \u003d \" \" + PREFIX_EVENT_DESCRIPTION + VALID_EVENT_DESC_MEETING;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_DATE_DESC_DOCTORAPPT \u003d \" \" + PREFIX_DATE + VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_DATE_DESC_MEETING \u003d \" \" + PREFIX_DATE + VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_START_TIME_DESC_DOCTORAPPT \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_START_TIME + VALID_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_START_TIME_DESC_MEETING \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_START_TIME + VALID_EVENT_START_TIME_MEETING;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_END_TIME_DESC_DOCTORAPPT \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_END_TIME + VALID_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_END_TIME_DESC_MEETING \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_END_TIME + VALID_EVENT_END_TIME_MEETING;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_ADDRESS_DESC_DOCTORAPPT \u003d \" \" + PREFIX_ADDRESS + VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_ADDRESS_DESC_MEETING \u003d \" \" + PREFIX_ADDRESS + VALID_EVENT_ADDRESS_MEETING;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_CONTACT_INDEX_DESC_DOCTORAPPT \u003d \" \" + PREFIX_INDEX + VALID_EVENT_CONTACT_INDEX_1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_CONTACT_INDEX_DESC_MEETING \u003d \" \" + PREFIX_INDEX + VALID_EVENT_CONTACT_INDEX_2;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_TAG_DESC_DOCTORAPPT \u003d \" \" + PREFIX_TAG + VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_TAG_DESC_MEETING \u003d \" \" + PREFIX_TAG + VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Consultation-\"; // - not allowed"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_DESC_DESC \u003d \" \" + PREFIX_EVENT_DESCRIPTION + \"Important*\"; // * not allowed"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2018-09-32\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"12:00\"; // colon not allowed"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"13:00\"; // colon not allowed"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_END_TIME_TOO_EARLY_DESC \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \" \" + PREFIX_END_TIME + INVALID_EVENT_END_TIME_TOO_EARLY_DOCTORAPPT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String INVALID_EVENT_CONTACT_INDEX \u003d \" \" + PREFIX_INDEX + \"-1\"; // contact index negative"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_FIRST_INDEX_DESC \u003d \" \" + PREFIX_INDEX + INDEX_FIRST_EVENT.getOneBased();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_SECOND_INDEX_DESC \u003d \" \" + PREFIX_INDEX + INDEX_SECOND_EVENT.getOneBased();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String EVENT_INVALID_INDEX_DESC \u003d \" \" + PREFIX_INDEX + \"-1\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String NONEXISTENT_EVENT_TAG \u003d \"Class\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String INVALID_NOTIFICATION_PARAMETER \u003d \"set\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public static final String VALID_DISABLE_NOTIFICATION_PARAMETER \u003d \"disable\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    // Import contacts"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String FILE_DESC \u003d \" \" + PREFIX_FILE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\r  \\t  \\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the event at the given {@code targetDate} and {@code"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * targetIndex} in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static void showEventAtDateAndIndex(Model model, Index targetIndex, EventDate targetDate) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(model.getFilteredEventListByDate().stream()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .anyMatch(list -\u003e list.get(0).getEventDate().equals(targetDate)));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cList\u003cEvent\u003e\u003e eventList \u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                model.getFilteredEventListByDate().stream()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .filter(list -\u003e list.get(0).getEventDate().equals(targetDate))"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventList.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c eventList.get(0).size());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d eventList.get(0).get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        final String[] splitName \u003d event.getEventName().eventName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(new EventNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(1, model.getFilteredEventList().size());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(1, model.getFilteredEventListByDate().size());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(1, model.getFilteredEventListByDate().get(0).size());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds the input {@code event} into the filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static void addNewEvent(Event event, Model model) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.addEvent(event);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 4,
      "ryantanwk": 3,
      "kaitingpeck": 112,
      "-": 140,
      "cjiefeng": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtDateAndIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * {@code DeleteEventCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class DeleteEventCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(deleteEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidDateOrIndexIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // checks for both inputs to DeleteEventCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(\"2019-12-31\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundDate, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // meeting is top of event list by date (latest date first)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventListByDate().get(0).size() + 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        deleteEventCommand \u003d new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                outOfBoundIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_validDateAndIndexFilteredList_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_SECOND_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteEventCommand.MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showNoEvent(expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(deleteEventCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidDateFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(VALID_EVENT_DATE_DOCTORAPPT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // ensures that outOfBoundDate is still in bounds of address book list (unfiltered)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(model.getAddressBook().getEventList().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .anyMatch(event -\u003e event.getEventDate().equals(outOfBoundDate)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundDate, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                outOfBoundIndex);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_validDateAndIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // eventToDelete \u003d MEETING"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // delete -\u003e first event deleted"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        deleteEventCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered event list (by date) to show all events"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e same first event deleted again"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_invalidDateUnfilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(\"2019-12-31\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(outOfBoundDate, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                outOfBoundIndex);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(deleteEventCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 1. Deletes an {@code Event} from a filtered list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted event in the"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the same event object regardless of indexing."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEventDeleted() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteEventCommand \u003d new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_SECOND_EVENT, new EventDate(VALID_EVENT_DATE_MEETING)); // DINNER event"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToDelete \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.deleteEvent(eventToDelete);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // delete -\u003e deletes second event in unfiltered event list / first event in filtered event list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        deleteEventCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventToDelete, model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e deletes same second event in unfiltered event list"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteFirstCommand \u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteDifferentDateCommand \u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_MEETING), INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteDifferentIndexCommand \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand deleteFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event date -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteDifferentDateCommand));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event index -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteDifferentIndexCommand));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void showNoEvent(Model model) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredEventList(p -\u003e false);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(model.getFilteredEventList().isEmpty());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 233
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditEventAddressCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtDateAndIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * {@code EditEventAddressCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EditEventAddressCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToEdit \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedEvent \u003d new ScheduledEventBuilder(eventToEdit)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventAddress updatedAddress \u003d editedEvent.getEventAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT, updatedAddress);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(editEventAddressCommand.MESSAGE_EDIT_EVENT_ADDRESS_SUCCESS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                eventToEdit.getEventName(), updatedAddress);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(editEventAddressCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidDateOrIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // checks for date and index inputs to EditEventAddressCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(\"2019-12-31\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(outOfBoundDate, INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(editEventAddressCommand, model, commandHistory,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // meeting is top of event list by date (latest date first)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventListByDate().get(0).size() + 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editEventAddressCommand \u003d new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                outOfBoundIndex, new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(editEventAddressCommand, model, commandHistory,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_validDateAndIndexFilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_DOCTORAPPT));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToEdit \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedEvent \u003d new ScheduledEventBuilder(eventToEdit)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(VALID_EVENT_ADDRESS_MEETING)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventAddress updatedAddress \u003d editedEvent.getEventAddress();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT, updatedAddress);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(EditEventAddressCommand.MESSAGE_EDIT_EVENT_ADDRESS_SUCCESS,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                eventToEdit.getEventName(), updatedAddress);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(editEventAddressCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidDateFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(VALID_EVENT_DATE_DOCTORAPPT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // ensures that outOfBoundDate is still in bounds of address book list (unfiltered)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(model.getAddressBook().getEventList().stream()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .anyMatch(event -\u003e event.getEventDate().equals(outOfBoundDate)));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(outOfBoundDate, INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(editEventAddressCommand, model, commandHistory,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                outOfBoundIndex, new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(editEventAddressCommand, model, commandHistory,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_validDateAndIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // eventToEdit \u003d MEETING"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToEdit \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedEvent \u003d new ScheduledEventBuilder(eventToEdit)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT, editedEvent.getEventAddress());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // delete -\u003e first event deleted"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editEventAddressCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered event list (by date) to show all events"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e same first event deleted again"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_invalidDateUnfilteredList_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(\"2019-12-31\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(outOfBoundDate, INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(editEventAddressCommand, model, commandHistory,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventList().size() + 1);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                outOfBoundIndex, new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(editEventAddressCommand, model, commandHistory,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 1. Edits an {@code Event}\u0027s address from a filtered list."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited event in the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} edits the address of the same event object regardless"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * of indexing."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameEventDeleted() throws Exception {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_SECOND_EVENT, new EventDate(VALID_EVENT_DATE_MEETING)); // DINNER event"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event eventToEdit \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedEvent \u003d new ScheduledEventBuilder(eventToEdit)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editEventAddressCommand \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INDEX_FIRST_EVENT, editedEvent.getEventAddress());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateEvent(eventToEdit, editedEvent);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // delete -\u003e deletes second event in unfiltered event list / first event in filtered event list"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editEventAddressCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered event list to show all events"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventToEdit, model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased()));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e deletes same second event in unfiltered event list"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editFirstCommand \u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editDifferentDateCommand \u003d"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_MEETING), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editDifferentIndexCommand \u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_SECOND_EVENT,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editFDifferentAddressCommand \u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_MEETING));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommand));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand editFirstCommandCopy \u003d"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(editFirstCommand.equals(editFirstCommandCopy));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(editFirstCommand.equals(1));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(editFirstCommand.equals(null));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(editFirstCommand.equals(editDifferentDateCommand));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(editFirstCommand.equals(editDifferentIndexCommand));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(editFirstCommand.equals(editFDifferentAddressCommand));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 276
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FavouriteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.FavouriteCommand.MESSAGE_FAVOURITE_EVENT_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * {@code FavouriteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class FavouriteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void execute_validEvent_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Event favouriteEvent \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FAVOURITE_EVENT_SUCCESS"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + favouriteEvent.getEventName() + \" on \" + favouriteEvent.getEventDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.updateFavourite(favouriteEvent);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandSuccess(favouriteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void execute_invalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventListByDate().get(0).size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandFailure(favouriteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void execute_invalidDate_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(\"2019-12-31\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        FavouriteCommand favouriteCommand \u003d new FavouriteCommand(outOfBoundDate, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandFailure(favouriteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void executeUndoRedo_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Event favouriteEvent \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.updateFavourite(favouriteEvent);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.updateFavourite(favouriteEvent);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // redo -\u003e same boolean value set as notificationPref"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EVENTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTagMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindEventCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class FindEventCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_zeroKeywords_noEventsFound() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EVENTS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredEventList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_multipleKeywords_multipleEventsFound() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EVENTS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate predicate \u003d preparePredicate(\"Meeting Appointment\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindEventCommand command \u003d new FindEventCommand(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredEventList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(DOCTORAPPT, MEETING), model.getFilteredEventList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses {@code userInput} into a {@code EventTagMatchesKeywordsPredicate}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventTagMatchesKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new EventTagMatchesKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventTagMatchesKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventTagMatchesKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindEventCommand findFirstCommand \u003d new FindEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindEventCommand findSecondCommand \u003d new FindEventCommand(secondPredicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindEventCommand findFirstCommandCopy \u003d new FindEventCommand(firstPredicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GenerateLocationCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.RandomMeetingLocationGeneratedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "class GenerateLocationCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final Index EXISTENT_INDEX \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final Index NON_EXISTENT_INDEX \u003d Index.fromOneBased(999);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final EventDate TEST_EVENT_DATE \u003d new EventDate(VALID_EVENT_DATE_DOCTORAPPT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void execute_validDateInvalidIndexLocationNotDisplayed_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertGenerateLocationDisplayFailure(TEST_EVENT_DATE, NON_EXISTENT_INDEX,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                GenerateLocationCommand.MESSAGE_EVENT_DOES_NOT_EXIST);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void execute_validDateValidIndexLocationDisplayed_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertGenerateLocationDisplaySuccess(TEST_EVENT_DATE, EXISTENT_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        GenerateLocationCommand generateLocationFirstCommand \u003d new GenerateLocationCommand(TEST_EVENT_DATE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        GenerateLocationCommand generateLocationSecondCommand \u003d new GenerateLocationCommand(TEST_EVENT_DATE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(generateLocationFirstCommand.equals(generateLocationFirstCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // same index values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        GenerateLocationCommand generateLocationFirstCommandCopy \u003d new GenerateLocationCommand(TEST_EVENT_DATE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(generateLocationFirstCommand.equals(generateLocationFirstCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(generateLocationFirstCommand.equals(\"hello\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(generateLocationFirstCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // different index (therefore different person) -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(generateLocationFirstCommand.equals(generateLocationSecondCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Executes a {@code GenerateLocationCommand} with given incorrect{@code index} but correct {@code eventDate},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * and checks that a {@code CommandException} is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void assertGenerateLocationDisplayFailure(EventDate eventDate, Index index,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                                                      String expectedMessage) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        GenerateLocationCommand generateLocationCommand \u003d new GenerateLocationCommand(eventDate, index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertCommandFailure(generateLocationCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Executes a {@code GenerateLocationCommand} with the given correct {@code index} and {@code eventDate},"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * and checks that {@code RandomMeetingLocationGeneratedEvent} is raised."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void assertGenerateLocationDisplaySuccess(EventDate eventDate, Index index) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        GenerateLocationCommand generateLocationCommand \u003d new GenerateLocationCommand(eventDate, index);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String expectedMessage \u003d generateLocationCommand.createFinalSuccessMessage(VALID_EVENT_NAME_DOCTORAPPT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertCommandSuccess(generateLocationCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        RandomMeetingLocationGeneratedEvent latestEvent \u003d (RandomMeetingLocationGeneratedEvent)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(\"RandomMeetingLocationGeneratedEvent\", latestEvent.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportContactsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.FileReaderBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class ImportContactsCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void execute_importContactsCommand() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FileReader fileReader \u003d new FileReaderBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        ModelStubForFileReader modelStub \u003d new ModelStubForFileReader(fileReader);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        CommandResult commandResult \u003d new ImportContactsCommand(fileReader).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertEquals(String.format(ImportContactsCommand.MESSAGE_SUCCESS, fileReader.getAddContactStatus()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertEquals(fileReader, modelStub.fileReader);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void addEvent(Event event) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public boolean hasEvent(Event event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void importContacts(FileReader fileReader) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public boolean hasClashingEvent(Event event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void deleteEvent(Event target) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public boolean hasEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void addEventTag(Tag eventTag) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public void updateEvent(Event target, Event editedEvent) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public ObservableList\u003cPerson\u003e getUnfilteredPersonList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public ObservableList\u003cEvent\u003e getFilteredEventList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public ObservableList\u003cList\u003cEvent\u003e\u003e getFilteredEventListByDate() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void updateFilteredEventList(Predicate\u003cEvent\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public ObservableList\u003cTag\u003e getEventTagList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateNotificationPref(boolean set) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(String favourite) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(Event favourite) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean getNotificationPref() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public String getFavourite() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean isFavourite(Event event) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void indicateTabPanelSelectionChangedEvent() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private class ModelStubForFileReader extends ModelStub {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        private FileReader fileReader;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public ModelStubForFileReader(FileReader fileReader) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            requireNonNull(fileReader);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void importContacts(FileReader fileReader) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            this.fileReader \u003d fileReader;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            // called by {@code ImportContactsCommand#execute()}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 35,
      "kaitingpeck": 5,
      "cjiefeng": 198
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListEventCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtDateAndIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class ListEventCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_eventListIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new ListEventCommand(), model, commandHistory, ListEventCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new ListEventCommand(), model, commandHistory, ListEventCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NotificationCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * {@code NotificationCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class NotificationCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void execute_disableNotification_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        NotificationCommand notificationCommand \u003d new NotificationCommand(false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        String expectedMessage \u003d String.format(NotificationCommand.MESSAGE_NOTIFICATION_DISABLED_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.updateNotificationPref(false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandSuccess(notificationCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void execute_enableNotification_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        NotificationCommand notificationCommand \u003d new NotificationCommand(true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        String expectedMessage \u003d String.format(NotificationCommand.MESSAGE_NOTIFICATION_ENABLED_SUCCESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.updateNotificationPref(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandSuccess(notificationCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void executeUndoRedo_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.updateNotificationPref(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.updateNotificationPref(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // redo -\u003e same boolean value set as notificationPref"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.addNewEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CLASS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addNewEvent(CLASS, model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addNewEvent(CLASS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 4,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SeeEventContactsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showEventAtDateAndIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.ExistingPersonInEventPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * {@code SeeEventContactsCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class SeeEventContactsCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e eventContacts \u003d event.getEventContacts();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate predicate \u003d new ExistingPersonInEventPredicate(eventContacts);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(SeeEventContactsCommand.MESSAGE_CONTACTS_LISTED_OVERVIEW, event.getEventName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(eventContacts), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidDateOrIndexIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // checks for both inputs to the command"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(\"2019-12-31\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(outOfBoundDate, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(command, model, commandHistory,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // meeting is top of event list by date (latest date first)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredEventListByDate().get(0).size() + 1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        command \u003d new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(command, model, commandHistory,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_validDateAndIndexFilteredList_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // shows event MEETING"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e eventContacts \u003d event.getEventContacts();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate predicate \u003d new ExistingPersonInEventPredicate(eventContacts);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(SeeEventContactsCommand.MESSAGE_CONTACTS_LISTED_OVERVIEW, event.getEventName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(expectedModel, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(eventContacts), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidDateFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDate outOfBoundDate \u003d new EventDate(VALID_EVENT_DATE_DOCTORAPPT);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // ensures that outOfBoundDate is still in bounds of address book list (unfiltered)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(model.getAddressBook().getEventList().stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .anyMatch(event -\u003e event.getEventDate().equals(outOfBoundDate)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d new SeeEventContactsCommand(outOfBoundDate, INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_DATE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showEventAtDateAndIndex(model, INDEX_FIRST_EVENT, new EventDate(VALID_EVENT_DATE_MEETING));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EVENT;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getEventList().size());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                outOfBoundIndex);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandFailure(command, model, commandHistory, Messages.MESSAGE_INVALID_EVENT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_personDeleted_emptyPersonListShown() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(SeeEventContactsCommand.MESSAGE_CONTACTS_LISTED_OVERVIEW, event.getEventName());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // delete all contacts of this event"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e eventContacts \u003d event.getEventContacts();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventContacts.stream().forEach(contact -\u003e model.deletePerson(contact));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventContacts.stream().forEach(contact -\u003e expectedModel.deletePerson(contact));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void execute_personEdited_editedPersonShown() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e eventContacts \u003d event.getEventContacts();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventContacts.size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // edit person in eventContacts"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person contactToEdit \u003d new ArrayList\u003c\u003e(eventContacts).get(0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person editedContact \u003d new PersonBuilder(contactToEdit).withEmail(\"newemail@gmail.com\").build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(SeeEventContactsCommand.MESSAGE_CONTACTS_LISTED_OVERVIEW, event.getEventName());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // edit contact"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updatePerson(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updatePerson(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(person -\u003e person.equals(editedContact));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(Arrays.asList(editedContact)), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 1. Gets the event contact (size 1) of an {@code Event} from an unfiltered list."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 2. Deletes the event contact."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 3. Check that no event contacts shown when command is executed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 4. Undo the deletion."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 5. Check that event contact is shown again."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 6. Redo the deletion."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 7. Check that no event contacts shown when command is executed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_personDeleted_emptyPersonListShown() throws Exception {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e eventContacts \u003d event.getEventContacts();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate predicate \u003d new ExistingPersonInEventPredicate(eventContacts);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person contactToDelete \u003d new ArrayList\u003c\u003e(eventContacts).get(0);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(SeeEventContactsCommand.MESSAGE_CONTACTS_LISTED_OVERVIEW, event.getEventName());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is shown upon command execution"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(eventContacts), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // delete the only contact of this event in the filtered list with only this contact"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredPersonList(person -\u003e person.isSamePerson(contactToDelete));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.deletePerson(contactToDelete);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that no contact is shown upon command execution"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is shown once again upon command execution"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(eventContacts), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e deletes same contact in unfiltered person list"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is no longer shown upon command execution"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 1. Gets the event contact (size 1) of an {@code Event} from an unfiltered list."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 2. Edit the event contact (edited contact is still same person as original contact but with different info)."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 3. Check that event contact is shown when command is executed."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 4. Undo the edit."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 5. Check that event contact is still shown."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 6. Redo the edit."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 7. Check that event contact is shown when command is executed."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_personEditedToSamePerson_contactShown() throws Exception {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e eventContacts \u003d event.getEventContacts();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate predicate \u003d new ExistingPersonInEventPredicate(eventContacts);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // create edited contact"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person contactToEdit \u003d new ArrayList\u003c\u003e(eventContacts).get(0);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(contactToEdit)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEmail(\"newemail@gmail.com\")"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person editedContact \u003d new PersonBuilder(contactToEdit).withEmail(\"newemail@gmail.com\").build();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(SeeEventContactsCommand.MESSAGE_CONTACTS_LISTED_OVERVIEW, event.getEventName());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is shown upon command execution"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(eventContacts), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // edit the only contact of this event in the filtered list with only this contact"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredPersonList(person -\u003e person.isSamePerson(contactToEdit));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updatePerson(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that edited contact is shown upon command execution"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(editedContact), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is shown once again upon command execution"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(eventContacts), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e edits same contact in unfiltered person list"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is shown upon command execution"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Arrays.asList(editedContact), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 1. Gets the event contact (size 1) of an {@code Event} from an unfiltered list."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 2. Edit the event contact (edited contact is different person from original contact)."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 3. Check that event contact is shown when command is executed."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 4. Undo the edit."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 5. Check that event contact is still shown."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 6. Redo the edit."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * 7. Check that event contact is shown when command is executed."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void executeUndoRedo_personEditedToDifferentPerson_noContactShown() throws Exception {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d model.getFilteredEventListByDate().get(0).get(INDEX_FIRST_EVENT.getZeroBased());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e eventContacts \u003d event.getEventContacts();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate predicate \u003d new ExistingPersonInEventPredicate(eventContacts);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // create edited contact"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person contactToEdit \u003d new ArrayList\u003c\u003e(eventContacts).get(0);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(contactToEdit)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withName(\"Different Name\")"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person editedContact \u003d new PersonBuilder(contactToEdit).withName(\"Different Name\").build();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING),"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(SeeEventContactsCommand.MESSAGE_CONTACTS_LISTED_OVERVIEW, event.getEventName());"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is shown upon command execution"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(eventContacts), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // edit the only contact of this event in the filtered list with only this contact"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredPersonList(person -\u003e person.isSamePerson(contactToEdit));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updatePerson(contactToEdit, editedContact);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that no contacts shown upon command execution"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is shown once again upon command execution"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new ArrayList\u003c\u003e(eventContacts), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // redo -\u003e edits same contact in unfiltered person list"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // check that contact is shown upon command execution"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand differentDateCommand \u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_MEETING), INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand differentIndexCommand \u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_SECOND_EVENT);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand commandCopy \u003d"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(command.equals(commandCopy));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(command.equals(1));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(command.equals(null));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event date -\u003e returns false"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(command.equals(differentDateCommand));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event index -\u003e returns false"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(command.equals(differentIndexCommand));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 435
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ShowLocationCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.commons.events.ui.FacultyLocationDisplayChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "class ShowLocationCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void execute_validIndexLocationDisplayed_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        int personListLength \u003d model.getFilteredPersonList().size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        for (int i \u003d 0; i \u003c personListLength; i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            Index validPersonIndex \u003d Index.fromZeroBased(i);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            assertFacultyLocationDisplaySuccess(validPersonIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void execute_invalidIndexLocationNotDisplayed_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Index invalidPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFacultyLocationDisplayFailure(invalidPersonIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        ShowLocationCommand showLocationFirstCommand \u003d new ShowLocationCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        ShowLocationCommand showLocationSecondCommand \u003d new ShowLocationCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(showLocationFirstCommand.equals(showLocationFirstCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // same index values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        ShowLocationCommand showLocationFirstCommandCopy \u003d new ShowLocationCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(showLocationFirstCommand.equals(showLocationFirstCommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(showLocationFirstCommand.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(showLocationFirstCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // different index (therefore different person) -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(showLocationFirstCommand.equals(showLocationSecondCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Executes a {@code ShowLocationCommand} with the given invalid {@code index}, and checks that"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * a {@code CommandException} is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void assertFacultyLocationDisplayFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        ShowLocationCommand showLocationCommand \u003d new ShowLocationCommand(index);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertCommandFailure(showLocationCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Executes a {@code ShowLocationCommand} with the given {@code index}, and checks that"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * {@code FacultyLocationDisplayChangedEvent} is raised with the correct person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private void assertFacultyLocationDisplaySuccess(Index index) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        ShowLocationCommand showLocationCommand \u003d new ShowLocationCommand(index);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String expectedMessage \u003d String.format(ShowLocationCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertCommandSuccess(showLocationCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        FacultyLocationDisplayChangedEvent latestEvent \u003d (FacultyLocationDisplayChangedEvent)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertEquals(person, latestEvent.getSelectedPerson());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.addNewEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.CLASS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addNewEvent(CLASS, model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addNewEvent(CLASS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 5,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).withFaculty(VALID_FACULTY).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACULTY_DESC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACULTY_DESC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACULTY_DESC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACULTY_DESC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + FACULTY_DESC, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                        + FACULTY_DESC,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND + FACULTY_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // invalid faculty"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + VALID_TAG_FRIEND + INVALID_FACULTY_DESC, Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + FACULTY_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + FACULTY_DESC,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 25,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDRESS_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDRESS_DESC_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_CONTACT_INDEX_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_CONTACT_INDEX_DESC_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESC_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DESC_DESC_MEETING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_END_TIME_DESC_MEETING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_MEETING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_START_TIME_DESC_MEETING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_TAG_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_TAG_DESC_MEETING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_ADDRESS_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_CONTACT_INDEX;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DESC_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_TOO_EARLY_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_END_TIME_TOO_EARLY_DOCTORAPPT;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_START_TIME_DESC;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CONTACT_INDEX_1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CONTACT_INDEX_2;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_DOCTORAPPT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.AddEventCommandParser.MESSAGE_INVALID_START_END_TIME;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final Event defaultEvent \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event expectedEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags(VALID_TAG_APPOINTMENT)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventContacts().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e expectedIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedIndices.add(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple names - only the last name accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_MEETING + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple event descriptions - only the last description accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_MEETING + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_MEETING + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple times - last start time accepted"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_MEETING"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple times - last end time accepted"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_MEETING + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_MEETING + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple indices - all accepted"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedIndices.add(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_2)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_MEETING + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_CONTACT_INDEX_DESC_MEETING"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event expectedEventMultipleTags \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags(VALID_TAG_APPOINTMENT, VALID_TAG_MEETING)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventContacts() // event is not created with any contacts in parser"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_MEETING + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT + EVENT_CONTACT_INDEX_DESC_MEETING"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_TAG_DESC_DOCTORAPPT + EVENT_TAG_DESC_MEETING,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEventMultipleTags, expectedIndices));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // zero indices"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event expectedEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags(VALID_TAG_APPOINTMENT)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventContacts()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT + EVENT_TAG_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // zero event tags"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventContacts()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cIndex\u003e expectedIndices \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedIndices.add(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, expectedIndices));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // zero event addresses"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(\"TBD\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventContacts()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventCommand(expectedEvent, new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event name prefix"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                VALID_EVENT_NAME_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event description prefix"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + VALID_EVENT_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event date prefix"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + VALID_EVENT_DATE_DOCTORAPPT"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event start time prefix"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + VALID_EVENT_START_TIME_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing event end time prefix"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_START_TIME_DESC_DOCTORAPPT + VALID_EVENT_END_TIME_DOCTORAPPT"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                VALID_EVENT_NAME_DOCTORAPPT + VALID_EVENT_DESC_DOCTORAPPT + VALID_EVENT_DATE_DOCTORAPPT"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + VALID_EVENT_START_TIME_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + VALID_EVENT_ADDRESS_DOCTORAPPT,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid event name"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT + EVENT_CONTACT_INDEX_DESC_MEETING,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid event description"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + INVALID_EVENT_DESC_DESC"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT + EVENT_CONTACT_INDEX_DESC_MEETING,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDescription.MESSAGE_DESCRIPTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_DATE_DESC + EVENT_START_TIME_DESC_DOCTORAPPT + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT + EVENT_CONTACT_INDEX_DESC_MEETING,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid start time (format-wise)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + INVALID_EVENT_START_TIME_DESC + EVENT_END_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT + EVENT_CONTACT_INDEX_DESC_MEETING,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid end time (format-wise)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_END_TIME_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_MEETING,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventTime.MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid end time (end time earlier than start time)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_END_TIME_TOO_EARLY_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_MEETING,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(MESSAGE_INVALID_START_END_TIME, VALID_EVENT_START_TIME_DOCTORAPPT,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INVALID_EVENT_END_TIME_TOO_EARLY_DOCTORAPPT));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + INVALID_EVENT_ADDRESS_DESC"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_MEETING,"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventAddress.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid contact index"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_CONTACT_INDEX,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid event tag"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_NAME_DESC_DOCTORAPPT + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_MEETING + INVALID_TAG_DESC + VALID_TAG_APPOINTMENT,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + EVENT_DESC_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + INVALID_EVENT_ADDRESS_DESC,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_NAME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_START_TIME_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_END_TIME_DESC_DOCTORAPPT + EVENT_ADDRESS_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_CONTACT_INDEX_DESC_MEETING,"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 313
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddEventTagCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_APPOINTMENT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventTagCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class AddEventTagCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private AddEventTagCommandParser parser \u003d new AddEventTagCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_fieldValuesPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cTag\u003e expectedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedTags.add(new Tag(VALID_TAG_APPOINTMENT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + TAG_DESC_APPOINTMENT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventTagCommand(expectedTags));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // one tag - accepted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_APPOINTMENT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventTagCommand(expectedTags));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedTags.add(new Tag(VALID_TAG_MEETING));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_APPOINTMENT + TAG_DESC_MEETING,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new AddEventTagCommand(expectedTags));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_noTagValuesPresent_fail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_invalidTagValue_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC + VALID_TAG_APPOINTMENT, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TAG_DESC_APPOINTMENT + TAG_DESC_MEETING,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventTagCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDRESS_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_FIRST_INDEX_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_APPOINTMENT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_CONTACT_INDEX_1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.APPOINTMENT_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventTagCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.EditEventAddressCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.commands.ImportContactsCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.ListEventCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.SeeEventContactsCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTagMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.FileReaderBuilder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.FileReaderUtil;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.ScheduledEventUtil;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // test for add command alias"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_add_alias() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddCommand command \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                (AddCommand) parser.parseCommand(PersonUtil.getAddCommandAlias(person));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_clear_alias() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_delete_alias() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                DeleteCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_edit_alias() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD_ALIAS + \" \""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_exit_alias() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_find_alias() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                FindCommand.COMMAND_WORD_ALIAS + \" \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_findEvent() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindEventCommand command \u003d (FindEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                FindEventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new FindEventCommand(new EventTagMatchesKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_findEvent_alias() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindEventCommand command \u003d (FindEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                FindEventCommand.COMMAND_WORD_ALIAS + \" \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new FindEventCommand(new EventTagMatchesKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_help_alias() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS) instanceof HelpCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_history_alias() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            // assert if the above command throws an exception as expected"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_listEvent() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ListEventCommand.COMMAND_WORD) instanceof ListEventCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ListEventCommand.COMMAND_WORD + \" 3\") instanceof ListEventCommand);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_listEvent_alias() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ListEventCommand.COMMAND_WORD_ALIAS) instanceof ListEventCommand);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ListEventCommand.COMMAND_WORD_ALIAS + \" 3\")"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                instanceof ListEventCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_list_alias() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_select_alias() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                SelectCommand.COMMAND_WORD_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_addEvent() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(ScheduledEventUtil.getAddEventCommand(event));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new AddEventCommand(event,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new HashSet\u003c\u003e(Arrays.asList(Index.fromOneBased(Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1))))),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                command);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_addEvent_alias() throws Exception {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                ScheduledEventUtil.getAddEventCommandAlias(event));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new AddEventCommand(event,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new HashSet\u003c\u003e(Arrays.asList(Index.fromOneBased("
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                                Integer.parseInt(VALID_EVENT_CONTACT_INDEX_1))))), command);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_addEventTag() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventTagCommand command \u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                (AddEventTagCommand) parser.parseCommand(AddEventTagCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + TAG_DESC_APPOINTMENT);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new AddEventTagCommand(new HashSet\u003c\u003e(Arrays.asList(APPOINTMENT_TAG))), command);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_addEventTag_alias() throws Exception {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddEventTagCommand command \u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                (AddEventTagCommand) parser.parseCommand(AddEventTagCommand.COMMAND_WORD_ALIAS"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + TAG_DESC_APPOINTMENT);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new AddEventTagCommand(new HashSet\u003c\u003e(Arrays.asList(APPOINTMENT_TAG))), command);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_deleteEvent() throws Exception {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand command \u003d (DeleteEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                DeleteEventCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_deleteEvent_alias() throws Exception {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DeleteEventCommand command \u003d (DeleteEventCommand) parser.parseCommand("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                DeleteEventCommand.COMMAND_WORD_ALIAS"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_seeEventContacts() throws Exception {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d (SeeEventContactsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                SeeEventContactsCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_seeEventContacts_alias() throws Exception {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        SeeEventContactsCommand command \u003d (SeeEventContactsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                SeeEventContactsCommand.COMMAND_WORD_ALIAS"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT), command);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_editEventAddress() throws Exception {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand command \u003d (EditEventAddressCommand) parser.parseCommand("
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EditEventAddressCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)), command);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_editEventAddress_alias() throws Exception {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EditEventAddressCommand command \u003d (EditEventAddressCommand) parser.parseCommand("
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EditEventAddressCommand.COMMAND_WORD_ALIAS"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)), command);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_redoCommandWordAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD_ALIAS + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void parseCommand_importContactsCommand() throws Exception {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FileReader fileReader \u003d new FileReaderBuilder().build();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        ImportContactsCommand command \u003d (ImportContactsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                FileReaderUtil.getImportCommand(fileReader));"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertEquals(new ImportContactsCommand(fileReader), command);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void parseCommand_importContactsCommand_alias() throws Exception {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FileReader fileReader \u003d new FileReaderBuilder().build();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        ImportContactsCommand command \u003d (ImportContactsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                FileReaderUtil.getImportCommandAlias(fileReader));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertEquals(new ImportContactsCommand(fileReader), command);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parseCommand_undoCommandWordAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD_ALIAS + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 229,
      "-": 145,
      "cjiefeng": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_FIRST_INDEX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_INVALID_INDEX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_SECOND_INDEX_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class DeleteEventCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private DeleteEventCommandParser parser \u003d new DeleteEventCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_MEETING + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple indices - last index accepted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_SECOND_INDEX_DESC"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new DeleteEventCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_DATE_DOCTORAPPT + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing index prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + \" \" + \"1\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_DATE_DOCTORAPPT + \" \" + \"1\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_DATE_DESC + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_INVALID_INDEX_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_DATE_DESC + EVENT_INVALID_INDEX_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditEventAddressCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDRESS_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_ADDRESS_DESC_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_FIRST_INDEX_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_INVALID_INDEX_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_SECOND_INDEX_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_ADDRESS_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.EditEventAddressCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EditEventAddressCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditEventAddressCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EditEventAddressCommandParser parser \u003d new EditEventAddressCommandParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_MEETING + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_FIRST_INDEX_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple indices - last index accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_SECOND_INDEX_DESC"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_FIRST_INDEX_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_MEETING + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_invalidAddressFollowedByValidAddress_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // no other valid addresses specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_ADDRESS_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // other valid addresses specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_MEETING + INVALID_EVENT_ADDRESS_DESC + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EditEventAddressCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        new EventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_DATE_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_ADDRESS_DESC_DOCTORAPPT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing index prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + \" \" + \"1\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_ADDRESS_DESC_DOCTORAPPT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + VALID_EVENT_ADDRESS_DOCTORAPPT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_DATE_DOCTORAPPT + \" \" + \"1\""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + VALID_EVENT_ADDRESS_DOCTORAPPT, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_DATE_DESC + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_INVALID_INDEX_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + INVALID_EVENT_ADDRESS_DESC,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventAddress.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_DATE_DESC + EVENT_INVALID_INDEX_DESC"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                + EVENT_ADDRESS_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FavouriteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_CONTACT_INDEX_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_CONTACT_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.FavouriteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class FavouriteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private FavouriteCommandParser parser \u003d new FavouriteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        EventDate expectedEventDate \u003d new EventDate(VALID_EVENT_DATE_DOCTORAPPT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                new FavouriteCommand(expectedEventDate, INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // missing event index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // missing event date"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertParseFailure(parser, EVENT_CONTACT_INDEX_DESC_DOCTORAPPT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FavouriteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // invalid event index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + INVALID_EVENT_CONTACT_INDEX, MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // invalid event date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_DATE_DESC"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                + EVENT_CONTACT_INDEX_DESC_DOCTORAPPT, EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindEventCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.FindEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTagMatchesKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class FindEventCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private FindEventCommandParser parser \u003d new FindEventCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                FindEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        FindEventCommand expectedFindEventCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new FindEventCommand(new EventTagMatchesKeywordsPredicate(Arrays.asList(\"Meeting\", \"Appointment\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, \"Meeting Appointment\", expectedFindEventCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, \" \\n Meeting \\n \\t Appointment  \\t\", expectedFindEventCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ImportContactsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_READER_INVALID_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FILE_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.FileReaderBuilder.DEFAULT_CSV_FILE_PATH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.FileReaderBuilder.EMPTY_CSV_FILE_PATH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.FileReaderBuilder.FILE_DO_NOT_EXIST_PATH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.FileReaderBuilder.HEADER_ONLY_CSV_FILE_PATH;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.FileReaderBuilder.INVALID_FILE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.commands.ImportContactsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FilePath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.FileReaderBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class ImportContactsCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private ImportContactsCommandParser parser \u003d new ImportContactsCommandParser();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void parse_fieldPresent_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FileReader fileReader \u003d new FileReaderBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + FILE_DESC + DEFAULT_CSV_FILE_PATH,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                new ImportContactsCommand(fileReader));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // multiple files - last file accepted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertParseSuccess(parser, FILE_DESC + EMPTY_CSV_FILE_PATH"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                + FILE_DESC + DEFAULT_CSV_FILE_PATH, new ImportContactsCommand(fileReader));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void parse_fieldMissing_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportContactsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // missing file prefix"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertParseFailure(parser, DEFAULT_CSV_FILE_PATH, expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FILE_READER_INVALID_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                ImportContactsCommand.MESSAGE_WRONG_FILE_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FileReader fileReader \u003d new FileReaderBuilder().headerOnly().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // invalid file, header only csv"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertParseSuccess(parser, FILE_DESC + HEADER_ONLY_CSV_FILE_PATH,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "                new ImportContactsCommand(fileReader));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // invalid file, wrong header format"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertParseFailure(parser, FILE_DESC + INVALID_FILE, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // empty file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertParseFailure(parser, FILE_DESC + EMPTY_CSV_FILE_PATH, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // non existent file"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertParseFailure(parser, FILE_DESC + FILE_DO_NOT_EXIST_PATH, FilePath.MESSAGE_FILEPATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjiefeng": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NotificationCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NOTIFICATION_PARAMETER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DISABLE_NOTIFICATION_PARAMETER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.logic.commands.NotificationCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " * outside of the Notification code."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "public class NotificationCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    private NotificationCommandParser parser \u003d new NotificationCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void parse_validArgs_returnsNotificationCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertParseSuccess(parser, \" \" + VALID_DISABLE_NOTIFICATION_PARAMETER, new NotificationCommand(false));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_WHITESPACE + INVALID_NOTIFICATION_PARAMETER,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotificationCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SeeEventContactsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_DATE_DESC_MEETING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_FIRST_INDEX_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_INVALID_INDEX_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EVENT_SECOND_INDEX_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EVENT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.SeeEventContactsCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class SeeEventContactsCommandParserTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private SeeEventContactsCommandParser parser \u003d new SeeEventContactsCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_MEETING + EVENT_DATE_DESC_DOCTORAPPT"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // multiple indices - last index accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseSuccess(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_SECOND_INDEX_DESC"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new SeeEventContactsCommand(new EventDate(VALID_EVENT_DATE_DOCTORAPPT), INDEX_FIRST_EVENT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                SeeEventContactsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_DATE_DOCTORAPPT + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // missing index prefix"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + \" \" + \"1\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, VALID_EVENT_DATE_DOCTORAPPT + \" \" + \"1\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_DATE_DESC + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, EVENT_DATE_DESC_DOCTORAPPT + EVENT_INVALID_INDEX_DESC,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, INVALID_EVENT_DATE_DESC + EVENT_INVALID_INDEX_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                EventDate.MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + EVENT_DATE_DESC_DOCTORAPPT + EVENT_FIRST_INDEX_DESC,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SeeEventContactsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.testutil.ImportContactsPersons.getImportContactsAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import static seedu.address.testutil.TypicalTags.APPOINTMENT_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.EventClashException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "import seedu.address.testutil.FileReaderBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getEventList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertEquals(true, addressBook.getNotificationPref());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertEquals(null, addressBook.getFavourite());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(DOCTORAPPT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cTag\u003e newTags \u003d Arrays.asList(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newEvents, newTags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void resetData_withDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Two events with the same identity fields"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event duplicateEvent \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new ScheduledEventBuilder(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(DOCTORAPPT, duplicateEvent);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cTag\u003e newTags \u003d Arrays.asList(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newEvents, newTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void resetData_withClashingEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Two events with the same identity fields"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(DOCTORAPPT, clashingEvent);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cTag\u003e newTags \u003d Arrays.asList(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newEvents, newTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(EventClashException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void resetData_withDuplicateEventTags_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cEvent\u003e newEvents \u003d Arrays.asList(DOCTORAPPT);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        // Two event tags with the same values (case-insensitive)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Tag duplicateTag \u003d new Tag(VALID_TAG_APPOINTMENT.toUpperCase());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        List\u003cTag\u003e newTags \u003d Arrays.asList(APPOINTMENT_TAG, duplicateTag);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newEvents, newTags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        thrown.expect(DuplicateTagException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.hasPerson(null);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void hasEventTag_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        addressBook.hasEventTag(null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.hasEvent(null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void hasEventTag_tagNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertFalse(addressBook.hasEventTag(APPOINTMENT_TAG));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addressBook.hasEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasClashingEvent_clashingEventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(addressBook.hasClashingEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        DOCTORAPPT.getEventTags().forEach(addressBook::addEventTag);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addressBook.hasEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasClashingEvent_clashingEventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        DOCTORAPPT.getEventTags().forEach(addressBook::addEventTag);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addressBook.hasClashingEvent(clashingEvent));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void hasEventTag_tagInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        addressBook.addEventTag(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertTrue(addressBook.hasEventTag(APPOINTMENT_TAG));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        DOCTORAPPT.getEventTags().forEach(addressBook::addEventTag);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event duplicateEvent \u003d new ScheduledEventBuilder(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(addressBook.hasEvent(duplicateEvent));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void hasEventTag_tagWithSameValuesInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        addressBook.addEventTag(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        Tag duplicateEventTag \u003d new Tag(VALID_TAG_APPOINTMENT);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertTrue(addressBook.hasEventTag(duplicateEventTag));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void getEventTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        addressBook.getEventTagList().add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    public void hasPersonsImported() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        FileReader fileReader \u003d new FileReaderBuilder().build();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        AddressBook importAddressBook \u003d getImportContactsAddressBook();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        AddressBook newAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        newAddressBook.importContacts(fileReader);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertEquals(importAddressBook, newAddressBook);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.getEventList().add(new ScheduledEventBuilder().build());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list and events list can violate interface constraints."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        private final ObservableList\u003cTag\u003e eventTags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        private boolean notificationPref \u003d true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        private String favourite \u003d null;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cEvent\u003e events, Collection\u003cTag\u003e eventTags) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            this.events.setAll(events);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            this.eventTags.setAll(eventTags);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public ObservableList\u003cTag\u003e getEventTagList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return eventTags;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        public ObservableList\u003cEvent\u003e getEventList() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            return events;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean getNotificationPref() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return notificationPref;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateNotificationPref(boolean set) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            this.notificationPref \u003d set;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public String getFavourite() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            return favourite;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public void updateFavourite(String favourite) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            this.favourite \u003d favourite;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        public boolean isFavourite(Event event) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            if (favourite.equals(\"Event Name: \" + event.getEventName()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                    + \"\\nEvent Date: \" + event.getEventDate() + \", \" + event.getEventDay()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                    + \"\\nEvent Time: \" + event.getEventStartTime() + \" - \" + event.getEventEndTime()"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                    + \"\\nEvent Details: \" + event.getEventDescription())) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 111,
      "kaitingpeck": 93,
      "-": 107
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EVENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.ImportContactsPersons.JACK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.ImportContactsPersons.KAITING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.ImportContactsPersons.PRATYAY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.ImportContactsPersons.RYAN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.testutil.ImportContactsPersons.YUWEI;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.APPOINTMENT_TAG;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MEETING_TAG;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.FileReaderBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.hasPerson(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.hasEvent(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEventTag_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.hasEventTag(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(modelManager.hasEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasClashingEvent_clashingEventNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(modelManager.hasClashingEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEventTag_tagNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(modelManager.hasEventTag(APPOINTMENT_TAG));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEvent_eventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DOCTORAPPT.getEventTags().forEach(modelManager::addEventTag);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(modelManager.hasEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasClashingEvent_clashingEventInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        DOCTORAPPT.getEventTags().forEach(modelManager::addEventTag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.addEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventName(DOCTORAPPT.getEventName().eventName)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDescription(DOCTORAPPT.getEventDescription().eventDescription)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDate(DOCTORAPPT.getEventDate().toString())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(DOCTORAPPT.getEventAddress().eventAddress)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(modelManager.hasClashingEvent(clashingEvent));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void hasEventTag_tagInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.addEventTag(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(modelManager.hasEventTag(APPOINTMENT_TAG));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getUnfilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.getUnfilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getFilteredEventList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.getFilteredEventList().add(new ScheduledEventBuilder().build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void getEventTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.getEventTagList().add(MEETING_TAG);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void hasImportContactsPerson_returnsTrue() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FileReader fileReader \u003d new FileReaderBuilder().build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        modelManager.importContacts(fileReader);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertTrue(modelManager.hasPerson(JACK));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertTrue(modelManager.hasPerson(KAITING));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertTrue(modelManager.hasPerson(PRATYAY));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertTrue(modelManager.hasPerson(RYAN));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertTrue(modelManager.hasPerson(YUWEI));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withPerson(ALICE)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withPerson(BENSON)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags(DOCTORAPPT.getEventTags())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags(MEETING.getEventTags())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEvent(DOCTORAPPT)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEvent(MEETING)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different filteredList of persons -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        modelManager.updateFilteredEventList(PREDICATE_SHOW_ALL_EVENTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 92,
      "-": 82,
      "cjiefeng": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withPerson(AMY).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withPerson(BOB).build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withPerson(CARL).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithDoctorAppt \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new AddressBookBuilder().withEventTags(DOCTORAPPT.getEventTags()).withEvent(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithMeeting \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new AddressBookBuilder().withEventTags(MEETING.getEventTags()).withEvent(MEETING).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 6,
      "-": 298
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventAddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventAddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventAddress(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventAddress(invalidAddress));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventAddress.isValidAddress(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventAddress.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventAddress.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventAddress.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventAddress.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventAddress.isValidAddress(\"NUS\")); // one word"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventAddress.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // long address"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventDate(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventDate(invalidDate));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventDate.isValidDate(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"20180901\")); // date not conforming to yyyy-mm-dd"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"2018-09-013\")); // date not conforming to yyyy-mm-dd"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"201809013\")); // date not conforming to yyyy-mm-dd"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"2018-0901\")); // only one dash"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"20181301\")); // invalid month"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"20181032\")); // invalid day"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDate.isValidDate(\"2018-02-29\")); // leap year"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDate.isValidDate(\"2018-08-01\")); // normal date with separator -"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDate.isValidDate(\"2016-02-29\")); // leap year"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDayTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventDay(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventDay eventDay \u003d new EventDay(DayOfWeek.MONDAY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventDay, null);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventDay, \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different values"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(eventDay, new EventDay(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(eventDay, eventDay);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(eventDay, new EventDay(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventDescriptionTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventDescriptionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventDescription(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventDescription(invalidDescription));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventDescription.isValidDescription(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDescription.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDescription.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDescription.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventDescription.isValidDescription(\"consultation*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"consultation\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"1st meeting\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"MeeTing 123\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventDescription.isValidDescription(\"Consultation at the Nearby Polyclinic\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventNameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void test_eventNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventNameContainsKeywordsPredicate predicate \u003d new EventNameContainsKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \"Meeting\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new ScheduledEventBuilder().withEventName(\"Meeting\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Meeting\", \"Appointment\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new ScheduledEventBuilder().withEventName(\"Meeting Appointment\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Meeting\", \"Class\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new ScheduledEventBuilder().withEventName(\"Meeting\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"MEeTing\", \"ApPOinTmeNt\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new ScheduledEventBuilder().withEventName(\"Meeting Appointment\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void test_eventNameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventNameContainsKeywordsPredicate predicate \u003d new EventNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(new ScheduledEventBuilder().withEventName(\"Meeting\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"Class\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(new ScheduledEventBuilder().withEventName(\"Meeting Appointment\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Keywords match event description, address but not name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventNameContainsKeywordsPredicate(Arrays.asList(\"SOCLecture\", \"testDesc\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventName(\"nonmatching name\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDescription(\"testDesc\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(\"SOCLecture\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventNameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventName.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventName.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventName.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventName.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventName.isValidName(\"meeting*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"consultation\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"meeting 1\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"MeeTing 123\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventName.isValidName(\"Consultation at the Nearby Polyclinic\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTagMatchesKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventTagMatchesKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventTagMatchesKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventTagMatchesKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new EventTagMatchesKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void test_eventTagMatchesKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate predicate \u003d new EventTagMatchesKeywordsPredicate(Collections.singletonList("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \"Meeting\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new ScheduledEventBuilder().withEventTags(\"Meeting\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventTagMatchesKeywordsPredicate(Arrays.asList(\"Meeting\", \"Appointment\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new ScheduledEventBuilder().withEventTags(\"Meeting\", \"Appointment\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventTagMatchesKeywordsPredicate(Arrays.asList(\"Meeting\", \"Class\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new ScheduledEventBuilder().withEventTags(\"Meeting\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventTagMatchesKeywordsPredicate(Arrays.asList(\"MEeTing\", \"ApPOinTmeNt\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new ScheduledEventBuilder().withEventTags(\"Meeting\", \"Appointment\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void test_eventTagDoesNotMatchKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTagMatchesKeywordsPredicate predicate \u003d new EventTagMatchesKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(new ScheduledEventBuilder().withEventTags(\"Meeting\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventTagMatchesKeywordsPredicate(Arrays.asList(\"Class\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(new ScheduledEventBuilder().withEventTags(\"Meeting\", \"Appointment\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Keywords match event name, description but not tag"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new EventTagMatchesKeywordsPredicate(Arrays.asList(\"SOCLecture\", \"testDesc\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventName(\"SOCLecture\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDescription("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \"testDesc\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags(\"Class\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESC_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MEETING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // cannot modify the immutable list of tags"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d new ScheduledEventBuilder().withEventContacts(ALICE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        event.getEventContacts().remove(0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // equality criteria testing for two Event objects"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isSameEvent() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event doctorApptCopy \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventContacts()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(DOCTORAPPT.isSameEvent(doctorApptCopy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values different index -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event doctorApptCopyWithContact \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventContacts(ALICE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventTags()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(DOCTORAPPT.isSameEvent(doctorApptCopyWithContact));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values different tag -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event doctorApptWithTag \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .withEventContacts()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .withEventTags(VALID_TAG_APPOINTMENT)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(DOCTORAPPT.isSameEvent(doctorApptWithTag));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(DOCTORAPPT.isSameEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.isSameEvent(null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.isSameEvent(MEETING));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventName(VALID_EVENT_NAME_MEETING).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.isSameEvent(editedDoctorAppt));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event description -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventDescription(VALID_EVENT_DESC_MEETING).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.isSameEvent(editedDoctorAppt));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventDate(VALID_EVENT_DATE_MEETING).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.isSameEvent(editedDoctorAppt));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(VALID_EVENT_START_TIME_MEETING).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.isSameEvent(editedDoctorAppt));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventAddress(VALID_EVENT_ADDRESS_MEETING).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.isSameEvent(editedDoctorAppt));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // equality criteria testing for two Event objects"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event doctorApptCopy \u003d new ScheduledEventBuilder(DOCTORAPPT).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(DOCTORAPPT.equals(doctorApptCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(DOCTORAPPT.equals(DOCTORAPPT));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(MEETING));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventName(VALID_EVENT_NAME_MEETING).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event description -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventDescription(VALID_EVENT_DESC_MEETING).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventDate(VALID_EVENT_DATE_MEETING).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different time -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(VALID_EVENT_START_TIME_MEETING).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventAddress(VALID_EVENT_ADDRESS_MEETING).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event contacts -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventContacts(BOB).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different event contacts -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        editedDoctorAppt \u003d new ScheduledEventBuilder(DOCTORAPPT).withEventTags(VALID_TAG_MEETING).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(DOCTORAPPT.equals(editedDoctorAppt));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEventContacts() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d new ScheduledEventBuilder().build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e event.setEventContacts(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null objects in list"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e contactListWithNull \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactListWithNull.add(ALICE);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        contactListWithNull.add(null);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e event.setEventContacts(contactListWithNull));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // non-null list - successfully added"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e validContactList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        validContactList.add(ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        event.setEventContacts(validContactList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event expectedEvent \u003d new ScheduledEventBuilder().withEventContacts(ALICE).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(event, expectedEvent);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // checking for clashes between two Events"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isClashingEvent() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same dates"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e event.isClashingEvent(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // before event, no clash"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event earlierEventNoClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1000\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1159\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(earlierEventNoClash));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event anotherEarlierEventNoClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1000\")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1200\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(anotherEarlierEventNoClash));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // after event, no clash"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event laterEventNoClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1401\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1500\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(laterEventNoClash));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event anotherLaterEventNoClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1400\")"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1500\")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(anotherLaterEventNoClash));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // starts before event starts and ends after event starts, with clash"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event firstEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1100\")"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1300\")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(firstEventWithClash));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // starts after event starts and ends before event ends, with clash"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event secondEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1230\")"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1330\")"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(secondEventWithClash));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // starts before event ends, ends after event ends, clash"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event thirdEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1300\")"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1500\")"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(thirdEventWithClash));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // covers whole duration of event and more, clash"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event fourthEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1100\")"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1500\")"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(fourthEventWithClash));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same duration as event, clash"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event fifthEventWithClash \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(event.isClashingEvent(fifthEventWithClash));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different dates"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event newEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDate(\"2018-09-01\")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different date, same time, no clash"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event differentDateSameTime \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDate(\"2018-09-02\")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(differentDateSameTime));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different date, different time, no clash"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event differentDateDifferentTime \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventDate(\"2018-09-02\")"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(\"1000\")"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(\"1200\")"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(event.isClashingEvent(differentDateDifferentTime));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 265
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/EventTimeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class EventTimeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new EventTime(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void constructor_invalidTime_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String invalidTime \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new EventTime(invalidTime));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isValidTime() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null event time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e EventTime.isValidTime(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"12:30\")); // time with colon"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"233012\")); // hhmmss"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"2400\")); // invalid hour"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(EventTime.isValidTime(\"1061\")); // invalid minute"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventTime.isValidTime(\"1230\")); // normal time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventTime.isValidTime(\"0000\")); // start point"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(EventTime.isValidTime(\"2359\")); // end point"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime eventTime \u003d new EventTime(\"1200\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null EventTime"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e eventTime.compareTo(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventTime.compareTo(eventTime) \u003d\u003d 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime sameTime \u003d new EventTime(\"1200\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventTime.compareTo(sameTime) \u003d\u003d 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // eventTime is earlier time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime laterTime \u003d new EventTime(\"1230\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventTime.compareTo(laterTime) \u003c 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // eventTime is later time"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        EventTime earlierTime \u003d new EventTime(\"1130\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(eventTime.compareTo(earlierTime) \u003e 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/event/UniqueEventListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CLASHING_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.DuplicateEventException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.EventClashException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.ScheduledEventBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class UniqueEventListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.contains(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_eventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(uniqueEventList.contains(DOCTORAPPT));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_clashingEventNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(uniqueEventList.containsClashingEvent(DOCTORAPPT));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_eventInList_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(uniqueEventList.contains(DOCTORAPPT));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_clashingEventInList_returnsTrue() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(uniqueEventList.containsClashingEvent(clashingEvent));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add_duplicateEvent_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_nullUniqueEventList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents((UniqueEventList) null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_uniqueEventList_replacesOwnListWithProvidedUniqueEventList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents(expectedUniqueEventList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents((List\u003cEvent\u003e) null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e eventList \u003d Collections.singletonList(MEETING);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents(eventList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_listWithDuplicateEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e listWithDuplicateEvents \u003d Arrays.asList(DOCTORAPPT, DOCTORAPPT);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents(listWithDuplicateEvents);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvents_listWithClashingEvents_throwsDuplicateEventException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event clashingEvent \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventStartTime(CLASHING_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventEndTime(CLASHING_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cEvent\u003e listWithClashingEvents \u003d Arrays.asList(DOCTORAPPT, clashingEvent);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(EventClashException.class);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvents(listWithClashingEvents);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void remove_nullEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.remove(null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void remove_eventDoesNotExist_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.remove(DOCTORAPPT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void remove_existingEvent_removesEvent() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.remove(DOCTORAPPT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.asUnmodifiableObservableList().add(DOCTORAPPT);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvent_nullTargetEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvent(null, DOCTORAPPT);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvent_nullEditedEvent_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvent(DOCTORAPPT, null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvent_targetEventNotInList_throwsEventNotFoundException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(EventNotFoundException.class);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvent(DOCTORAPPT, DOCTORAPPT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvent_editedEventIsSameEvent_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvent(DOCTORAPPT, DOCTORAPPT);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvent_editedEventHasSameIdentity_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event editedAppointment \u003d new ScheduledEventBuilder(DOCTORAPPT)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .withEventAddress(VALID_EVENT_ADDRESS_MEETING)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvent(DOCTORAPPT, editedAppointment);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueEventList.add(editedAppointment);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvent_editedEventHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvent(DOCTORAPPT, MEETING);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueEventList expectedUniqueEventList \u003d new UniqueEventList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueEventList, uniqueEventList);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setEvent_editedEventHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(DOCTORAPPT);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.add(MEETING);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateEventException.class);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueEventList.setEvent(DOCTORAPPT, MEETING);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 206
    }
  },
  {
    "path": "src/test/java/seedu/address/model/filereader/FilePathTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.model.filereader;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.testutil.FileReaderBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class FilePathTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new FilePath(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        String invalidFilePath \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new FilePath(invalidFilePath));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e FilePath.isValidPath(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertFalse(FilePath.isValidPath(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertFalse(FilePath.isValidPath(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        assertTrue(FilePath.isValidPath(FileReaderBuilder.DEFAULT_CSV_FILE_PATH));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjiefeng": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ExistingPersonInEventPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class ExistingPersonInEventPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e firstPredicatePersonSet \u003d Collections.singleton(ALICE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Set\u003cPerson\u003e secondPredicatePersonSet \u003d new HashSet\u003c\u003e(Arrays.asList(ALICE, BOB));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate firstPredicate \u003d new ExistingPersonInEventPredicate(firstPredicatePersonSet);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate secondPredicate \u003d new ExistingPersonInEventPredicate(secondPredicatePersonSet);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate firstPredicateCopy \u003d new ExistingPersonInEventPredicate(firstPredicatePersonSet);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void test_personInSet_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // One person"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate predicate \u003d new ExistingPersonInEventPredicate(Collections.singleton(ALICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(ALICE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Multiple persons"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new ExistingPersonInEventPredicate(new HashSet\u003c\u003e(Arrays.asList(ALICE, BOB)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(ALICE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Same person but not exactly equals"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new ExistingPersonInEventPredicate(Collections.singleton(ALICE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder(ALICE).withEmail(\"newemail@example.com\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void test_personNotInSet_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Zero persons"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        ExistingPersonInEventPredicate predicate \u003d new ExistingPersonInEventPredicate(Collections.emptySet());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Non-matching person"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new ExistingPersonInEventPredicate(Collections.singleton(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(BOB));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Person with same phone, email and address, but different name (!isSamePerson)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        predicate \u003d new ExistingPersonInEventPredicate(Collections.singleton(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder(ALICE).withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/FacultyTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "class FacultyTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void constructor_requireNonNullError_exceptionThrownTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Faculty(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void constructor_emptySpaceInput_exceptionThrownTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String invalidFaculty \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Faculty(invalidFaculty));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    void isValidFaculty() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\"@\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\"SOC*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertFalse(Faculty.isValidFaculty(\"COM\")); // unconventional faculty naming"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"SDE\")); // in enum"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"FASS\")); // in enum"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"ystcom\")); // caps do not matter"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertTrue(Faculty.isValidFaculty(\"-\")); // dash input for those who have no faculty"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // cannot modify the immutable list of tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().remove(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                .withFaculty(\"SOC\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(null, ALICE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                .withFaculty(\"SDE\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(null);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((UniquePersonList) null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons((List\u003cPerson\u003e) null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DuplicatePersonException.class);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(listWithDuplicatePersons);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 2,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void isSameTag() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag appointmentTag \u003d new Tag(VALID_TAG_APPOINTMENT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag meetingTag \u003d new Tag(VALID_TAG_MEETING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(appointmentTag.isSameTag(appointmentTag));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(appointmentTag.isSameTag(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // different string values -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(appointmentTag.isSameTag(meetingTag));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same string values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag appointmentTagCopy \u003d new Tag(VALID_TAG_APPOINTMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(appointmentTag.isSameTag(appointmentTagCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // same string values, different case -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag appointmentTagUpperCase \u003d new Tag(VALID_TAG_APPOINTMENT.toUpperCase());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(appointmentTag.isSameTag(appointmentTagUpperCase));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 28,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/UniqueTagListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.APPOINTMENT_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.MEETING_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class UniqueTagListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private final UniqueTagList uniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.contains(null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_tagNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertFalse(uniqueTagList.contains(APPOINTMENT_TAG));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_tagInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(uniqueTagList.contains(APPOINTMENT_TAG));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void contains_tagWithSameIdentityInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Tag sameIdentityTag \u003d new Tag(VALID_TAG_APPOINTMENT.toUpperCase());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertTrue(uniqueTagList.contains(sameIdentityTag));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.add(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void add_duplicateTag_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateTagException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setTags_nullUniqueTagList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.setTags((UniqueTagList) null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setTags_uniqueTagList_replacesOwnListWithProvidedUniqueTagList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueTagList.add(MEETING_TAG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.setTags(expectedUniqueTagList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setTags_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.setTags((List\u003cTag\u003e) null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setTags_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cTag\u003e tagList \u003d Collections.singletonList(MEETING_TAG);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.setTags(tagList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        UniqueTagList expectedUniqueTagList \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        expectedUniqueTagList.add(MEETING_TAG);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(expectedUniqueTagList, uniqueTagList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void setTags_listWithDuplicateTags_throwsDuplicateTagException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cTag\u003e listWithDuplicateTags \u003d Arrays.asList(APPOINTMENT_TAG, APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DuplicateTagException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.setTags(listWithDuplicateTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        uniqueTagList.asUnmodifiableObservableList().add(APPOINTMENT_TAG);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100, true, null);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.xml\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2, true, null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5, true, null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 3,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6, true, null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ryantanwk": 1,
      "-": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedEventTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.AddEventCommandParser.MESSAGE_INVALID_START_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.storage.XmlAdaptedEvent.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class XmlAdaptedEventTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_FACULTY \u003d BENSON.getFaculty().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_NAME \u003d \"Cl@ss\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_DESCRIPTION \u003d \"+invalid_desc\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_DATE \u003d \"123123\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_START_TIME \u003d \"123123\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_END_TIME \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            DOCTORAPPT.getEventStartTime().eventTime"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .minus(Duration.ofHours(1))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .toString()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .replace(\":\", \"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final XmlAdaptedPerson INVALID_EVENT_CONTACT \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_FACULTY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String INVALID_EVENT_TAG \u003d \"#appointment\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_NAME \u003d DOCTORAPPT.getEventName().toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_DESCRIPTION \u003d DOCTORAPPT.getEventDescription().toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_DATE \u003d DOCTORAPPT.getEventDate().toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_START_TIME \u003d DOCTORAPPT.getEventStartTime().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_END_TIME \u003d DOCTORAPPT.getEventEndTime().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final String VALID_EVENT_ADDRESS \u003d DOCTORAPPT.getEventAddress().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final List\u003cXmlAdaptedPerson\u003e VALID_EVENT_CONTACTS \u003d DOCTORAPPT.getEventContacts().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .map(XmlAdaptedPerson::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_EVENT_TAGS \u003d DOCTORAPPT.getEventTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_validEventDetails_returnsEvent() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(DOCTORAPPT, event.toModelType());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(INVALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventName.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(null, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventName.class.getSimpleName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, INVALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventDescription.MESSAGE_DESCRIPTION_CONSTRAINTS;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, null, VALID_EVENT_DATE, VALID_EVENT_START_TIME,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS, VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventDescription.class.getSimpleName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, INVALID_EVENT_DATE,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventDate.MESSAGE_DATE_CONSTRAINTS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, null, VALID_EVENT_START_TIME,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS, VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventDate.class.getSimpleName());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        INVALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventTime.MESSAGE_TIME_CONSTRAINTS;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, INVALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(String.format(MESSAGE_INVALID_START_END_TIME, VALID_EVENT_START_TIME,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                INVALID_EVENT_END_TIME));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE, null,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS, VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                \"Start\" + EventTime.class.getSimpleName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, null, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End\" + EventTime.class.getSimpleName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, INVALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d EventAddress.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, null, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, EventAddress.class.getSimpleName());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // only need to check for invalid contacts, since XmlAdaptedEvent#eventContacts will always be at least an empty"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // list"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_withNullContacts_throwsNullPointerException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cXmlAdaptedPerson\u003e invalidContacts \u003d new ArrayList\u003c\u003e(VALID_EVENT_CONTACTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        invalidContacts.add(null);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, invalidContacts,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, event::toModelType);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidContacts_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cXmlAdaptedPerson\u003e invalidContacts \u003d new ArrayList\u003c\u003e(VALID_EVENT_CONTACTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        invalidContacts.add(INVALID_EVENT_CONTACT);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, invalidContacts,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_withNullEventTags_throwsNullPointerException() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        invalidTags.add(null);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        invalidTags);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, event::toModelType);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidEventTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_EVENT_TAG));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION, VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS, VALID_EVENT_CONTACTS,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        invalidTags);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, event::toModelType);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent event \u003d new XmlAdaptedEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // null"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(event, null);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Different objects"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(event, 1);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Different event details"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent eventWithDifferentDetails \u003d"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                new XmlAdaptedEvent(VALID_EVENT_NAME, VALID_EVENT_DESCRIPTION + \" \","
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                VALID_EVENT_DATE,"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                VALID_EVENT_START_TIME, VALID_EVENT_END_TIME, VALID_EVENT_ADDRESS,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                        VALID_EVENT_CONTACTS, VALID_EVENT_TAGS);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertNotEquals(event, eventWithDifferentDetails);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Same event"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent otherEvent \u003d event;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(event, otherEvent);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        // Same event details"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlAdaptedEvent eventWithSameDetails \u003d new XmlAdaptedEvent(DOCTORAPPT);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        assertEquals(event, eventWithSameDetails);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 261
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String INVALID_FACULTY \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private static final String VALID_FACULTY \u003d BENSON.getFaculty().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_FACULTY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                VALID_FACULTY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_FACULTY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                VALID_FACULTY);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS, VALID_FACULTY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                VALID_FACULTY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS, VALID_FACULTY);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                VALID_FACULTY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_FACULTY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void toModelType_invalidFaculty_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                INVALID_FACULTY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        String expectedMessage \u003d Faculty.MESSAGE_FACULTY_CONSTRAINTS;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 24,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAddressBookStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlAddressBookStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return new XmlAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_invalidEventAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"invalidEventAddressBook.xml\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_invalidEventTagAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"invalidEventTagAddressBook.xml\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_clashingEventAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"clashingEventAddressBook.xml\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"invalidAndValidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_invalidAndValidEventAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"invalidAndValidEventAddressBook.xml\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_invalidAndValidEventTagAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"invalidAndValidEventTagAddressBook.xml\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAndEventAddressBook_throwDataConversionException()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        readAddressBook(\"invalidAndValidAddressBook.xml\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage xmlAddressBookStorage \u003d new XmlAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        xmlAddressBookStorage.saveAddressBook(original); //file path not specified"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readAddressBook().get(); //file path not specified"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            new XmlAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(new AddressBook(), null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 37,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path TYPICAL_PERSONS_AND_EVENTS_FILE \u003d TEST_DATA_FOLDER.resolve("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            \"typicalAddressBook\" + \".xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path INVALID_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventAddressBook.xml\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path DUPLICATE_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventAddressBook.xml\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path CLASHING_EVENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"clashingEventAddressBook.xml\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path INVALID_EVENT_TAG_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEventTagAddressBook.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private static final Path DUPLICATE_EVENT_TAG_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEventTagAddressBook.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_typicalPersonsAndEventsFile_success() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_AND_EVENTS_FILE,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidEventFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_FILE,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_duplicateEvents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_EVENT_FILE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_EVENT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_clashingEvents_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(CLASHING_EVENT_FILE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_CLASHING_EVENT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_invalidEventTagFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EVENT_TAG_FILE,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public void toModelType_duplicateEventTags_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_EVENT_TAG_FILE,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 54,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds a new {@code Event} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddressBookBuilder withEvent(Event event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        addressBook.addEvent(event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Adds a new event {@code Tag} to the {@code Addressbook} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public AddressBookBuilder withEventTags(Set\u003cTag\u003e eventTags) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags.forEach(addressBook::addEventTag);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 20,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FileReaderBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FilePath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * A utility class to help with building FileReader objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class FileReaderBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String DEFAULT_CSV_FILE_PATH \u003d Paths"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"ImportContactsTest\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .resolve(\"ImportContacts.csv\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .toFile()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .getAbsolutePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String EMPTY_CSV_FILE_PATH \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"ImportContactsTest\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .resolve(\"EmptyImportContacts.csv\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .toFile()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .getAbsolutePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String HEADER_ONLY_CSV_FILE_PATH \u003d Paths"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"ImportContactsTest\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .resolve(\"HeaderOnlyContacts.csv\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .toFile()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .getAbsolutePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String INVALID_FILE \u003d Paths"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"ImportContactsTest\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .resolve(\"InvalidImportContacts.csv\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .toFile()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .getAbsolutePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final String FILE_DO_NOT_EXIST_PATH \u003d Paths"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"ImportContactsTest\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .resolve(\"FileDoNotExist.csv\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .toFile()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .getAbsolutePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private FileReader fileReader;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public FileReaderBuilder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FilePath filePath \u003d new FilePath(DEFAULT_CSV_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Sets the {@code FileReader} of the {@code FileReader} that we are building to empty file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public FileReaderBuilder empty() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FilePath filePath \u003d new FilePath(EMPTY_CSV_FILE_PATH);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        this.fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Sets the {@code FileReader} of the {@code FileReader} that we are building to header only file."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public FileReaderBuilder headerOnly() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        FilePath filePath \u003d new FilePath(HEADER_ONLY_CSV_FILE_PATH);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        this.fileReader \u003d new FileReader(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public FileReader build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return fileReader;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjiefeng": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/FileReaderUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.logic.commands.ImportContactsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.filereader.FileReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * A utility class for FileReader."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class FileReaderUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static String getImportCommand(FileReader fileReader) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return ImportContactsCommand.COMMAND_WORD + \" \" + PREFIX_FILE + fileReader.getCsvFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static String getImportCommandAlias(FileReader fileReader) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return ImportContactsCommand.COMMAND_WORD_ALIAS + \" \" + PREFIX_FILE + fileReader.getCsvFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjiefeng": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ImportContactsPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in import contacts tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "public class ImportContactsPersons {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final Person JACK \u003d new PersonBuilder().withName(\"Jack\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withAddress(\"12 Computing Drive\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withEmail(\"jack@gmail.com\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withPhone(\"91234567\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final Person KAITING \u003d new PersonBuilder().withName(\"Kai Ting\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withAddress(\"12 Computing Dr\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withEmail(\"kaiting@gmail.com\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final Person PRATYAY \u003d new PersonBuilder().withName(\"Pratyay\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withAddress(\"12 Computing Dr\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withEmail(\"pratyay@gmail.com\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withPhone(\"97777777\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final Person RYAN \u003d new PersonBuilder().withName(\"Ryan\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withAddress(\"12 Computing Dr\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withEmail(\"ryan@gmail.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withPhone(\"98888888\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static final Person YUWEI \u003d new PersonBuilder().withName(\"Yu Wei\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withAddress(\"12 Computing Dr\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withEmail(\"yuwei@gmail.com\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withPhone(\"96666666\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    private ImportContactsPersons() {}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons and events."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static AddressBook getImportContactsAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        for (Person person : getImportContactsPersons()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    public static List\u003cPerson\u003e getImportContactsPersons() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JACK, KAITING, PRATYAY, RYAN, YUWEI));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "cjiefeng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "cjiefeng": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public static final String DEFAULT_FACULTY \u003d \"SOC\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    private Faculty faculty;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        faculty \u003d new Faculty(DEFAULT_FACULTY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        faculty \u003d personToCopy.getFaculty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     * Sets the {@code Faculty} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public PersonBuilder withFaculty(String faculty) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        this.faculty \u003d new Faculty(faculty);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        return new Person(name, phone, email, address, tags, faculty);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 14,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getAddCommandAlias(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return AddCommand.COMMAND_WORD_ALIAS + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        sb.append(PREFIX_FACULTY + person.getFaculty().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 2,
      "kaitingpeck": 4,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduledEventBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventAddress;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventDescription;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.EventTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A utility class to help with building Event objects. File naming is set to be in line with the other Event utils."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class ScheduledEventBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_NAME \u003d \"Doctor Appointment\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_DESC \u003d \"Consultation\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_DATE \u003d \"2018-09-01\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_START_TIME \u003d \"1015\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_END_TIME \u003d \"1045\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final String DEFAULT_EVENT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventName eventName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventDescription eventDescription;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventDate eventDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventTime eventStartTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventTime eventEndTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private EventAddress eventAddress;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Set\u003cPerson\u003e eventContacts;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private Set\u003cTag\u003e eventTags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Builds a new Event with the default values."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventName \u003d new EventName(DEFAULT_EVENT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDescription \u003d new EventDescription(DEFAULT_EVENT_DESC);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDate \u003d new EventDate(DEFAULT_EVENT_DATE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventStartTime \u003d new EventTime(DEFAULT_EVENT_START_TIME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventEndTime \u003d new EventTime(DEFAULT_EVENT_END_TIME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventAddress \u003d new EventAddress(DEFAULT_EVENT_ADDRESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventContacts \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Initializes the EvebtBuilder with the data of {@code eventToCopy}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder(Event eventToCopy) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventName \u003d eventToCopy.getEventName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDescription \u003d eventToCopy.getEventDescription();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventDate \u003d eventToCopy.getEventDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventStartTime \u003d eventToCopy.getEventStartTime();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventEndTime \u003d eventToCopy.getEventEndTime();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventAddress \u003d eventToCopy.getEventAddress();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventContacts \u003d eventToCopy.getEventContacts();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        eventTags \u003d new HashSet\u003c\u003e(eventToCopy.getEventTags());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventName} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventName(String eventName) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventName \u003d new EventName(eventName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventDescription} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventDescription(String eventDesc) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDescription \u003d new EventDescription(eventDesc);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventDate} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventDate(String eventDate) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventDate \u003d new EventDate(eventDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventStartTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventStartTime(String eventTime) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventStartTime \u003d new EventTime(eventTime);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventEndTime} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventEndTime(String eventTime) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventEndTime \u003d new EventTime(eventTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Sets the {@code EventAddress} of the {@code Event} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventAddress(String eventAddress) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventAddress \u003d new EventAddress(eventAddress);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the {@code persons} into a {@code Set\u003cPerson\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventContacts(Person ... persons) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventContacts \u003d SampleDataUtil.getEventContactSet(persons);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Event} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public ScheduledEventBuilder withEventTags(String ... tags) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        this.eventTags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Builds the Event"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        Event event \u003d new Event(eventName, eventDescription, eventDate, eventStartTime, eventEndTime, eventAddress,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                eventTags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        event.setEventContacts(eventContacts);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 139
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduledEventUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A utility class for Events. Note that this is different from EventsUtil.java, hence the different naming, as this is"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * for the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * Events-related"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * functions in EventsPlus+."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class ScheduledEventUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an add command string for adding the {@code event}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getAddEventCommand(Event event) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an add command string using the command alias for adding the {@code event}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getAddEventCommandAlias(Event event) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return AddEventCommand.COMMAND_WORD_ALIAS + \" \" + getEventDetails(event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns the part of command string for the given {@code event}\u0027s details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static String getEventDetails(Event event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_NAME + event.getEventName().eventName + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_EVENT_DESCRIPTION + event.getEventDescription().eventDescription + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_DATE + event.getEventDate().toString() + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_START_TIME + event.getEventStartTime().toString() + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_END_TIME + event.getEventEndTime().toString() + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        sb.append(PREFIX_ADDRESS + event.getEventAddress().eventAddress + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEvents.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_DOCTORAPPT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_ADDRESS_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_DOCTORAPPT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DATE_MEETING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESC_DOCTORAPPT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_DESC_MEETING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_END_TIME_MEETING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_DOCTORAPPT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_MEETING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_DOCTORAPPT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_START_TIME_MEETING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A utility class containing a list of {@code Event} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class TypicalEvents {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // Manually added - Event\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Event DOCTORAPPT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventName(VALID_EVENT_NAME_DOCTORAPPT)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDescription(VALID_EVENT_DESC_DOCTORAPPT)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDate(VALID_EVENT_DATE_DOCTORAPPT)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventStartTime(VALID_EVENT_START_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventEndTime(VALID_EVENT_END_TIME_DOCTORAPPT)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventAddress(VALID_EVENT_ADDRESS_DOCTORAPPT)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventContacts(ALICE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventTags(VALID_TAG_APPOINTMENT)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Event MEETING \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventName(VALID_EVENT_NAME_MEETING)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDescription(VALID_EVENT_DESC_MEETING)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDate(VALID_EVENT_DATE_MEETING)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventStartTime(VALID_EVENT_START_TIME_MEETING)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventEndTime(VALID_EVENT_END_TIME_MEETING)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventAddress(VALID_EVENT_ADDRESS_MEETING)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventContacts(BENSON)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventTags(VALID_TAG_MEETING)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // more events manually added"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Event CLASS \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventName(\"Guest lecture\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDescription(\"Cryptography\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDate(\"2018-08-01\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventStartTime(\"1200\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventEndTime(\"1400\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventContacts(ALICE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventAddress(\"NUS i3\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Event DINNER \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            new ScheduledEventBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventName(\"Dinner appointment\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDescription(\"with Ann\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventDate(VALID_EVENT_DATE_MEETING)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventStartTime(\"1800\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventEndTime(\"2015\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .withEventAddress(\"NUS\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private TypicalEvents() {} // prevents instantiation"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static List\u003cEvent\u003e getTypicalEvents() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DOCTORAPPT, MEETING, DINNER));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Index INDEX_FIRST_EVENT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Index INDEX_SECOND_EVENT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 3,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalEvents.getTypicalEvents;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.testutil.TypicalTags.getTypicalTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.event.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withTags(\"friends\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withFaculty(\"SOC\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withFaculty(VALID_FACULTY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            .withFaculty(VALID_FACULTY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons and events."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Tag tag : getTypicalTags()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ab.addEventTag(tag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        for (Event event : getTypicalEvents()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "            ab.addEvent(event);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 16,
      "kaitingpeck": 15,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTags.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_APPOINTMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEETING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " * A utility class containing a list of {@code Tag} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "public class TypicalTags {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    // Manually added - Tag\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Tag APPOINTMENT_TAG \u003d new Tag(VALID_TAG_APPOINTMENT);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static final Tag MEETING_TAG \u003d new Tag(VALID_TAG_MEETING);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    private TypicalTags() {} // prevents instantiation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    public static List\u003cTag\u003e getTypicalTags() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPOINTMENT_TAG, MEETING_TAG));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import seedu.address.MainApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(ALICE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 4,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assume.assumeFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.HelpWindow.USERGUIDE_FILE_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindowHandle helpWindowHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e helpWindow \u003d new HelpWindow());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.registerStage(helpWindow::getRoot);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindowHandle \u003d new HelpWindowHandle(helpWindow.getRoot());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedHelpPage \u003d HelpWindow.class.getResource(USERGUIDE_FILE_PATH);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedHelpPage, helpWindowHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsShowing_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.isShowing());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isShowing_helpWindowIsHiding_returnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(helpWindow.isShowing());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus_helpWindowNotFocused_focused() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This test skip can be removed once this bug is fixed:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // https://github.com/javafxports/openjdk-jfx/issues/50"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // When there are two stages (stage1 and stage2) shown,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage1 is in focus and stage2.requestFocus() is called,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // we expect that stage1.isFocused() will return false while"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // stage2.isFocused() returns true. However, as reported in the bug report,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // both stage1.isFocused() and stage2.isFocused() returns true,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // which fails the test."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assumeFalse(\"Test skipped in headless mode: Window focus behavior is buggy.\", guiRobot.isHeadlessMode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::show);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Focus on another stage to remove focus from the helpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(Stage::requestFocus);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        // assertFalse(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(helpWindow::focus);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(helpWindow.getRoot().isFocused());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/MainWindowCloseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StageHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.WindowEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains tests for closing of the {@code MainWindow}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowCloseTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmptyMainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage stage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.setupStage(stage -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            this.stage \u003d stage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "            mainWindow \u003d new MainWindow(stage, new Config(), new UserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "                    new LogicManager(new ModelManager()), new ModelManager());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle \u003d new EmptyMainWindowHandle(stage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            stage.setScene(mainWindow.getRoot().getScene());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindowHandle.focus();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FxToolkit.showStage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void close_menuBarExitButton_exitAppRequestEventPosted() throws InterruptedException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Thread.sleep(6000);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.clickOnMenuExitButton();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void close_externalRequest_exitAppRequestEventPosted() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.closeMainWindowExternally();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ExitAppRequestEvent);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * A handle for an empty {@code MainWindow}. The components in {@code MainWindow} are not initialized."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EmptyMainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        private EmptyMainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            super(stage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} by clicking on the menu bar\u0027s exit button."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private void clickOnMenuExitButton() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"File\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.clickOn(\"Exit\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         * Closes the {@code MainWindow} through an external request {@code MainWindow} (e.g pressing the \u0027X\u0027 button on"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "         * the {@code MainWindow} or closing the app through the taskbar)."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        private void closeMainWindowExternally() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(() -\u003e stage.fireEvent(new WindowEvent(stage, WindowEvent.WINDOW_CLOSE_REQUEST)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 2,
      "ryantanwk": 4,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        initUi(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedPerson \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedPerson \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardEquals(expectedPerson, selectedPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifies that creating and deleting large number of persons in {@code PersonListPanel} requires lesser than"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPerson\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }, \"Creation and deletion of person cards exceeded time limit\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a list of persons containing {@code personCount} persons that is used to populate the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code PersonListPanel}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cPerson\u003e createBackingList(int personCount) throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithPersons(personCount);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getPersonList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a .xml file containing {@code personCount} persons. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path createXmlFileWithPersons(int personCount) throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c personCount; i++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cpersons\u003e\\n\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cphone\u003e000\u003c/phone\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cemail\u003ea@aa\u003c/email\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003caddress\u003ea\u003c/address\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "            builder.append(\"\u003cfaculty\u003eSOC\u003c/faculty\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                    + \"\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003c/persons\u003e\\n\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path manyPersonsFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyPersons.xml\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(manyPersonsFile);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(manyPersonsFile, builder.toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        manyPersonsFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return manyPersonsFile;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes {@code personListPanelHandle} with a {@code PersonListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code PersonListPanel}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initUi(ObservableList\u003cPerson\u003e backingList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(backingList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 2,
      "-": 124
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "import seedu.address.model.person.Faculty;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \" + FACULTY_DESC;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + TAG_DESC_FRIEND + FACULTY_DESC;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + FACULTY_DESC;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + FACULTY_DESC;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + FACULTY_DESC;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + FACULTY_DESC;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + FACULTY_DESC;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + INVALID_TAG_DESC + FACULTY_DESC;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        /* Case: invalid faculty -\u003e rejected */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "                + INVALID_FACULTY_DESC;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        assertCommandFailure(command, Faculty.MESSAGE_FACULTY_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 21,
      "-": 240
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": "        //URL url \u003d new URL(\"https://www.google.com/maps\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "kaitingpeck": 1,
      "-": 292
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 1,
      "-": 101
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different address -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "kaitingpeck": 4,
      "-": 297
    }
  },
  {
    "path": "src/test/java/systemtests/ErrorDialogGuiTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postLater;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import guitests.guihandles.AlertDialogHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ErrorDialogGuiTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /** TODO"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showErrorDialogs() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                alertDialog.getContentText());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 7,
      "-": 28
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ryantanwk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 1,
      "ryantanwk": 1,
      "kaitingpeck": 1,
      "-": 195
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowNotOpen();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pratyayj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() throws InterruptedException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "        Thread.sleep(6000);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 3,
      "kaitingpeck": 1,
      "-": 107
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "//import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    /** TODO"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBook_dataFileDoesNotExist_loadSampleData() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person[] expectedList \u003d SampleDataUtil.getSamplePersons();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pratyayj"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pratyayj": 6,
      "-": 47
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kaitingpeck"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kaitingpeck": 2,
      "-": 154
    }
  }
]
